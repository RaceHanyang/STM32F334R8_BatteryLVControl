
STM32F334R8_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005da8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08005f30  08005f30  00015f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f60  08005f60  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08005f60  08005f60  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005f60  08005f60  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f60  08005f60  00015f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f64  08005f64  00015f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005f68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000380  20000014  08005f7c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000394  08005f7c  00020394  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000144e0  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ecc  00000000  00000000  00034524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e90  00000000  00000000  000373f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d28  00000000  00000000  00038280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021ec2  00000000  00000000  00038fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013805  00000000  00000000  0005ae6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8f8a  00000000  00000000  0006e66f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001375f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a78  00000000  00000000  0013764c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005f18 	.word	0x08005f18

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08005f18 	.word	0x08005f18

080001c8 <GAS_Can_txSetting>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan);
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef* hcan);


void GAS_Can_txSetting(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0

//	  canTxHeader.StdId = (0x283>>18)&0x7ff;
	  canTxHeader.ExtId = BatteryFanCnt;
 80001cc:	4b08      	ldr	r3, [pc, #32]	; (80001f0 <GAS_Can_txSetting+0x28>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a08      	ldr	r2, [pc, #32]	; (80001f4 <GAS_Can_txSetting+0x2c>)
 80001d2:	6053      	str	r3, [r2, #4]
	  canTxHeader.IDE	= CAN_ID_EXT;
 80001d4:	4b07      	ldr	r3, [pc, #28]	; (80001f4 <GAS_Can_txSetting+0x2c>)
 80001d6:	2204      	movs	r2, #4
 80001d8:	609a      	str	r2, [r3, #8]
	  canTxHeader.RTR	= CAN_RTR_DATA;
 80001da:	4b06      	ldr	r3, [pc, #24]	; (80001f4 <GAS_Can_txSetting+0x2c>)
 80001dc:	2200      	movs	r2, #0
 80001de:	60da      	str	r2, [r3, #12]
	  canTxHeader.DLC	=	8;
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <GAS_Can_txSetting+0x2c>)
 80001e2:	2208      	movs	r2, #8
 80001e4:	611a      	str	r2, [r3, #16]

}
 80001e6:	bf00      	nop
 80001e8:	46bd      	mov	sp, r7
 80001ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ee:	4770      	bx	lr
 80001f0:	20000004 	.word	0x20000004
 80001f4:	20000058 	.word	0x20000058

080001f8 <GAS_Can_rxSetting>:

void GAS_Can_rxSetting(void){
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0

	sFilterConfig.FilterIdHigh = (BatteryInsideID<<3)>>16;				/*first 2byte in 29bit (shift need to IED,RTR,0)*/
 80001fc:	4b19      	ldr	r3, [pc, #100]	; (8000264 <GAS_Can_rxSetting+0x6c>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	00db      	lsls	r3, r3, #3
 8000202:	0c1b      	lsrs	r3, r3, #16
 8000204:	4a18      	ldr	r2, [pc, #96]	; (8000268 <GAS_Can_rxSetting+0x70>)
 8000206:	6013      	str	r3, [r2, #0]
	sFilterConfig.FilterIdLow = (0xffff & (BatteryInsideID << 3)) | (1<<2);	/*second 2byte in 29bit + IDE (shift need to IED,RTR,0/)*/
 8000208:	4b16      	ldr	r3, [pc, #88]	; (8000264 <GAS_Can_rxSetting+0x6c>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	00db      	lsls	r3, r3, #3
 800020e:	b29b      	uxth	r3, r3
 8000210:	f043 0304 	orr.w	r3, r3, #4
 8000214:	4a14      	ldr	r2, [pc, #80]	; (8000268 <GAS_Can_rxSetting+0x70>)
 8000216:	6053      	str	r3, [r2, #4]
	sFilterConfig.FilterMaskIdHigh = (0x0ffffff0<<3)>>16;
 8000218:	4b13      	ldr	r3, [pc, #76]	; (8000268 <GAS_Can_rxSetting+0x70>)
 800021a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800021e:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow =(0xffff & (0x0FFFFFF0 << 3)) | (1<<2);
 8000220:	4b11      	ldr	r3, [pc, #68]	; (8000268 <GAS_Can_rxSetting+0x70>)
 8000222:	f64f 7284 	movw	r2, #65412	; 0xff84
 8000226:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000228:	4b0f      	ldr	r3, [pc, #60]	; (8000268 <GAS_Can_rxSetting+0x70>)
 800022a:	2200      	movs	r2, #0
 800022c:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterBank = 0;
 800022e:	4b0e      	ldr	r3, [pc, #56]	; (8000268 <GAS_Can_rxSetting+0x70>)
 8000230:	2200      	movs	r2, #0
 8000232:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000234:	4b0c      	ldr	r3, [pc, #48]	; (8000268 <GAS_Can_rxSetting+0x70>)
 8000236:	2200      	movs	r2, #0
 8000238:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800023a:	4b0b      	ldr	r3, [pc, #44]	; (8000268 <GAS_Can_rxSetting+0x70>)
 800023c:	2201      	movs	r2, #1
 800023e:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterActivation = ENABLE;
 8000240:	4b09      	ldr	r3, [pc, #36]	; (8000268 <GAS_Can_rxSetting+0x70>)
 8000242:	2201      	movs	r2, #1
 8000244:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 0;
 8000246:	4b08      	ldr	r3, [pc, #32]	; (8000268 <GAS_Can_rxSetting+0x70>)
 8000248:	2200      	movs	r2, #0
 800024a:	625a      	str	r2, [r3, #36]	; 0x24


	 if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 800024c:	4906      	ldr	r1, [pc, #24]	; (8000268 <GAS_Can_rxSetting+0x70>)
 800024e:	4807      	ldr	r0, [pc, #28]	; (800026c <GAS_Can_rxSetting+0x74>)
 8000250:	f002 f89d 	bl	800238e <HAL_CAN_ConfigFilter>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d001      	beq.n	800025e <GAS_Can_rxSetting+0x66>
	 {
	     /* Filter configuration Error */
	     Error_Handler();
 800025a:	f000 fcfb 	bl	8000c54 <Error_Handler>
	 }
}
 800025e:	bf00      	nop
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	20000000 	.word	0x20000000
 8000268:	20000030 	.word	0x20000030
 800026c:	200001a0 	.word	0x200001a0

08000270 <GAS_Can_init>:

void GAS_Can_init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0

	GAS_Can_txSetting();
 8000274:	f7ff ffa8 	bl	80001c8 <GAS_Can_txSetting>
	GAS_Can_rxSetting();
 8000278:	f7ff ffbe 	bl	80001f8 <GAS_Can_rxSetting>
//

	HAL_CAN_Start(&hcan);
 800027c:	4806      	ldr	r0, [pc, #24]	; (8000298 <GAS_Can_init+0x28>)
 800027e:	f002 f950 	bl	8002522 <HAL_CAN_Start>

	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000282:	2102      	movs	r1, #2
 8000284:	4804      	ldr	r0, [pc, #16]	; (8000298 <GAS_Can_init+0x28>)
 8000286:	f002 fbb2 	bl	80029ee <HAL_CAN_ActivateNotification>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d001      	beq.n	8000294 <GAS_Can_init+0x24>
	{
	  Error_Handler();
 8000290:	f000 fce0 	bl	8000c54 <Error_Handler>
	}


}
 8000294:	bf00      	nop
 8000296:	bd80      	pop	{r7, pc}
 8000298:	200001a0 	.word	0x200001a0

0800029c <GAS_Can_sendMessage>:

void GAS_Can_sendMessage()
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	T_BatteryDiagnose.B.prechargeStateSignal1 = HAL_GPIO_ReadPin(PrechargeStateSignal1_GPIO_Port,PrechargeStateSignal1_Pin);
 80002a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002a4:	4825      	ldr	r0, [pc, #148]	; (800033c <GAS_Can_sendMessage+0xa0>)
 80002a6:	f003 f98b 	bl	80035c0 <HAL_GPIO_ReadPin>
 80002aa:	4603      	mov	r3, r0
 80002ac:	461a      	mov	r2, r3
 80002ae:	4b24      	ldr	r3, [pc, #144]	; (8000340 <GAS_Can_sendMessage+0xa4>)
 80002b0:	701a      	strb	r2, [r3, #0]
	T_BatteryDiagnose.B.prechargeStateSignal2 = HAL_GPIO_ReadPin(PrechargeStateSignal2_GPIO_Port,PrechargeStateSignal2_Pin);
 80002b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002b6:	4821      	ldr	r0, [pc, #132]	; (800033c <GAS_Can_sendMessage+0xa0>)
 80002b8:	f003 f982 	bl	80035c0 <HAL_GPIO_ReadPin>
 80002bc:	4603      	mov	r3, r0
 80002be:	461a      	mov	r2, r3
 80002c0:	4b1f      	ldr	r3, [pc, #124]	; (8000340 <GAS_Can_sendMessage+0xa4>)
 80002c2:	705a      	strb	r2, [r3, #1]
	T_BatteryDiagnose.B.RelayContactSignal1 = HAL_GPIO_ReadPin(RelayContactSignal1_GPIO_Port,RelayContactSignal1_Pin);
 80002c4:	2101      	movs	r1, #1
 80002c6:	481f      	ldr	r0, [pc, #124]	; (8000344 <GAS_Can_sendMessage+0xa8>)
 80002c8:	f003 f97a 	bl	80035c0 <HAL_GPIO_ReadPin>
 80002cc:	4603      	mov	r3, r0
 80002ce:	461a      	mov	r2, r3
 80002d0:	4b1b      	ldr	r3, [pc, #108]	; (8000340 <GAS_Can_sendMessage+0xa4>)
 80002d2:	709a      	strb	r2, [r3, #2]
	T_BatteryDiagnose.B.RelayContactSignal2 = HAL_GPIO_ReadPin(RelayContactSignal2_GPIO_Port,RelayContactSignal2_Pin);
 80002d4:	2102      	movs	r1, #2
 80002d6:	481b      	ldr	r0, [pc, #108]	; (8000344 <GAS_Can_sendMessage+0xa8>)
 80002d8:	f003 f972 	bl	80035c0 <HAL_GPIO_ReadPin>
 80002dc:	4603      	mov	r3, r0
 80002de:	461a      	mov	r2, r3
 80002e0:	4b17      	ldr	r3, [pc, #92]	; (8000340 <GAS_Can_sendMessage+0xa4>)
 80002e2:	70da      	strb	r2, [r3, #3]
	T_BatteryDiagnose.B.RelayContactSignal3 = HAL_GPIO_ReadPin(RelayContactSignal3_GPIO_Port,RelayContactSignal3_Pin);
 80002e4:	2104      	movs	r1, #4
 80002e6:	4817      	ldr	r0, [pc, #92]	; (8000344 <GAS_Can_sendMessage+0xa8>)
 80002e8:	f003 f96a 	bl	80035c0 <HAL_GPIO_ReadPin>
 80002ec:	4603      	mov	r3, r0
 80002ee:	461a      	mov	r2, r3
 80002f0:	4b13      	ldr	r3, [pc, #76]	; (8000340 <GAS_Can_sendMessage+0xa4>)
 80002f2:	711a      	strb	r2, [r3, #4]
	T_BatteryDiagnose.B.TsalSignal = HAL_GPIO_ReadPin(TSALSignal_GPIO_Port,TSALSignal_Pin);
 80002f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002f8:	4812      	ldr	r0, [pc, #72]	; (8000344 <GAS_Can_sendMessage+0xa8>)
 80002fa:	f003 f961 	bl	80035c0 <HAL_GPIO_ReadPin>
 80002fe:	4603      	mov	r3, r0
 8000300:	461a      	mov	r2, r3
 8000302:	4b0f      	ldr	r3, [pc, #60]	; (8000340 <GAS_Can_sendMessage+0xa4>)
 8000304:	715a      	strb	r2, [r3, #5]
	T_BatteryDiagnose.B.IMDStatusFrequency = HAL_GPIO_ReadPin(IMDStatusSignal_GPIO_Port,IMDStatusSignal_Pin);
 8000306:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800030a:	480e      	ldr	r0, [pc, #56]	; (8000344 <GAS_Can_sendMessage+0xa8>)
 800030c:	f003 f958 	bl	80035c0 <HAL_GPIO_ReadPin>
 8000310:	4603      	mov	r3, r0
 8000312:	461a      	mov	r2, r3
 8000314:	4b0a      	ldr	r3, [pc, #40]	; (8000340 <GAS_Can_sendMessage+0xa4>)
 8000316:	719a      	strb	r2, [r3, #6]
	T_BatteryDiagnose.B.Reserved			= 123;
 8000318:	4b09      	ldr	r3, [pc, #36]	; (8000340 <GAS_Can_sendMessage+0xa4>)
 800031a:	227b      	movs	r2, #123	; 0x7b
 800031c:	71da      	strb	r2, [r3, #7]

	TxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan);
 800031e:	480a      	ldr	r0, [pc, #40]	; (8000348 <GAS_Can_sendMessage+0xac>)
 8000320:	f002 fa1e 	bl	8002760 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000324:	4603      	mov	r3, r0
 8000326:	4a09      	ldr	r2, [pc, #36]	; (800034c <GAS_Can_sendMessage+0xb0>)
 8000328:	6013      	str	r3, [r2, #0]
	HAL_CAN_AddTxMessage(&hcan, &canTxHeader, &T_BatteryDiagnose.TxData[0], &TxMailBox);
 800032a:	4b08      	ldr	r3, [pc, #32]	; (800034c <GAS_Can_sendMessage+0xb0>)
 800032c:	4a04      	ldr	r2, [pc, #16]	; (8000340 <GAS_Can_sendMessage+0xa4>)
 800032e:	4908      	ldr	r1, [pc, #32]	; (8000350 <GAS_Can_sendMessage+0xb4>)
 8000330:	4805      	ldr	r0, [pc, #20]	; (8000348 <GAS_Can_sendMessage+0xac>)
 8000332:	f002 f93a 	bl	80025aa <HAL_CAN_AddTxMessage>

}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	48000800 	.word	0x48000800
 8000340:	20000098 	.word	0x20000098
 8000344:	48000400 	.word	0x48000400
 8000348:	200001a0 	.word	0x200001a0
 800034c:	20000070 	.word	0x20000070
 8000350:	20000058 	.word	0x20000058

08000354 <HAL_CAN_RxFifo0MsgPendingCallback>:



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN)
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a06      	ldr	r2, [pc, #24]	; (800037c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8000362:	4293      	cmp	r3, r2
 8000364:	d105      	bne.n	8000372 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
	{
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, R_BatteryTemp.RxData);
 8000366:	4b06      	ldr	r3, [pc, #24]	; (8000380 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000368:	4a06      	ldr	r2, [pc, #24]	; (8000384 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 800036a:	2100      	movs	r1, #0
 800036c:	6878      	ldr	r0, [r7, #4]
 800036e:	f002 fa2c 	bl	80027ca <HAL_CAN_GetRxMessage>

	}
}
 8000372:	bf00      	nop
 8000374:	3708      	adds	r7, #8
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	40006400 	.word	0x40006400
 8000380:	200000a0 	.word	0x200000a0
 8000384:	2000007c 	.word	0x2000007c

08000388 <GAS_PWM_inputInit>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim);
void GAS_PWM_Fan_run();
void GAS_PWM_Check(TIM_HandleTypeDef *htim, pwmIn_t *pwmIn);

void GAS_PWM_inputInit(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0

	HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 800038c:	2100      	movs	r1, #0
 800038e:	4806      	ldr	r0, [pc, #24]	; (80003a8 <GAS_PWM_inputInit+0x20>)
 8000390:	f004 fd76 	bl	8004e80 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim16, TIM_CHANNEL_1);
 8000394:	2100      	movs	r1, #0
 8000396:	4805      	ldr	r0, [pc, #20]	; (80003ac <GAS_PWM_inputInit+0x24>)
 8000398:	f004 fd72 	bl	8004e80 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim17, TIM_CHANNEL_1);
 800039c:	2100      	movs	r1, #0
 800039e:	4804      	ldr	r0, [pc, #16]	; (80003b0 <GAS_PWM_inputInit+0x28>)
 80003a0:	f004 fd6e 	bl	8004e80 <HAL_TIM_IC_Start_IT>


}
 80003a4:	bf00      	nop
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	200001c8 	.word	0x200001c8
 80003ac:	20000344 	.word	0x20000344
 80003b0:	20000214 	.word	0x20000214

080003b4 <GAS_PWM_outputInit>:

void GAS_PWM_outputInit(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80003b8:	2100      	movs	r1, #0
 80003ba:	4813      	ldr	r0, [pc, #76]	; (8000408 <GAS_PWM_outputInit+0x54>)
 80003bc:	f004 fc1c 	bl	8004bf8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80003c0:	2104      	movs	r1, #4
 80003c2:	4811      	ldr	r0, [pc, #68]	; (8000408 <GAS_PWM_outputInit+0x54>)
 80003c4:	f004 fc18 	bl	8004bf8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80003c8:	2108      	movs	r1, #8
 80003ca:	480f      	ldr	r0, [pc, #60]	; (8000408 <GAS_PWM_outputInit+0x54>)
 80003cc:	f004 fc14 	bl	8004bf8 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80003d0:	2100      	movs	r1, #0
 80003d2:	480e      	ldr	r0, [pc, #56]	; (800040c <GAS_PWM_outputInit+0x58>)
 80003d4:	f004 fc10 	bl	8004bf8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80003d8:	2104      	movs	r1, #4
 80003da:	480c      	ldr	r0, [pc, #48]	; (800040c <GAS_PWM_outputInit+0x58>)
 80003dc:	f004 fc0c 	bl	8004bf8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80003e0:	2108      	movs	r1, #8
 80003e2:	480a      	ldr	r0, [pc, #40]	; (800040c <GAS_PWM_outputInit+0x58>)
 80003e4:	f004 fc08 	bl	8004bf8 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80003e8:	2100      	movs	r1, #0
 80003ea:	4809      	ldr	r0, [pc, #36]	; (8000410 <GAS_PWM_outputInit+0x5c>)
 80003ec:	f004 fc04 	bl	8004bf8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80003f0:	2104      	movs	r1, #4
 80003f2:	4807      	ldr	r0, [pc, #28]	; (8000410 <GAS_PWM_outputInit+0x5c>)
 80003f4:	f004 fc00 	bl	8004bf8 <HAL_TIM_PWM_Start>

	/*Turn on the fan!*/
	HAL_GPIO_WritePin(Fan_On_GPIO_Port, Fan_On_Pin, GPIO_PIN_SET);
 80003f8:	2201      	movs	r2, #1
 80003fa:	2180      	movs	r1, #128	; 0x80
 80003fc:	4805      	ldr	r0, [pc, #20]	; (8000414 <GAS_PWM_outputInit+0x60>)
 80003fe:	f003 f8f7 	bl	80035f0 <HAL_GPIO_WritePin>
}
 8000402:	bf00      	nop
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	200002ac 	.word	0x200002ac
 800040c:	200002f8 	.word	0x200002f8
 8000410:	20000260 	.word	0x20000260
 8000414:	48000800 	.word	0x48000800

08000418 <GAS_PWM_Fan_run>:
//		pwmChangeFlag = 1;
//	}
}

void GAS_PWM_Fan_run()
{
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
	/*
	 * PWM change duty cycle function
	 * Change duty cycle by changing register CCR directly
	 */

	uint16_t T = R_BatteryTemp.B.HighestTemp/10;
 800041e:	4b26      	ldr	r3, [pc, #152]	; (80004b8 <GAS_PWM_Fan_run+0xa0>)
 8000420:	781a      	ldrb	r2, [r3, #0]
 8000422:	785b      	ldrb	r3, [r3, #1]
 8000424:	f003 030f 	and.w	r3, r3, #15
 8000428:	021b      	lsls	r3, r3, #8
 800042a:	4313      	orrs	r3, r2
 800042c:	b29b      	uxth	r3, r3
 800042e:	4a23      	ldr	r2, [pc, #140]	; (80004bc <GAS_PWM_Fan_run+0xa4>)
 8000430:	fb82 1203 	smull	r1, r2, r2, r3
 8000434:	1092      	asrs	r2, r2, #2
 8000436:	17db      	asrs	r3, r3, #31
 8000438:	1ad3      	subs	r3, r2, r3
 800043a:	80bb      	strh	r3, [r7, #4]

	uint16_t per = T*4-60;
 800043c:	88bb      	ldrh	r3, [r7, #4]
 800043e:	3b0f      	subs	r3, #15
 8000440:	b29b      	uxth	r3, r3
 8000442:	009b      	lsls	r3, r3, #2
 8000444:	80fb      	strh	r3, [r7, #6]
	if (per<=20) per=20;
 8000446:	88fb      	ldrh	r3, [r7, #6]
 8000448:	2b14      	cmp	r3, #20
 800044a:	d802      	bhi.n	8000452 <GAS_PWM_Fan_run+0x3a>
 800044c:	2314      	movs	r3, #20
 800044e:	80fb      	strh	r3, [r7, #6]
 8000450:	e004      	b.n	800045c <GAS_PWM_Fan_run+0x44>
	else if (per>=100) per = 100;
 8000452:	88fb      	ldrh	r3, [r7, #6]
 8000454:	2b63      	cmp	r3, #99	; 0x63
 8000456:	d901      	bls.n	800045c <GAS_PWM_Fan_run+0x44>
 8000458:	2364      	movs	r3, #100	; 0x64
 800045a:	80fb      	strh	r3, [r7, #6]

	uint16_t duty = (per*287)/100;
 800045c:	88fa      	ldrh	r2, [r7, #6]
 800045e:	4613      	mov	r3, r2
 8000460:	00db      	lsls	r3, r3, #3
 8000462:	4413      	add	r3, r2
 8000464:	015b      	lsls	r3, r3, #5
 8000466:	1a9b      	subs	r3, r3, r2
 8000468:	4a15      	ldr	r2, [pc, #84]	; (80004c0 <GAS_PWM_Fan_run+0xa8>)
 800046a:	fb82 1203 	smull	r1, r2, r2, r3
 800046e:	1152      	asrs	r2, r2, #5
 8000470:	17db      	asrs	r3, r3, #31
 8000472:	1ad3      	subs	r3, r2, r3
 8000474:	807b      	strh	r3, [r7, #2]

	TIM1->CCR1=duty;
 8000476:	4a13      	ldr	r2, [pc, #76]	; (80004c4 <GAS_PWM_Fan_run+0xac>)
 8000478:	887b      	ldrh	r3, [r7, #2]
 800047a:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2=duty;
 800047c:	4a11      	ldr	r2, [pc, #68]	; (80004c4 <GAS_PWM_Fan_run+0xac>)
 800047e:	887b      	ldrh	r3, [r7, #2]
 8000480:	6393      	str	r3, [r2, #56]	; 0x38
	TIM1->CCR3=duty;
 8000482:	4a10      	ldr	r2, [pc, #64]	; (80004c4 <GAS_PWM_Fan_run+0xac>)
 8000484:	887b      	ldrh	r3, [r7, #2]
 8000486:	63d3      	str	r3, [r2, #60]	; 0x3c

	TIM2->CCR1=duty;
 8000488:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800048c:	887b      	ldrh	r3, [r7, #2]
 800048e:	6353      	str	r3, [r2, #52]	; 0x34
	TIM2->CCR2=duty;
 8000490:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000494:	887b      	ldrh	r3, [r7, #2]
 8000496:	6393      	str	r3, [r2, #56]	; 0x38
	TIM2->CCR3=duty;
 8000498:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800049c:	887b      	ldrh	r3, [r7, #2]
 800049e:	63d3      	str	r3, [r2, #60]	; 0x3c

	TIM3->CCR1=duty;
 80004a0:	4a09      	ldr	r2, [pc, #36]	; (80004c8 <GAS_PWM_Fan_run+0xb0>)
 80004a2:	887b      	ldrh	r3, [r7, #2]
 80004a4:	6353      	str	r3, [r2, #52]	; 0x34
	TIM3->CCR2=duty;
 80004a6:	4a08      	ldr	r2, [pc, #32]	; (80004c8 <GAS_PWM_Fan_run+0xb0>)
 80004a8:	887b      	ldrh	r3, [r7, #2]
 80004aa:	6393      	str	r3, [r2, #56]	; 0x38
}
 80004ac:	bf00      	nop
 80004ae:	370c      	adds	r7, #12
 80004b0:	46bd      	mov	sp, r7
 80004b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b6:	4770      	bx	lr
 80004b8:	200000a0 	.word	0x200000a0
 80004bc:	66666667 	.word	0x66666667
 80004c0:	51eb851f 	.word	0x51eb851f
 80004c4:	40012c00 	.word	0x40012c00
 80004c8:	40000400 	.word	0x40000400

080004cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	6039      	str	r1, [r7, #0]
 80004d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	db0a      	blt.n	80004f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	b2da      	uxtb	r2, r3
 80004e4:	490c      	ldr	r1, [pc, #48]	; (8000518 <__NVIC_SetPriority+0x4c>)
 80004e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004ea:	0112      	lsls	r2, r2, #4
 80004ec:	b2d2      	uxtb	r2, r2
 80004ee:	440b      	add	r3, r1
 80004f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80004f4:	e00a      	b.n	800050c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004f6:	683b      	ldr	r3, [r7, #0]
 80004f8:	b2da      	uxtb	r2, r3
 80004fa:	4908      	ldr	r1, [pc, #32]	; (800051c <__NVIC_SetPriority+0x50>)
 80004fc:	79fb      	ldrb	r3, [r7, #7]
 80004fe:	f003 030f 	and.w	r3, r3, #15
 8000502:	3b04      	subs	r3, #4
 8000504:	0112      	lsls	r2, r2, #4
 8000506:	b2d2      	uxtb	r2, r2
 8000508:	440b      	add	r3, r1
 800050a:	761a      	strb	r2, [r3, #24]
}
 800050c:	bf00      	nop
 800050e:	370c      	adds	r7, #12
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr
 8000518:	e000e100 	.word	0xe000e100
 800051c:	e000ed00 	.word	0xe000ed00

08000520 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	3b01      	subs	r3, #1
 800052c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000530:	d301      	bcc.n	8000536 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000532:	2301      	movs	r3, #1
 8000534:	e00f      	b.n	8000556 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000536:	4a0a      	ldr	r2, [pc, #40]	; (8000560 <SysTick_Config+0x40>)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	3b01      	subs	r3, #1
 800053c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800053e:	210f      	movs	r1, #15
 8000540:	f04f 30ff 	mov.w	r0, #4294967295
 8000544:	f7ff ffc2 	bl	80004cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000548:	4b05      	ldr	r3, [pc, #20]	; (8000560 <SysTick_Config+0x40>)
 800054a:	2200      	movs	r2, #0
 800054c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800054e:	4b04      	ldr	r3, [pc, #16]	; (8000560 <SysTick_Config+0x40>)
 8000550:	2207      	movs	r2, #7
 8000552:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000554:	2300      	movs	r3, #0
}
 8000556:	4618      	mov	r0, r3
 8000558:	3708      	adds	r7, #8
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	e000e010 	.word	0xe000e010

08000564 <GAS_Scheduler_init>:
void GAS_Scheduler_taskCounter_1000ms(void);
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);
void GAS_Schduler(void);

void GAS_Scheduler_init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
//	if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
//	  {
//		  Error_Handler();
//	  }
	SysTick_Config(SystemCoreClock/1000);
 8000568:	4b08      	ldr	r3, [pc, #32]	; (800058c <GAS_Scheduler_init+0x28>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a08      	ldr	r2, [pc, #32]	; (8000590 <GAS_Scheduler_init+0x2c>)
 800056e:	fba2 2303 	umull	r2, r3, r2, r3
 8000572:	099b      	lsrs	r3, r3, #6
 8000574:	4618      	mov	r0, r3
 8000576:	f7ff ffd3 	bl	8000520 <SysTick_Config>


//********PWM initialization********
	GAS_PWM_inputInit();
 800057a:	f7ff ff05 	bl	8000388 <GAS_PWM_inputInit>
	GAS_PWM_outputInit();
 800057e:	f7ff ff19 	bl	80003b4 <GAS_PWM_outputInit>



	GAS_Can_init();
 8000582:	f7ff fe75 	bl	8000270 <GAS_Can_init>

}
 8000586:	bf00      	nop
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	20000008 	.word	0x20000008
 8000590:	10624dd3 	.word	0x10624dd3

08000594 <GAS_Scheduler_taskCounter_1ms>:



void GAS_Scheduler_taskCounter_1ms(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0

}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr

080005a2 <GAS_Scheduler_taskCounter_10ms>:

void GAS_Scheduler_taskCounter_10ms(void)
{
 80005a2:	b580      	push	{r7, lr}
 80005a4:	af00      	add	r7, sp, #0
	GAS_Can_sendMessage();
 80005a6:	f7ff fe79 	bl	800029c <GAS_Can_sendMessage>
//	GAS_Diagnose_run_10ms();
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}

080005ae <GAS_Scheduler_taskCounter_100ms>:

void GAS_Scheduler_taskCounter_100ms(void)
{
 80005ae:	b580      	push	{r7, lr}
 80005b0:	af00      	add	r7, sp, #0
	GAS_PWM_Fan_run();
 80005b2:	f7ff ff31 	bl	8000418 <GAS_PWM_Fan_run>
}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
	...

080005bc <GAS_Scheduler_taskCounter_1000ms>:
void GAS_Scheduler_taskCounter_1000ms(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 80005c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c4:	4804      	ldr	r0, [pc, #16]	; (80005d8 <GAS_Scheduler_taskCounter_1000ms+0x1c>)
 80005c6:	f003 f82b 	bl	8003620 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 80005ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ce:	4802      	ldr	r0, [pc, #8]	; (80005d8 <GAS_Scheduler_taskCounter_1000ms+0x1c>)
 80005d0:	f003 f826 	bl	8003620 <HAL_GPIO_TogglePin>
//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
//	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	48000400 	.word	0x48000400

080005dc <HAL_SYSTICK_Callback>:

void HAL_SYSTICK_Callback(void){
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
	gTimerCnt++;
 80005e0:	4b1d      	ldr	r3, [pc, #116]	; (8000658 <HAL_SYSTICK_Callback+0x7c>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	3301      	adds	r3, #1
 80005e6:	4a1c      	ldr	r2, [pc, #112]	; (8000658 <HAL_SYSTICK_Callback+0x7c>)
 80005e8:	6013      	str	r3, [r2, #0]
			gTask.flag_1ms=True;
 80005ea:	4b1c      	ldr	r3, [pc, #112]	; (800065c <HAL_SYSTICK_Callback+0x80>)
 80005ec:	2201      	movs	r2, #1
 80005ee:	701a      	strb	r2, [r3, #0]
			if(gTimerCnt % 10 == 0)
 80005f0:	4b19      	ldr	r3, [pc, #100]	; (8000658 <HAL_SYSTICK_Callback+0x7c>)
 80005f2:	6819      	ldr	r1, [r3, #0]
 80005f4:	4b1a      	ldr	r3, [pc, #104]	; (8000660 <HAL_SYSTICK_Callback+0x84>)
 80005f6:	fb83 2301 	smull	r2, r3, r3, r1
 80005fa:	109a      	asrs	r2, r3, #2
 80005fc:	17cb      	asrs	r3, r1, #31
 80005fe:	1ad2      	subs	r2, r2, r3
 8000600:	4613      	mov	r3, r2
 8000602:	009b      	lsls	r3, r3, #2
 8000604:	4413      	add	r3, r2
 8000606:	005b      	lsls	r3, r3, #1
 8000608:	1aca      	subs	r2, r1, r3
 800060a:	2a00      	cmp	r2, #0
 800060c:	d102      	bne.n	8000614 <HAL_SYSTICK_Callback+0x38>
			{
				gTask.flag_10ms=True;
 800060e:	4b13      	ldr	r3, [pc, #76]	; (800065c <HAL_SYSTICK_Callback+0x80>)
 8000610:	2201      	movs	r2, #1
 8000612:	705a      	strb	r2, [r3, #1]
			}
			if(gTimerCnt % 100 == 0)
 8000614:	4b10      	ldr	r3, [pc, #64]	; (8000658 <HAL_SYSTICK_Callback+0x7c>)
 8000616:	681a      	ldr	r2, [r3, #0]
 8000618:	4b12      	ldr	r3, [pc, #72]	; (8000664 <HAL_SYSTICK_Callback+0x88>)
 800061a:	fb83 1302 	smull	r1, r3, r3, r2
 800061e:	1159      	asrs	r1, r3, #5
 8000620:	17d3      	asrs	r3, r2, #31
 8000622:	1acb      	subs	r3, r1, r3
 8000624:	2164      	movs	r1, #100	; 0x64
 8000626:	fb01 f303 	mul.w	r3, r1, r3
 800062a:	1ad3      	subs	r3, r2, r3
 800062c:	2b00      	cmp	r3, #0
 800062e:	d102      	bne.n	8000636 <HAL_SYSTICK_Callback+0x5a>
			{
				gTask.flag_100ms=True;
 8000630:	4b0a      	ldr	r3, [pc, #40]	; (800065c <HAL_SYSTICK_Callback+0x80>)
 8000632:	2201      	movs	r2, #1
 8000634:	709a      	strb	r2, [r3, #2]
			}

			if(gTimerCnt == 1000)
 8000636:	4b08      	ldr	r3, [pc, #32]	; (8000658 <HAL_SYSTICK_Callback+0x7c>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800063e:	d105      	bne.n	800064c <HAL_SYSTICK_Callback+0x70>
			{
				gTask.flag_1000ms=True;
 8000640:	4b06      	ldr	r3, [pc, #24]	; (800065c <HAL_SYSTICK_Callback+0x80>)
 8000642:	2201      	movs	r2, #1
 8000644:	70da      	strb	r2, [r3, #3]
				gTimerCnt = 0;
 8000646:	4b04      	ldr	r3, [pc, #16]	; (8000658 <HAL_SYSTICK_Callback+0x7c>)
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
			}
}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	200000f0 	.word	0x200000f0
 800065c:	200000d0 	.word	0x200000d0
 8000660:	66666667 	.word	0x66666667
 8000664:	51eb851f 	.word	0x51eb851f

08000668 <GAS_Scheduler>:
//		gTimerCnt = 0;
//	}
//}

void GAS_Scheduler(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0


	if(gTask.flag_1ms == True)
 800066c:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <GAS_Scheduler+0x58>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	b2db      	uxtb	r3, r3
 8000672:	2b01      	cmp	r3, #1
 8000674:	d104      	bne.n	8000680 <GAS_Scheduler+0x18>
	{
		gTask.flag_1ms = False;
 8000676:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <GAS_Scheduler+0x58>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
		GAS_Scheduler_taskCounter_1ms();
 800067c:	f7ff ff8a 	bl	8000594 <GAS_Scheduler_taskCounter_1ms>
	}

	if(gTask.flag_10ms == True)
 8000680:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <GAS_Scheduler+0x58>)
 8000682:	785b      	ldrb	r3, [r3, #1]
 8000684:	b2db      	uxtb	r3, r3
 8000686:	2b01      	cmp	r3, #1
 8000688:	d104      	bne.n	8000694 <GAS_Scheduler+0x2c>
	{
		gTask.flag_10ms = False;
 800068a:	4b0d      	ldr	r3, [pc, #52]	; (80006c0 <GAS_Scheduler+0x58>)
 800068c:	2200      	movs	r2, #0
 800068e:	705a      	strb	r2, [r3, #1]
		GAS_Scheduler_taskCounter_10ms();
 8000690:	f7ff ff87 	bl	80005a2 <GAS_Scheduler_taskCounter_10ms>
	}

	if(gTask.flag_100ms == True)
 8000694:	4b0a      	ldr	r3, [pc, #40]	; (80006c0 <GAS_Scheduler+0x58>)
 8000696:	789b      	ldrb	r3, [r3, #2]
 8000698:	b2db      	uxtb	r3, r3
 800069a:	2b01      	cmp	r3, #1
 800069c:	d104      	bne.n	80006a8 <GAS_Scheduler+0x40>
	{
		gTask.flag_100ms = False;
 800069e:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <GAS_Scheduler+0x58>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	709a      	strb	r2, [r3, #2]
		GAS_Scheduler_taskCounter_100ms();
 80006a4:	f7ff ff83 	bl	80005ae <GAS_Scheduler_taskCounter_100ms>
	}

	if(gTask.flag_1000ms == True)
 80006a8:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <GAS_Scheduler+0x58>)
 80006aa:	78db      	ldrb	r3, [r3, #3]
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d104      	bne.n	80006bc <GAS_Scheduler+0x54>
	{
		gTask.flag_1000ms = False;
 80006b2:	4b03      	ldr	r3, [pc, #12]	; (80006c0 <GAS_Scheduler+0x58>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	70da      	strb	r2, [r3, #3]
		GAS_Scheduler_taskCounter_1000ms();
 80006b8:	f7ff ff80 	bl	80005bc <GAS_Scheduler_taskCounter_1000ms>
	}

//	GAS_Can_recieveMessage(&hcan);
//	HAL_CAN_IRQHandler(&hcan);
//	  pin_state=HAL_GPIO_ReadPin(GPIO_PIN_8);
}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	200000d0 	.word	0x200000d0

080006c4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08a      	sub	sp, #40	; 0x28
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006ca:	f107 031c 	add.w	r3, r7, #28
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]
 80006e4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80006e6:	4b35      	ldr	r3, [pc, #212]	; (80007bc <MX_ADC1_Init+0xf8>)
 80006e8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80006ec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006ee:	4b33      	ldr	r3, [pc, #204]	; (80007bc <MX_ADC1_Init+0xf8>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006f4:	4b31      	ldr	r3, [pc, #196]	; (80007bc <MX_ADC1_Init+0xf8>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006fa:	4b30      	ldr	r3, [pc, #192]	; (80007bc <MX_ADC1_Init+0xf8>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000700:	4b2e      	ldr	r3, [pc, #184]	; (80007bc <MX_ADC1_Init+0xf8>)
 8000702:	2201      	movs	r2, #1
 8000704:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000706:	4b2d      	ldr	r3, [pc, #180]	; (80007bc <MX_ADC1_Init+0xf8>)
 8000708:	2200      	movs	r2, #0
 800070a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800070e:	4b2b      	ldr	r3, [pc, #172]	; (80007bc <MX_ADC1_Init+0xf8>)
 8000710:	2200      	movs	r2, #0
 8000712:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000714:	4b29      	ldr	r3, [pc, #164]	; (80007bc <MX_ADC1_Init+0xf8>)
 8000716:	2201      	movs	r2, #1
 8000718:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800071a:	4b28      	ldr	r3, [pc, #160]	; (80007bc <MX_ADC1_Init+0xf8>)
 800071c:	2200      	movs	r2, #0
 800071e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000720:	4b26      	ldr	r3, [pc, #152]	; (80007bc <MX_ADC1_Init+0xf8>)
 8000722:	2202      	movs	r2, #2
 8000724:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000726:	4b25      	ldr	r3, [pc, #148]	; (80007bc <MX_ADC1_Init+0xf8>)
 8000728:	2201      	movs	r2, #1
 800072a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800072e:	4b23      	ldr	r3, [pc, #140]	; (80007bc <MX_ADC1_Init+0xf8>)
 8000730:	2204      	movs	r2, #4
 8000732:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000734:	4b21      	ldr	r3, [pc, #132]	; (80007bc <MX_ADC1_Init+0xf8>)
 8000736:	2200      	movs	r2, #0
 8000738:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800073a:	4b20      	ldr	r3, [pc, #128]	; (80007bc <MX_ADC1_Init+0xf8>)
 800073c:	2200      	movs	r2, #0
 800073e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000740:	481e      	ldr	r0, [pc, #120]	; (80007bc <MX_ADC1_Init+0xf8>)
 8000742:	f000 ffa9 	bl	8001698 <HAL_ADC_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800074c:	f000 fa82 	bl	8000c54 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000750:	2300      	movs	r3, #0
 8000752:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000754:	f107 031c 	add.w	r3, r7, #28
 8000758:	4619      	mov	r1, r3
 800075a:	4818      	ldr	r0, [pc, #96]	; (80007bc <MX_ADC1_Init+0xf8>)
 800075c:	f001 fbf0 	bl	8001f40 <HAL_ADCEx_MultiModeConfigChannel>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000766:	f000 fa75 	bl	8000c54 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800076a:	2301      	movs	r3, #1
 800076c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800076e:	2301      	movs	r3, #1
 8000770:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	4619      	mov	r1, r3
 8000786:	480d      	ldr	r0, [pc, #52]	; (80007bc <MX_ADC1_Init+0xf8>)
 8000788:	f001 f918 	bl	80019bc <HAL_ADC_ConfigChannel>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000792:	f000 fa5f 	bl	8000c54 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000796:	2309      	movs	r3, #9
 8000798:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800079a:	2302      	movs	r3, #2
 800079c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	4619      	mov	r1, r3
 80007a2:	4806      	ldr	r0, [pc, #24]	; (80007bc <MX_ADC1_Init+0xf8>)
 80007a4:	f001 f90a 	bl	80019bc <HAL_ADC_ConfigChannel>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 80007ae:	f000 fa51 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007b2:	bf00      	nop
 80007b4:	3728      	adds	r7, #40	; 0x28
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	2000010c 	.word	0x2000010c

080007c0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08a      	sub	sp, #40	; 0x28
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80007e0:	d164      	bne.n	80008ac <HAL_ADC_MspInit+0xec>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80007e2:	4b34      	ldr	r3, [pc, #208]	; (80008b4 <HAL_ADC_MspInit+0xf4>)
 80007e4:	695b      	ldr	r3, [r3, #20]
 80007e6:	4a33      	ldr	r2, [pc, #204]	; (80008b4 <HAL_ADC_MspInit+0xf4>)
 80007e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ec:	6153      	str	r3, [r2, #20]
 80007ee:	4b31      	ldr	r3, [pc, #196]	; (80008b4 <HAL_ADC_MspInit+0xf4>)
 80007f0:	695b      	ldr	r3, [r3, #20]
 80007f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fa:	4b2e      	ldr	r3, [pc, #184]	; (80008b4 <HAL_ADC_MspInit+0xf4>)
 80007fc:	695b      	ldr	r3, [r3, #20]
 80007fe:	4a2d      	ldr	r2, [pc, #180]	; (80008b4 <HAL_ADC_MspInit+0xf4>)
 8000800:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000804:	6153      	str	r3, [r2, #20]
 8000806:	4b2b      	ldr	r3, [pc, #172]	; (80008b4 <HAL_ADC_MspInit+0xf4>)
 8000808:	695b      	ldr	r3, [r3, #20]
 800080a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	4b28      	ldr	r3, [pc, #160]	; (80008b4 <HAL_ADC_MspInit+0xf4>)
 8000814:	695b      	ldr	r3, [r3, #20]
 8000816:	4a27      	ldr	r2, [pc, #156]	; (80008b4 <HAL_ADC_MspInit+0xf4>)
 8000818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800081c:	6153      	str	r3, [r2, #20]
 800081e:	4b25      	ldr	r3, [pc, #148]	; (80008b4 <HAL_ADC_MspInit+0xf4>)
 8000820:	695b      	ldr	r3, [r3, #20]
 8000822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN9
    PA0     ------> ADC1_IN1
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800082a:	2308      	movs	r3, #8
 800082c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800082e:	2303      	movs	r3, #3
 8000830:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	4619      	mov	r1, r3
 800083c:	481e      	ldr	r0, [pc, #120]	; (80008b8 <HAL_ADC_MspInit+0xf8>)
 800083e:	f002 fd4d 	bl	80032dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000842:	2309      	movs	r3, #9
 8000844:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000846:	2303      	movs	r3, #3
 8000848:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	4619      	mov	r1, r3
 8000854:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000858:	f002 fd40 	bl	80032dc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800085c:	4b17      	ldr	r3, [pc, #92]	; (80008bc <HAL_ADC_MspInit+0xfc>)
 800085e:	4a18      	ldr	r2, [pc, #96]	; (80008c0 <HAL_ADC_MspInit+0x100>)
 8000860:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000862:	4b16      	ldr	r3, [pc, #88]	; (80008bc <HAL_ADC_MspInit+0xfc>)
 8000864:	2200      	movs	r2, #0
 8000866:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000868:	4b14      	ldr	r3, [pc, #80]	; (80008bc <HAL_ADC_MspInit+0xfc>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800086e:	4b13      	ldr	r3, [pc, #76]	; (80008bc <HAL_ADC_MspInit+0xfc>)
 8000870:	2280      	movs	r2, #128	; 0x80
 8000872:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000874:	4b11      	ldr	r3, [pc, #68]	; (80008bc <HAL_ADC_MspInit+0xfc>)
 8000876:	f44f 7200 	mov.w	r2, #512	; 0x200
 800087a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800087c:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <HAL_ADC_MspInit+0xfc>)
 800087e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000882:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000884:	4b0d      	ldr	r3, [pc, #52]	; (80008bc <HAL_ADC_MspInit+0xfc>)
 8000886:	2220      	movs	r2, #32
 8000888:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800088a:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <HAL_ADC_MspInit+0xfc>)
 800088c:	2200      	movs	r2, #0
 800088e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000890:	480a      	ldr	r0, [pc, #40]	; (80008bc <HAL_ADC_MspInit+0xfc>)
 8000892:	f002 fc18 	bl	80030c6 <HAL_DMA_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <HAL_ADC_MspInit+0xe0>
    {
      Error_Handler();
 800089c:	f000 f9da 	bl	8000c54 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4a06      	ldr	r2, [pc, #24]	; (80008bc <HAL_ADC_MspInit+0xfc>)
 80008a4:	639a      	str	r2, [r3, #56]	; 0x38
 80008a6:	4a05      	ldr	r2, [pc, #20]	; (80008bc <HAL_ADC_MspInit+0xfc>)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80008ac:	bf00      	nop
 80008ae:	3728      	adds	r7, #40	; 0x28
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40021000 	.word	0x40021000
 80008b8:	48000800 	.word	0x48000800
 80008bc:	2000015c 	.word	0x2000015c
 80008c0:	40020008 	.word	0x40020008

080008c4 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80008c8:	4b17      	ldr	r3, [pc, #92]	; (8000928 <MX_CAN_Init+0x64>)
 80008ca:	4a18      	ldr	r2, [pc, #96]	; (800092c <MX_CAN_Init+0x68>)
 80008cc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 60;
 80008ce:	4b16      	ldr	r3, [pc, #88]	; (8000928 <MX_CAN_Init+0x64>)
 80008d0:	223c      	movs	r2, #60	; 0x3c
 80008d2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80008d4:	4b14      	ldr	r3, [pc, #80]	; (8000928 <MX_CAN_Init+0x64>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008da:	4b13      	ldr	r3, [pc, #76]	; (8000928 <MX_CAN_Init+0x64>)
 80008dc:	2200      	movs	r2, #0
 80008de:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_4TQ;
 80008e0:	4b11      	ldr	r3, [pc, #68]	; (8000928 <MX_CAN_Init+0x64>)
 80008e2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80008e6:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80008e8:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <MX_CAN_Init+0x64>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <MX_CAN_Init+0x64>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80008f4:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <MX_CAN_Init+0x64>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80008fa:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <MX_CAN_Init+0x64>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000900:	4b09      	ldr	r3, [pc, #36]	; (8000928 <MX_CAN_Init+0x64>)
 8000902:	2200      	movs	r2, #0
 8000904:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000906:	4b08      	ldr	r3, [pc, #32]	; (8000928 <MX_CAN_Init+0x64>)
 8000908:	2200      	movs	r2, #0
 800090a:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <MX_CAN_Init+0x64>)
 800090e:	2200      	movs	r2, #0
 8000910:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000912:	4805      	ldr	r0, [pc, #20]	; (8000928 <MX_CAN_Init+0x64>)
 8000914:	f001 fc40 	bl	8002198 <HAL_CAN_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 800091e:	f000 f999 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	200001a0 	.word	0x200001a0
 800092c:	40006400 	.word	0x40006400

08000930 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08a      	sub	sp, #40	; 0x28
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a20      	ldr	r2, [pc, #128]	; (80009d0 <HAL_CAN_MspInit+0xa0>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d139      	bne.n	80009c6 <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000952:	4b20      	ldr	r3, [pc, #128]	; (80009d4 <HAL_CAN_MspInit+0xa4>)
 8000954:	69db      	ldr	r3, [r3, #28]
 8000956:	4a1f      	ldr	r2, [pc, #124]	; (80009d4 <HAL_CAN_MspInit+0xa4>)
 8000958:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800095c:	61d3      	str	r3, [r2, #28]
 800095e:	4b1d      	ldr	r3, [pc, #116]	; (80009d4 <HAL_CAN_MspInit+0xa4>)
 8000960:	69db      	ldr	r3, [r3, #28]
 8000962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000966:	613b      	str	r3, [r7, #16]
 8000968:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096a:	4b1a      	ldr	r3, [pc, #104]	; (80009d4 <HAL_CAN_MspInit+0xa4>)
 800096c:	695b      	ldr	r3, [r3, #20]
 800096e:	4a19      	ldr	r2, [pc, #100]	; (80009d4 <HAL_CAN_MspInit+0xa4>)
 8000970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000974:	6153      	str	r3, [r2, #20]
 8000976:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <HAL_CAN_MspInit+0xa4>)
 8000978:	695b      	ldr	r3, [r3, #20]
 800097a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000982:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000986:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000988:	2302      	movs	r3, #2
 800098a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000990:	2303      	movs	r3, #3
 8000992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000994:	2309      	movs	r3, #9
 8000996:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	4619      	mov	r1, r3
 800099e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a2:	f002 fc9b 	bl	80032dc <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2100      	movs	r1, #0
 80009aa:	2014      	movs	r0, #20
 80009ac:	f002 fb4f 	bl	800304e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 80009b0:	2014      	movs	r0, #20
 80009b2:	f002 fb68 	bl	8003086 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2100      	movs	r1, #0
 80009ba:	2015      	movs	r0, #21
 80009bc:	f002 fb47 	bl	800304e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 80009c0:	2015      	movs	r0, #21
 80009c2:	f002 fb60 	bl	8003086 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 80009c6:	bf00      	nop
 80009c8:	3728      	adds	r7, #40	; 0x28
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40006400 	.word	0x40006400
 80009d4:	40021000 	.word	0x40021000

080009d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009de:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <MX_DMA_Init+0x38>)
 80009e0:	695b      	ldr	r3, [r3, #20]
 80009e2:	4a0b      	ldr	r2, [pc, #44]	; (8000a10 <MX_DMA_Init+0x38>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	6153      	str	r3, [r2, #20]
 80009ea:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <MX_DMA_Init+0x38>)
 80009ec:	695b      	ldr	r3, [r3, #20]
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2100      	movs	r1, #0
 80009fa:	200b      	movs	r0, #11
 80009fc:	f002 fb27 	bl	800304e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a00:	200b      	movs	r0, #11
 8000a02:	f002 fb40 	bl	8003086 <HAL_NVIC_EnableIRQ>

}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40021000 	.word	0x40021000

08000a14 <MX_GPIO_Init>:
     PA4   ------> ADC2_IN1
     PC4   ------> ADC2_IN5
     PC5   ------> ADC2_IN11
*/
void MX_GPIO_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08a      	sub	sp, #40	; 0x28
 8000a18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	60da      	str	r2, [r3, #12]
 8000a28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2a:	4b47      	ldr	r3, [pc, #284]	; (8000b48 <MX_GPIO_Init+0x134>)
 8000a2c:	695b      	ldr	r3, [r3, #20]
 8000a2e:	4a46      	ldr	r2, [pc, #280]	; (8000b48 <MX_GPIO_Init+0x134>)
 8000a30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a34:	6153      	str	r3, [r2, #20]
 8000a36:	4b44      	ldr	r3, [pc, #272]	; (8000b48 <MX_GPIO_Init+0x134>)
 8000a38:	695b      	ldr	r3, [r3, #20]
 8000a3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a3e:	613b      	str	r3, [r7, #16]
 8000a40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a42:	4b41      	ldr	r3, [pc, #260]	; (8000b48 <MX_GPIO_Init+0x134>)
 8000a44:	695b      	ldr	r3, [r3, #20]
 8000a46:	4a40      	ldr	r2, [pc, #256]	; (8000b48 <MX_GPIO_Init+0x134>)
 8000a48:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a4c:	6153      	str	r3, [r2, #20]
 8000a4e:	4b3e      	ldr	r3, [pc, #248]	; (8000b48 <MX_GPIO_Init+0x134>)
 8000a50:	695b      	ldr	r3, [r3, #20]
 8000a52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5a:	4b3b      	ldr	r3, [pc, #236]	; (8000b48 <MX_GPIO_Init+0x134>)
 8000a5c:	695b      	ldr	r3, [r3, #20]
 8000a5e:	4a3a      	ldr	r2, [pc, #232]	; (8000b48 <MX_GPIO_Init+0x134>)
 8000a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a64:	6153      	str	r3, [r2, #20]
 8000a66:	4b38      	ldr	r3, [pc, #224]	; (8000b48 <MX_GPIO_Init+0x134>)
 8000a68:	695b      	ldr	r3, [r3, #20]
 8000a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a6e:	60bb      	str	r3, [r7, #8]
 8000a70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a72:	4b35      	ldr	r3, [pc, #212]	; (8000b48 <MX_GPIO_Init+0x134>)
 8000a74:	695b      	ldr	r3, [r3, #20]
 8000a76:	4a34      	ldr	r2, [pc, #208]	; (8000b48 <MX_GPIO_Init+0x134>)
 8000a78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a7c:	6153      	str	r3, [r2, #20]
 8000a7e:	4b32      	ldr	r3, [pc, #200]	; (8000b48 <MX_GPIO_Init+0x134>)
 8000a80:	695b      	ldr	r3, [r3, #20]
 8000a82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|Fan_Tach_S1_Pin|GPIO_PIN_8
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	f44f 4133 	mov.w	r1, #45824	; 0xb300
 8000a90:	482e      	ldr	r0, [pc, #184]	; (8000b4c <MX_GPIO_Init+0x138>)
 8000a92:	f002 fdad 	bl	80035f0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Fan_Tach_S0_Pin|Fan_On_Pin, GPIO_PIN_RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	21c0      	movs	r1, #192	; 0xc0
 8000a9a:	482d      	ldr	r0, [pc, #180]	; (8000b50 <MX_GPIO_Init+0x13c>)
 8000a9c:	f002 fda8 	bl	80035f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = PrechargeStateSignal1_Pin|PrechargeStateSignal2_Pin;
 8000aa0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000aa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4826      	ldr	r0, [pc, #152]	; (8000b50 <MX_GPIO_Init+0x13c>)
 8000ab6:	f002 fc11 	bl	80032dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000aba:	2310      	movs	r3, #16
 8000abc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000abe:	2303      	movs	r3, #3
 8000ac0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	4619      	mov	r1, r3
 8000acc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad0:	f002 fc04 	bl	80032dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000ad4:	2330      	movs	r3, #48	; 0x30
 8000ad6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ad8:	2303      	movs	r3, #3
 8000ada:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	481a      	ldr	r0, [pc, #104]	; (8000b50 <MX_GPIO_Init+0x13c>)
 8000ae8:	f002 fbf8 	bl	80032dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = RelayContactSignal1_Pin|RelayContactSignal2_Pin|RelayContactSignal3_Pin|TSALSignal_Pin
 8000aec:	f640 4307 	movw	r3, #3079	; 0xc07
 8000af0:	617b      	str	r3, [r7, #20]
                          |IMDStatusSignal_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afa:	f107 0314 	add.w	r3, r7, #20
 8000afe:	4619      	mov	r1, r3
 8000b00:	4812      	ldr	r0, [pc, #72]	; (8000b4c <MX_GPIO_Init+0x138>)
 8000b02:	f002 fbeb 	bl	80032dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PBPin PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|Fan_Tach_S1_Pin|GPIO_PIN_8
 8000b06:	f44f 4333 	mov.w	r3, #45824	; 0xb300
 8000b0a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b14:	2300      	movs	r3, #0
 8000b16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	480b      	ldr	r0, [pc, #44]	; (8000b4c <MX_GPIO_Init+0x138>)
 8000b20:	f002 fbdc 	bl	80032dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Fan_Tach_S0_Pin|Fan_On_Pin;
 8000b24:	23c0      	movs	r3, #192	; 0xc0
 8000b26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b30:	2300      	movs	r3, #0
 8000b32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4805      	ldr	r0, [pc, #20]	; (8000b50 <MX_GPIO_Init+0x13c>)
 8000b3c:	f002 fbce 	bl	80032dc <HAL_GPIO_Init>

}
 8000b40:	bf00      	nop
 8000b42:	3728      	adds	r7, #40	; 0x28
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	48000400 	.word	0x48000400
 8000b50:	48000800 	.word	0x48000800

08000b54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b58:	f000 fd38 	bl	80015cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b5c:	f000 f819 	bl	8000b92 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b60:	f7ff ff58 	bl	8000a14 <MX_GPIO_Init>
  MX_CAN_Init();
 8000b64:	f7ff feae 	bl	80008c4 <MX_CAN_Init>
  MX_TIM1_Init();
 8000b68:	f000 f8fa 	bl	8000d60 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000b6c:	f000 f9a0 	bl	8000eb0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b70:	f000 fa0e 	bl	8000f90 <MX_TIM3_Init>
  MX_TIM15_Init();
 8000b74:	f000 fa7c 	bl	8001070 <MX_TIM15_Init>
  MX_ADC1_Init();
 8000b78:	f7ff fda4 	bl	80006c4 <MX_ADC1_Init>
  MX_TIM16_Init();
 8000b7c:	f000 face 	bl	800111c <MX_TIM16_Init>
  MX_DMA_Init();
 8000b80:	f7ff ff2a 	bl	80009d8 <MX_DMA_Init>
  MX_TIM17_Init();
 8000b84:	f000 fb14 	bl	80011b0 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  GAS_Scheduler_init();
 8000b88:	f7ff fcec 	bl	8000564 <GAS_Scheduler_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  GAS_Scheduler();
 8000b8c:	f7ff fd6c 	bl	8000668 <GAS_Scheduler>
  {
 8000b90:	e7fc      	b.n	8000b8c <main+0x38>

08000b92 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b096      	sub	sp, #88	; 0x58
 8000b96:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b9c:	2228      	movs	r2, #40	; 0x28
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f005 f9b1 	bl	8005f08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba6:	f107 031c 	add.w	r3, r7, #28
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
 8000bb4:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bb6:	463b      	mov	r3, r7
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]
 8000bc4:	615a      	str	r2, [r3, #20]
 8000bc6:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bcc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bd0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000be2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000be4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000be8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f002 fd30 	bl	8003654 <HAL_RCC_OscConfig>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000bfa:	f000 f82b 	bl	8000c54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bfe:	230f      	movs	r3, #15
 8000c00:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c02:	2302      	movs	r3, #2
 8000c04:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c06:	2300      	movs	r3, #0
 8000c08:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c0e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c10:	2300      	movs	r3, #0
 8000c12:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c14:	f107 031c 	add.w	r3, r7, #28
 8000c18:	2102      	movs	r1, #2
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f003 fc22 	bl	8004464 <HAL_RCC_ClockConfig>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000c26:	f000 f815 	bl	8000c54 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC12;
 8000c2a:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 8000c2e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000c30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c34:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000c36:	2300      	movs	r3, #0
 8000c38:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c3a:	463b      	mov	r3, r7
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f003 fdf7 	bl	8004830 <HAL_RCCEx_PeriphCLKConfig>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000c48:	f000 f804 	bl	8000c54 <Error_Handler>
  }
}
 8000c4c:	bf00      	nop
 8000c4e:	3758      	adds	r7, #88	; 0x58
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c58:	b672      	cpsid	i
}
 8000c5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <Error_Handler+0x8>
	...

08000c60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c66:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <HAL_MspInit+0x44>)
 8000c68:	699b      	ldr	r3, [r3, #24]
 8000c6a:	4a0e      	ldr	r2, [pc, #56]	; (8000ca4 <HAL_MspInit+0x44>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	6193      	str	r3, [r2, #24]
 8000c72:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <HAL_MspInit+0x44>)
 8000c74:	699b      	ldr	r3, [r3, #24]
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c7e:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <HAL_MspInit+0x44>)
 8000c80:	69db      	ldr	r3, [r3, #28]
 8000c82:	4a08      	ldr	r2, [pc, #32]	; (8000ca4 <HAL_MspInit+0x44>)
 8000c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c88:	61d3      	str	r3, [r2, #28]
 8000c8a:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <HAL_MspInit+0x44>)
 8000c8c:	69db      	ldr	r3, [r3, #28]
 8000c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c92:	603b      	str	r3, [r7, #0]
 8000c94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c96:	bf00      	nop
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	40021000 	.word	0x40021000

08000ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <NMI_Handler+0x4>

08000cae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb2:	e7fe      	b.n	8000cb2 <HardFault_Handler+0x4>

08000cb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <MemManage_Handler+0x4>

08000cba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cbe:	e7fe      	b.n	8000cbe <BusFault_Handler+0x4>

08000cc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <UsageFault_Handler+0x4>

08000cc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cf4:	f000 fcb0 	bl	8001658 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8000cf8:	f002 f9df 	bl	80030ba <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000d04:	4802      	ldr	r0, [pc, #8]	; (8000d10 <DMA1_Channel1_IRQHandler+0x10>)
 8000d06:	f002 fa25 	bl	8003154 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	2000015c 	.word	0x2000015c

08000d14 <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000d18:	4802      	ldr	r0, [pc, #8]	; (8000d24 <CAN_RX0_IRQHandler+0x10>)
 8000d1a:	f001 fe8e 	bl	8002a3a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	200001a0 	.word	0x200001a0

08000d28 <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000d2c:	4802      	ldr	r0, [pc, #8]	; (8000d38 <CAN_RX1_IRQHandler+0x10>)
 8000d2e:	f001 fe84 	bl	8002a3a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	200001a0 	.word	0x200001a0

08000d3c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <SystemInit+0x20>)
 8000d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d46:	4a05      	ldr	r2, [pc, #20]	; (8000d5c <SystemInit+0x20>)
 8000d48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b096      	sub	sp, #88	; 0x58
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d66:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	605a      	str	r2, [r3, #4]
 8000d70:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]
 8000d7c:	609a      	str	r2, [r3, #8]
 8000d7e:	60da      	str	r2, [r3, #12]
 8000d80:	611a      	str	r2, [r3, #16]
 8000d82:	615a      	str	r2, [r3, #20]
 8000d84:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d86:	1d3b      	adds	r3, r7, #4
 8000d88:	222c      	movs	r2, #44	; 0x2c
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f005 f8bb 	bl	8005f08 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d92:	4b45      	ldr	r3, [pc, #276]	; (8000ea8 <MX_TIM1_Init+0x148>)
 8000d94:	4a45      	ldr	r2, [pc, #276]	; (8000eac <MX_TIM1_Init+0x14c>)
 8000d96:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20-1;
 8000d98:	4b43      	ldr	r3, [pc, #268]	; (8000ea8 <MX_TIM1_Init+0x148>)
 8000d9a:	2213      	movs	r2, #19
 8000d9c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d9e:	4b42      	ldr	r3, [pc, #264]	; (8000ea8 <MX_TIM1_Init+0x148>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 288-1;
 8000da4:	4b40      	ldr	r3, [pc, #256]	; (8000ea8 <MX_TIM1_Init+0x148>)
 8000da6:	f240 121f 	movw	r2, #287	; 0x11f
 8000daa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dac:	4b3e      	ldr	r3, [pc, #248]	; (8000ea8 <MX_TIM1_Init+0x148>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000db2:	4b3d      	ldr	r3, [pc, #244]	; (8000ea8 <MX_TIM1_Init+0x148>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000db8:	4b3b      	ldr	r3, [pc, #236]	; (8000ea8 <MX_TIM1_Init+0x148>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000dbe:	483a      	ldr	r0, [pc, #232]	; (8000ea8 <MX_TIM1_Init+0x148>)
 8000dc0:	f003 fec3 	bl	8004b4a <HAL_TIM_PWM_Init>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000dca:	f7ff ff43 	bl	8000c54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000dda:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000dde:	4619      	mov	r1, r3
 8000de0:	4831      	ldr	r0, [pc, #196]	; (8000ea8 <MX_TIM1_Init+0x148>)
 8000de2:	f004 ff87 	bl	8005cf4 <HAL_TIMEx_MasterConfigSynchronization>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000dec:	f7ff ff32 	bl	8000c54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000df0:	2360      	movs	r3, #96	; 0x60
 8000df2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e00:	2300      	movs	r3, #0
 8000e02:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e04:	2300      	movs	r3, #0
 8000e06:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e0c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e10:	2200      	movs	r2, #0
 8000e12:	4619      	mov	r1, r3
 8000e14:	4824      	ldr	r0, [pc, #144]	; (8000ea8 <MX_TIM1_Init+0x148>)
 8000e16:	f004 fa03 	bl	8005220 <HAL_TIM_PWM_ConfigChannel>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000e20:	f7ff ff18 	bl	8000c54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e24:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e28:	2204      	movs	r2, #4
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	481e      	ldr	r0, [pc, #120]	; (8000ea8 <MX_TIM1_Init+0x148>)
 8000e2e:	f004 f9f7 	bl	8005220 <HAL_TIM_PWM_ConfigChannel>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000e38:	f7ff ff0c 	bl	8000c54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e3c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e40:	2208      	movs	r2, #8
 8000e42:	4619      	mov	r1, r3
 8000e44:	4818      	ldr	r0, [pc, #96]	; (8000ea8 <MX_TIM1_Init+0x148>)
 8000e46:	f004 f9eb 	bl	8005220 <HAL_TIM_PWM_ConfigChannel>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000e50:	f7ff ff00 	bl	8000c54 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e54:	2300      	movs	r3, #0
 8000e56:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e6c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e72:	2300      	movs	r3, #0
 8000e74:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e7a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e80:	2300      	movs	r3, #0
 8000e82:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e84:	1d3b      	adds	r3, r7, #4
 8000e86:	4619      	mov	r1, r3
 8000e88:	4807      	ldr	r0, [pc, #28]	; (8000ea8 <MX_TIM1_Init+0x148>)
 8000e8a:	f004 ffa1 	bl	8005dd0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8000e94:	f7ff fede 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e98:	4803      	ldr	r0, [pc, #12]	; (8000ea8 <MX_TIM1_Init+0x148>)
 8000e9a:	f000 fad1 	bl	8001440 <HAL_TIM_MspPostInit>

}
 8000e9e:	bf00      	nop
 8000ea0:	3758      	adds	r7, #88	; 0x58
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	200002ac 	.word	0x200002ac
 8000eac:	40012c00 	.word	0x40012c00

08000eb0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08a      	sub	sp, #40	; 0x28
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eb6:	f107 031c 	add.w	r3, r7, #28
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ec2:	463b      	mov	r3, r7
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
 8000ece:	611a      	str	r2, [r3, #16]
 8000ed0:	615a      	str	r2, [r3, #20]
 8000ed2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ed4:	4b2d      	ldr	r3, [pc, #180]	; (8000f8c <MX_TIM2_Init+0xdc>)
 8000ed6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eda:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10-1;
 8000edc:	4b2b      	ldr	r3, [pc, #172]	; (8000f8c <MX_TIM2_Init+0xdc>)
 8000ede:	2209      	movs	r2, #9
 8000ee0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee2:	4b2a      	ldr	r3, [pc, #168]	; (8000f8c <MX_TIM2_Init+0xdc>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 288-1;
 8000ee8:	4b28      	ldr	r3, [pc, #160]	; (8000f8c <MX_TIM2_Init+0xdc>)
 8000eea:	f240 121f 	movw	r2, #287	; 0x11f
 8000eee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ef0:	4b26      	ldr	r3, [pc, #152]	; (8000f8c <MX_TIM2_Init+0xdc>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ef6:	4b25      	ldr	r3, [pc, #148]	; (8000f8c <MX_TIM2_Init+0xdc>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000efc:	4823      	ldr	r0, [pc, #140]	; (8000f8c <MX_TIM2_Init+0xdc>)
 8000efe:	f003 fe24 	bl	8004b4a <HAL_TIM_PWM_Init>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000f08:	f7ff fea4 	bl	8000c54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f10:	2300      	movs	r3, #0
 8000f12:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f14:	f107 031c 	add.w	r3, r7, #28
 8000f18:	4619      	mov	r1, r3
 8000f1a:	481c      	ldr	r0, [pc, #112]	; (8000f8c <MX_TIM2_Init+0xdc>)
 8000f1c:	f004 feea 	bl	8005cf4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000f26:	f7ff fe95 	bl	8000c54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f2a:	2360      	movs	r3, #96	; 0x60
 8000f2c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f32:	2300      	movs	r3, #0
 8000f34:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f36:	2300      	movs	r3, #0
 8000f38:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f3a:	463b      	mov	r3, r7
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4812      	ldr	r0, [pc, #72]	; (8000f8c <MX_TIM2_Init+0xdc>)
 8000f42:	f004 f96d 	bl	8005220 <HAL_TIM_PWM_ConfigChannel>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000f4c:	f7ff fe82 	bl	8000c54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f50:	463b      	mov	r3, r7
 8000f52:	2204      	movs	r2, #4
 8000f54:	4619      	mov	r1, r3
 8000f56:	480d      	ldr	r0, [pc, #52]	; (8000f8c <MX_TIM2_Init+0xdc>)
 8000f58:	f004 f962 	bl	8005220 <HAL_TIM_PWM_ConfigChannel>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000f62:	f7ff fe77 	bl	8000c54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f66:	463b      	mov	r3, r7
 8000f68:	2208      	movs	r2, #8
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4807      	ldr	r0, [pc, #28]	; (8000f8c <MX_TIM2_Init+0xdc>)
 8000f6e:	f004 f957 	bl	8005220 <HAL_TIM_PWM_ConfigChannel>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8000f78:	f7ff fe6c 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f7c:	4803      	ldr	r0, [pc, #12]	; (8000f8c <MX_TIM2_Init+0xdc>)
 8000f7e:	f000 fa5f 	bl	8001440 <HAL_TIM_MspPostInit>

}
 8000f82:	bf00      	nop
 8000f84:	3728      	adds	r7, #40	; 0x28
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	200002f8 	.word	0x200002f8

08000f90 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08a      	sub	sp, #40	; 0x28
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f96:	f107 031c 	add.w	r3, r7, #28
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fa2:	463b      	mov	r3, r7
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
 8000fb0:	615a      	str	r2, [r3, #20]
 8000fb2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fb4:	4b2c      	ldr	r3, [pc, #176]	; (8001068 <MX_TIM3_Init+0xd8>)
 8000fb6:	4a2d      	ldr	r2, [pc, #180]	; (800106c <MX_TIM3_Init+0xdc>)
 8000fb8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10-1;
 8000fba:	4b2b      	ldr	r3, [pc, #172]	; (8001068 <MX_TIM3_Init+0xd8>)
 8000fbc:	2209      	movs	r2, #9
 8000fbe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc0:	4b29      	ldr	r3, [pc, #164]	; (8001068 <MX_TIM3_Init+0xd8>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 288-1;
 8000fc6:	4b28      	ldr	r3, [pc, #160]	; (8001068 <MX_TIM3_Init+0xd8>)
 8000fc8:	f240 121f 	movw	r2, #287	; 0x11f
 8000fcc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fce:	4b26      	ldr	r3, [pc, #152]	; (8001068 <MX_TIM3_Init+0xd8>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fd4:	4b24      	ldr	r3, [pc, #144]	; (8001068 <MX_TIM3_Init+0xd8>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000fda:	4823      	ldr	r0, [pc, #140]	; (8001068 <MX_TIM3_Init+0xd8>)
 8000fdc:	f003 fdb5 	bl	8004b4a <HAL_TIM_PWM_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000fe6:	f7ff fe35 	bl	8000c54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ff2:	f107 031c 	add.w	r3, r7, #28
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	481b      	ldr	r0, [pc, #108]	; (8001068 <MX_TIM3_Init+0xd8>)
 8000ffa:	f004 fe7b 	bl	8005cf4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001004:	f7ff fe26 	bl	8000c54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001008:	2360      	movs	r3, #96	; 0x60
 800100a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001010:	2300      	movs	r3, #0
 8001012:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001014:	2300      	movs	r3, #0
 8001016:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001018:	463b      	mov	r3, r7
 800101a:	2200      	movs	r2, #0
 800101c:	4619      	mov	r1, r3
 800101e:	4812      	ldr	r0, [pc, #72]	; (8001068 <MX_TIM3_Init+0xd8>)
 8001020:	f004 f8fe 	bl	8005220 <HAL_TIM_PWM_ConfigChannel>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800102a:	f7ff fe13 	bl	8000c54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800102e:	463b      	mov	r3, r7
 8001030:	2204      	movs	r2, #4
 8001032:	4619      	mov	r1, r3
 8001034:	480c      	ldr	r0, [pc, #48]	; (8001068 <MX_TIM3_Init+0xd8>)
 8001036:	f004 f8f3 	bl	8005220 <HAL_TIM_PWM_ConfigChannel>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001040:	f7ff fe08 	bl	8000c54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001044:	463b      	mov	r3, r7
 8001046:	2208      	movs	r2, #8
 8001048:	4619      	mov	r1, r3
 800104a:	4807      	ldr	r0, [pc, #28]	; (8001068 <MX_TIM3_Init+0xd8>)
 800104c:	f004 f8e8 	bl	8005220 <HAL_TIM_PWM_ConfigChannel>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8001056:	f7ff fdfd 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800105a:	4803      	ldr	r0, [pc, #12]	; (8001068 <MX_TIM3_Init+0xd8>)
 800105c:	f000 f9f0 	bl	8001440 <HAL_TIM_MspPostInit>

}
 8001060:	bf00      	nop
 8001062:	3728      	adds	r7, #40	; 0x28
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000260 	.word	0x20000260
 800106c:	40000400 	.word	0x40000400

08001070 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b088      	sub	sp, #32
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800108e:	4b21      	ldr	r3, [pc, #132]	; (8001114 <MX_TIM15_Init+0xa4>)
 8001090:	4a21      	ldr	r2, [pc, #132]	; (8001118 <MX_TIM15_Init+0xa8>)
 8001092:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 72-1;
 8001094:	4b1f      	ldr	r3, [pc, #124]	; (8001114 <MX_TIM15_Init+0xa4>)
 8001096:	2247      	movs	r2, #71	; 0x47
 8001098:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800109a:	4b1e      	ldr	r3, [pc, #120]	; (8001114 <MX_TIM15_Init+0xa4>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 99;
 80010a0:	4b1c      	ldr	r3, [pc, #112]	; (8001114 <MX_TIM15_Init+0xa4>)
 80010a2:	2263      	movs	r2, #99	; 0x63
 80010a4:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a6:	4b1b      	ldr	r3, [pc, #108]	; (8001114 <MX_TIM15_Init+0xa4>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80010ac:	4b19      	ldr	r3, [pc, #100]	; (8001114 <MX_TIM15_Init+0xa4>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010b2:	4b18      	ldr	r3, [pc, #96]	; (8001114 <MX_TIM15_Init+0xa4>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 80010b8:	4816      	ldr	r0, [pc, #88]	; (8001114 <MX_TIM15_Init+0xa4>)
 80010ba:	f003 fe89 	bl	8004dd0 <HAL_TIM_IC_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 80010c4:	f7ff fdc6 	bl	8000c54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010cc:	2300      	movs	r3, #0
 80010ce:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	4619      	mov	r1, r3
 80010d6:	480f      	ldr	r0, [pc, #60]	; (8001114 <MX_TIM15_Init+0xa4>)
 80010d8:	f004 fe0c 	bl	8005cf4 <HAL_TIMEx_MasterConfigSynchronization>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 80010e2:	f7ff fdb7 	bl	8000c54 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80010e6:	2300      	movs	r3, #0
 80010e8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010ea:	2301      	movs	r3, #1
 80010ec:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	2200      	movs	r2, #0
 80010fa:	4619      	mov	r1, r3
 80010fc:	4805      	ldr	r0, [pc, #20]	; (8001114 <MX_TIM15_Init+0xa4>)
 80010fe:	f003 fff3 	bl	80050e8 <HAL_TIM_IC_ConfigChannel>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 8001108:	f7ff fda4 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800110c:	bf00      	nop
 800110e:	3720      	adds	r7, #32
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	200001c8 	.word	0x200001c8
 8001118:	40014000 	.word	0x40014000

0800111c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8001122:	463b      	mov	r3, r7
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800112e:	4b1e      	ldr	r3, [pc, #120]	; (80011a8 <MX_TIM16_Init+0x8c>)
 8001130:	4a1e      	ldr	r2, [pc, #120]	; (80011ac <MX_TIM16_Init+0x90>)
 8001132:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 72-1;
 8001134:	4b1c      	ldr	r3, [pc, #112]	; (80011a8 <MX_TIM16_Init+0x8c>)
 8001136:	2247      	movs	r2, #71	; 0x47
 8001138:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800113a:	4b1b      	ldr	r3, [pc, #108]	; (80011a8 <MX_TIM16_Init+0x8c>)
 800113c:	2200      	movs	r2, #0
 800113e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 99;
 8001140:	4b19      	ldr	r3, [pc, #100]	; (80011a8 <MX_TIM16_Init+0x8c>)
 8001142:	2263      	movs	r2, #99	; 0x63
 8001144:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001146:	4b18      	ldr	r3, [pc, #96]	; (80011a8 <MX_TIM16_Init+0x8c>)
 8001148:	2200      	movs	r2, #0
 800114a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800114c:	4b16      	ldr	r3, [pc, #88]	; (80011a8 <MX_TIM16_Init+0x8c>)
 800114e:	2200      	movs	r2, #0
 8001150:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001152:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <MX_TIM16_Init+0x8c>)
 8001154:	2200      	movs	r2, #0
 8001156:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001158:	4813      	ldr	r0, [pc, #76]	; (80011a8 <MX_TIM16_Init+0x8c>)
 800115a:	f003 fc9f 	bl	8004a9c <HAL_TIM_Base_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_TIM16_Init+0x4c>
  {
    Error_Handler();
 8001164:	f7ff fd76 	bl	8000c54 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim16) != HAL_OK)
 8001168:	480f      	ldr	r0, [pc, #60]	; (80011a8 <MX_TIM16_Init+0x8c>)
 800116a:	f003 fe31 	bl	8004dd0 <HAL_TIM_IC_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_TIM16_Init+0x5c>
  {
    Error_Handler();
 8001174:	f7ff fd6e 	bl	8000c54 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001178:	2300      	movs	r3, #0
 800117a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800117c:	2301      	movs	r3, #1
 800117e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001180:	2300      	movs	r3, #0
 8001182:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001184:	2300      	movs	r3, #0
 8001186:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001188:	463b      	mov	r3, r7
 800118a:	2200      	movs	r2, #0
 800118c:	4619      	mov	r1, r3
 800118e:	4806      	ldr	r0, [pc, #24]	; (80011a8 <MX_TIM16_Init+0x8c>)
 8001190:	f003 ffaa 	bl	80050e8 <HAL_TIM_IC_ConfigChannel>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_TIM16_Init+0x82>
  {
    Error_Handler();
 800119a:	f7ff fd5b 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800119e:	bf00      	nop
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000344 	.word	0x20000344
 80011ac:	40014400 	.word	0x40014400

080011b0 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 80011b6:	463b      	mov	r3, r7
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80011c2:	4b1e      	ldr	r3, [pc, #120]	; (800123c <MX_TIM17_Init+0x8c>)
 80011c4:	4a1e      	ldr	r2, [pc, #120]	; (8001240 <MX_TIM17_Init+0x90>)
 80011c6:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 72-1;
 80011c8:	4b1c      	ldr	r3, [pc, #112]	; (800123c <MX_TIM17_Init+0x8c>)
 80011ca:	2247      	movs	r2, #71	; 0x47
 80011cc:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ce:	4b1b      	ldr	r3, [pc, #108]	; (800123c <MX_TIM17_Init+0x8c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 99;
 80011d4:	4b19      	ldr	r3, [pc, #100]	; (800123c <MX_TIM17_Init+0x8c>)
 80011d6:	2263      	movs	r2, #99	; 0x63
 80011d8:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011da:	4b18      	ldr	r3, [pc, #96]	; (800123c <MX_TIM17_Init+0x8c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80011e0:	4b16      	ldr	r3, [pc, #88]	; (800123c <MX_TIM17_Init+0x8c>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e6:	4b15      	ldr	r3, [pc, #84]	; (800123c <MX_TIM17_Init+0x8c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80011ec:	4813      	ldr	r0, [pc, #76]	; (800123c <MX_TIM17_Init+0x8c>)
 80011ee:	f003 fc55 	bl	8004a9c <HAL_TIM_Base_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_TIM17_Init+0x4c>
  {
    Error_Handler();
 80011f8:	f7ff fd2c 	bl	8000c54 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim17) != HAL_OK)
 80011fc:	480f      	ldr	r0, [pc, #60]	; (800123c <MX_TIM17_Init+0x8c>)
 80011fe:	f003 fde7 	bl	8004dd0 <HAL_TIM_IC_Init>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM17_Init+0x5c>
  {
    Error_Handler();
 8001208:	f7ff fd24 	bl	8000c54 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800120c:	2300      	movs	r3, #0
 800120e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001210:	2301      	movs	r3, #1
 8001212:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001214:	2300      	movs	r3, #0
 8001216:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim17, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800121c:	463b      	mov	r3, r7
 800121e:	2200      	movs	r2, #0
 8001220:	4619      	mov	r1, r3
 8001222:	4806      	ldr	r0, [pc, #24]	; (800123c <MX_TIM17_Init+0x8c>)
 8001224:	f003 ff60 	bl	80050e8 <HAL_TIM_IC_ConfigChannel>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_TIM17_Init+0x82>
  {
    Error_Handler();
 800122e:	f7ff fd11 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001232:	bf00      	nop
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000214 	.word	0x20000214
 8001240:	40014800 	.word	0x40014800

08001244 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001244:	b480      	push	{r7}
 8001246:	b087      	sub	sp, #28
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a1c      	ldr	r2, [pc, #112]	; (80012c4 <HAL_TIM_PWM_MspInit+0x80>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d10c      	bne.n	8001270 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001256:	4b1c      	ldr	r3, [pc, #112]	; (80012c8 <HAL_TIM_PWM_MspInit+0x84>)
 8001258:	699b      	ldr	r3, [r3, #24]
 800125a:	4a1b      	ldr	r2, [pc, #108]	; (80012c8 <HAL_TIM_PWM_MspInit+0x84>)
 800125c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001260:	6193      	str	r3, [r2, #24]
 8001262:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <HAL_TIM_PWM_MspInit+0x84>)
 8001264:	699b      	ldr	r3, [r3, #24]
 8001266:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800126a:	617b      	str	r3, [r7, #20]
 800126c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800126e:	e022      	b.n	80012b6 <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM2)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001278:	d10c      	bne.n	8001294 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800127a:	4b13      	ldr	r3, [pc, #76]	; (80012c8 <HAL_TIM_PWM_MspInit+0x84>)
 800127c:	69db      	ldr	r3, [r3, #28]
 800127e:	4a12      	ldr	r2, [pc, #72]	; (80012c8 <HAL_TIM_PWM_MspInit+0x84>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	61d3      	str	r3, [r2, #28]
 8001286:	4b10      	ldr	r3, [pc, #64]	; (80012c8 <HAL_TIM_PWM_MspInit+0x84>)
 8001288:	69db      	ldr	r3, [r3, #28]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	613b      	str	r3, [r7, #16]
 8001290:	693b      	ldr	r3, [r7, #16]
}
 8001292:	e010      	b.n	80012b6 <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM3)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a0c      	ldr	r2, [pc, #48]	; (80012cc <HAL_TIM_PWM_MspInit+0x88>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d10b      	bne.n	80012b6 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800129e:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <HAL_TIM_PWM_MspInit+0x84>)
 80012a0:	69db      	ldr	r3, [r3, #28]
 80012a2:	4a09      	ldr	r2, [pc, #36]	; (80012c8 <HAL_TIM_PWM_MspInit+0x84>)
 80012a4:	f043 0302 	orr.w	r3, r3, #2
 80012a8:	61d3      	str	r3, [r2, #28]
 80012aa:	4b07      	ldr	r3, [pc, #28]	; (80012c8 <HAL_TIM_PWM_MspInit+0x84>)
 80012ac:	69db      	ldr	r3, [r3, #28]
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]
}
 80012b6:	bf00      	nop
 80012b8:	371c      	adds	r7, #28
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	40012c00 	.word	0x40012c00
 80012c8:	40021000 	.word	0x40021000
 80012cc:	40000400 	.word	0x40000400

080012d0 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08a      	sub	sp, #40	; 0x28
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM15)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a17      	ldr	r2, [pc, #92]	; (800134c <HAL_TIM_IC_MspInit+0x7c>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d128      	bne.n	8001344 <HAL_TIM_IC_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 80012f2:	4b17      	ldr	r3, [pc, #92]	; (8001350 <HAL_TIM_IC_MspInit+0x80>)
 80012f4:	699b      	ldr	r3, [r3, #24]
 80012f6:	4a16      	ldr	r2, [pc, #88]	; (8001350 <HAL_TIM_IC_MspInit+0x80>)
 80012f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012fc:	6193      	str	r3, [r2, #24]
 80012fe:	4b14      	ldr	r3, [pc, #80]	; (8001350 <HAL_TIM_IC_MspInit+0x80>)
 8001300:	699b      	ldr	r3, [r3, #24]
 8001302:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001306:	613b      	str	r3, [r7, #16]
 8001308:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800130a:	4b11      	ldr	r3, [pc, #68]	; (8001350 <HAL_TIM_IC_MspInit+0x80>)
 800130c:	695b      	ldr	r3, [r3, #20]
 800130e:	4a10      	ldr	r2, [pc, #64]	; (8001350 <HAL_TIM_IC_MspInit+0x80>)
 8001310:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001314:	6153      	str	r3, [r2, #20]
 8001316:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <HAL_TIM_IC_MspInit+0x80>)
 8001318:	695b      	ldr	r3, [r3, #20]
 800131a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
    /**TIM15 GPIO Configuration
    PB14     ------> TIM15_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001322:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001326:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001328:	2302      	movs	r3, #2
 800132a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001330:	2300      	movs	r3, #0
 8001332:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8001334:	2301      	movs	r3, #1
 8001336:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	4619      	mov	r1, r3
 800133e:	4805      	ldr	r0, [pc, #20]	; (8001354 <HAL_TIM_IC_MspInit+0x84>)
 8001340:	f001 ffcc 	bl	80032dc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8001344:	bf00      	nop
 8001346:	3728      	adds	r7, #40	; 0x28
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40014000 	.word	0x40014000
 8001350:	40021000 	.word	0x40021000
 8001354:	48000400 	.word	0x48000400

08001358 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08c      	sub	sp, #48	; 0x30
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001360:	f107 031c 	add.w	r3, r7, #28
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM16)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a2e      	ldr	r2, [pc, #184]	; (8001430 <HAL_TIM_Base_MspInit+0xd8>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d128      	bne.n	80013cc <HAL_TIM_Base_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800137a:	4b2e      	ldr	r3, [pc, #184]	; (8001434 <HAL_TIM_Base_MspInit+0xdc>)
 800137c:	699b      	ldr	r3, [r3, #24]
 800137e:	4a2d      	ldr	r2, [pc, #180]	; (8001434 <HAL_TIM_Base_MspInit+0xdc>)
 8001380:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001384:	6193      	str	r3, [r2, #24]
 8001386:	4b2b      	ldr	r3, [pc, #172]	; (8001434 <HAL_TIM_Base_MspInit+0xdc>)
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138e:	61bb      	str	r3, [r7, #24]
 8001390:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001392:	4b28      	ldr	r3, [pc, #160]	; (8001434 <HAL_TIM_Base_MspInit+0xdc>)
 8001394:	695b      	ldr	r3, [r3, #20]
 8001396:	4a27      	ldr	r2, [pc, #156]	; (8001434 <HAL_TIM_Base_MspInit+0xdc>)
 8001398:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800139c:	6153      	str	r3, [r2, #20]
 800139e:	4b25      	ldr	r3, [pc, #148]	; (8001434 <HAL_TIM_Base_MspInit+0xdc>)
 80013a0:	695b      	ldr	r3, [r3, #20]
 80013a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013a6:	617b      	str	r3, [r7, #20]
 80013a8:	697b      	ldr	r3, [r7, #20]
    /**TIM16 GPIO Configuration
    PB4     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013aa:	2310      	movs	r3, #16
 80013ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ae:	2302      	movs	r3, #2
 80013b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b6:	2300      	movs	r3, #0
 80013b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80013ba:	2301      	movs	r3, #1
 80013bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013be:	f107 031c 	add.w	r3, r7, #28
 80013c2:	4619      	mov	r1, r3
 80013c4:	481c      	ldr	r0, [pc, #112]	; (8001438 <HAL_TIM_Base_MspInit+0xe0>)
 80013c6:	f001 ff89 	bl	80032dc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 80013ca:	e02c      	b.n	8001426 <HAL_TIM_Base_MspInit+0xce>
  else if(tim_baseHandle->Instance==TIM17)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a1a      	ldr	r2, [pc, #104]	; (800143c <HAL_TIM_Base_MspInit+0xe4>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d127      	bne.n	8001426 <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80013d6:	4b17      	ldr	r3, [pc, #92]	; (8001434 <HAL_TIM_Base_MspInit+0xdc>)
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	4a16      	ldr	r2, [pc, #88]	; (8001434 <HAL_TIM_Base_MspInit+0xdc>)
 80013dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013e0:	6193      	str	r3, [r2, #24]
 80013e2:	4b14      	ldr	r3, [pc, #80]	; (8001434 <HAL_TIM_Base_MspInit+0xdc>)
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013ea:	613b      	str	r3, [r7, #16]
 80013ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ee:	4b11      	ldr	r3, [pc, #68]	; (8001434 <HAL_TIM_Base_MspInit+0xdc>)
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	4a10      	ldr	r2, [pc, #64]	; (8001434 <HAL_TIM_Base_MspInit+0xdc>)
 80013f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013f8:	6153      	str	r3, [r2, #20]
 80013fa:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <HAL_TIM_Base_MspInit+0xdc>)
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001406:	2320      	movs	r3, #32
 8001408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140a:	2302      	movs	r3, #2
 800140c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001412:	2300      	movs	r3, #0
 8001414:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 8001416:	230a      	movs	r3, #10
 8001418:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141a:	f107 031c 	add.w	r3, r7, #28
 800141e:	4619      	mov	r1, r3
 8001420:	4805      	ldr	r0, [pc, #20]	; (8001438 <HAL_TIM_Base_MspInit+0xe0>)
 8001422:	f001 ff5b 	bl	80032dc <HAL_GPIO_Init>
}
 8001426:	bf00      	nop
 8001428:	3730      	adds	r7, #48	; 0x30
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40014400 	.word	0x40014400
 8001434:	40021000 	.word	0x40021000
 8001438:	48000400 	.word	0x48000400
 800143c:	40014800 	.word	0x40014800

08001440 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08c      	sub	sp, #48	; 0x30
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001448:	f107 031c 	add.w	r3, r7, #28
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a42      	ldr	r2, [pc, #264]	; (8001568 <HAL_TIM_MspPostInit+0x128>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d11c      	bne.n	800149c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001462:	4b42      	ldr	r3, [pc, #264]	; (800156c <HAL_TIM_MspPostInit+0x12c>)
 8001464:	695b      	ldr	r3, [r3, #20]
 8001466:	4a41      	ldr	r2, [pc, #260]	; (800156c <HAL_TIM_MspPostInit+0x12c>)
 8001468:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800146c:	6153      	str	r3, [r2, #20]
 800146e:	4b3f      	ldr	r3, [pc, #252]	; (800156c <HAL_TIM_MspPostInit+0x12c>)
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001476:	61bb      	str	r3, [r7, #24]
 8001478:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800147a:	2307      	movs	r3, #7
 800147c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147e:	2302      	movs	r3, #2
 8001480:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001486:	2300      	movs	r3, #0
 8001488:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800148a:	2302      	movs	r3, #2
 800148c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800148e:	f107 031c 	add.w	r3, r7, #28
 8001492:	4619      	mov	r1, r3
 8001494:	4836      	ldr	r0, [pc, #216]	; (8001570 <HAL_TIM_MspPostInit+0x130>)
 8001496:	f001 ff21 	bl	80032dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800149a:	e061      	b.n	8001560 <HAL_TIM_MspPostInit+0x120>
  else if(timHandle->Instance==TIM2)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014a4:	d11d      	bne.n	80014e2 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a6:	4b31      	ldr	r3, [pc, #196]	; (800156c <HAL_TIM_MspPostInit+0x12c>)
 80014a8:	695b      	ldr	r3, [r3, #20]
 80014aa:	4a30      	ldr	r2, [pc, #192]	; (800156c <HAL_TIM_MspPostInit+0x12c>)
 80014ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b0:	6153      	str	r3, [r2, #20]
 80014b2:	4b2e      	ldr	r3, [pc, #184]	; (800156c <HAL_TIM_MspPostInit+0x12c>)
 80014b4:	695b      	ldr	r3, [r3, #20]
 80014b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ba:	617b      	str	r3, [r7, #20]
 80014bc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_5;
 80014be:	2326      	movs	r3, #38	; 0x26
 80014c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ca:	2300      	movs	r3, #0
 80014cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014ce:	2301      	movs	r3, #1
 80014d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d2:	f107 031c 	add.w	r3, r7, #28
 80014d6:	4619      	mov	r1, r3
 80014d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014dc:	f001 fefe 	bl	80032dc <HAL_GPIO_Init>
}
 80014e0:	e03e      	b.n	8001560 <HAL_TIM_MspPostInit+0x120>
  else if(timHandle->Instance==TIM3)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a23      	ldr	r2, [pc, #140]	; (8001574 <HAL_TIM_MspPostInit+0x134>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d139      	bne.n	8001560 <HAL_TIM_MspPostInit+0x120>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ec:	4b1f      	ldr	r3, [pc, #124]	; (800156c <HAL_TIM_MspPostInit+0x12c>)
 80014ee:	695b      	ldr	r3, [r3, #20]
 80014f0:	4a1e      	ldr	r2, [pc, #120]	; (800156c <HAL_TIM_MspPostInit+0x12c>)
 80014f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014f6:	6153      	str	r3, [r2, #20]
 80014f8:	4b1c      	ldr	r3, [pc, #112]	; (800156c <HAL_TIM_MspPostInit+0x12c>)
 80014fa:	695b      	ldr	r3, [r3, #20]
 80014fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001500:	613b      	str	r3, [r7, #16]
 8001502:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001504:	4b19      	ldr	r3, [pc, #100]	; (800156c <HAL_TIM_MspPostInit+0x12c>)
 8001506:	695b      	ldr	r3, [r3, #20]
 8001508:	4a18      	ldr	r2, [pc, #96]	; (800156c <HAL_TIM_MspPostInit+0x12c>)
 800150a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800150e:	6153      	str	r3, [r2, #20]
 8001510:	4b16      	ldr	r3, [pc, #88]	; (800156c <HAL_TIM_MspPostInit+0x12c>)
 8001512:	695b      	ldr	r3, [r3, #20]
 8001514:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800151c:	23c0      	movs	r3, #192	; 0xc0
 800151e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001520:	2302      	movs	r3, #2
 8001522:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001528:	2300      	movs	r3, #0
 800152a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800152c:	2302      	movs	r3, #2
 800152e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001530:	f107 031c 	add.w	r3, r7, #28
 8001534:	4619      	mov	r1, r3
 8001536:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800153a:	f001 fecf 	bl	80032dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800153e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001542:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001544:	2302      	movs	r3, #2
 8001546:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154c:	2300      	movs	r3, #0
 800154e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001550:	2302      	movs	r3, #2
 8001552:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001554:	f107 031c 	add.w	r3, r7, #28
 8001558:	4619      	mov	r1, r3
 800155a:	4805      	ldr	r0, [pc, #20]	; (8001570 <HAL_TIM_MspPostInit+0x130>)
 800155c:	f001 febe 	bl	80032dc <HAL_GPIO_Init>
}
 8001560:	bf00      	nop
 8001562:	3730      	adds	r7, #48	; 0x30
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40012c00 	.word	0x40012c00
 800156c:	40021000 	.word	0x40021000
 8001570:	48000800 	.word	0x48000800
 8001574:	40000400 	.word	0x40000400

08001578 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001578:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015b0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800157c:	480d      	ldr	r0, [pc, #52]	; (80015b4 <LoopForever+0x6>)
  ldr r1, =_edata
 800157e:	490e      	ldr	r1, [pc, #56]	; (80015b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001580:	4a0e      	ldr	r2, [pc, #56]	; (80015bc <LoopForever+0xe>)
  movs r3, #0
 8001582:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001584:	e002      	b.n	800158c <LoopCopyDataInit>

08001586 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001586:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001588:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800158a:	3304      	adds	r3, #4

0800158c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800158c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800158e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001590:	d3f9      	bcc.n	8001586 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001592:	4a0b      	ldr	r2, [pc, #44]	; (80015c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001594:	4c0b      	ldr	r4, [pc, #44]	; (80015c4 <LoopForever+0x16>)
  movs r3, #0
 8001596:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001598:	e001      	b.n	800159e <LoopFillZerobss>

0800159a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800159a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800159c:	3204      	adds	r2, #4

0800159e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800159e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015a0:	d3fb      	bcc.n	800159a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015a2:	f7ff fbcb 	bl	8000d3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015a6:	f004 fc8b 	bl	8005ec0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015aa:	f7ff fad3 	bl	8000b54 <main>

080015ae <LoopForever>:

LoopForever:
    b LoopForever
 80015ae:	e7fe      	b.n	80015ae <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015b0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80015b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015b8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80015bc:	08005f68 	.word	0x08005f68
  ldr r2, =_sbss
 80015c0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80015c4:	20000394 	.word	0x20000394

080015c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015c8:	e7fe      	b.n	80015c8 <ADC1_2_IRQHandler>
	...

080015cc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015d0:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <HAL_Init+0x28>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a07      	ldr	r2, [pc, #28]	; (80015f4 <HAL_Init+0x28>)
 80015d6:	f043 0310 	orr.w	r3, r3, #16
 80015da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015dc:	2003      	movs	r0, #3
 80015de:	f001 fd2b 	bl	8003038 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015e2:	2000      	movs	r0, #0
 80015e4:	f000 f808 	bl	80015f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015e8:	f7ff fb3a 	bl	8000c60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40022000 	.word	0x40022000

080015f8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001600:	4b12      	ldr	r3, [pc, #72]	; (800164c <HAL_InitTick+0x54>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	4b12      	ldr	r3, [pc, #72]	; (8001650 <HAL_InitTick+0x58>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	4619      	mov	r1, r3
 800160a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800160e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001612:	fbb2 f3f3 	udiv	r3, r2, r3
 8001616:	4618      	mov	r0, r3
 8001618:	f001 fd43 	bl	80030a2 <HAL_SYSTICK_Config>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e00e      	b.n	8001644 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2b0f      	cmp	r3, #15
 800162a:	d80a      	bhi.n	8001642 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800162c:	2200      	movs	r2, #0
 800162e:	6879      	ldr	r1, [r7, #4]
 8001630:	f04f 30ff 	mov.w	r0, #4294967295
 8001634:	f001 fd0b 	bl	800304e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001638:	4a06      	ldr	r2, [pc, #24]	; (8001654 <HAL_InitTick+0x5c>)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800163e:	2300      	movs	r3, #0
 8001640:	e000      	b.n	8001644 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
}
 8001644:	4618      	mov	r0, r3
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20000008 	.word	0x20000008
 8001650:	20000010 	.word	0x20000010
 8001654:	2000000c 	.word	0x2000000c

08001658 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800165c:	4b06      	ldr	r3, [pc, #24]	; (8001678 <HAL_IncTick+0x20>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	461a      	mov	r2, r3
 8001662:	4b06      	ldr	r3, [pc, #24]	; (800167c <HAL_IncTick+0x24>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4413      	add	r3, r2
 8001668:	4a04      	ldr	r2, [pc, #16]	; (800167c <HAL_IncTick+0x24>)
 800166a:	6013      	str	r3, [r2, #0]
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	20000010 	.word	0x20000010
 800167c:	20000390 	.word	0x20000390

08001680 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  return uwTick;  
 8001684:	4b03      	ldr	r3, [pc, #12]	; (8001694 <HAL_GetTick+0x14>)
 8001686:	681b      	ldr	r3, [r3, #0]
}
 8001688:	4618      	mov	r0, r3
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	20000390 	.word	0x20000390

08001698 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b09a      	sub	sp, #104	; 0x68
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016a0:	2300      	movs	r3, #0
 80016a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80016a6:	2300      	movs	r3, #0
 80016a8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80016aa:	2300      	movs	r3, #0
 80016ac:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d101      	bne.n	80016b8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e172      	b.n	800199e <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	691b      	ldr	r3, [r3, #16]
 80016bc:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	f003 0310 	and.w	r3, r3, #16
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d176      	bne.n	80017b8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d152      	bne.n	8001778 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff f867 	bl	80007c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d13b      	bne.n	8001778 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f000 fce3 	bl	80020cc <ADC_Disable>
 8001706:	4603      	mov	r3, r0
 8001708:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001710:	f003 0310 	and.w	r3, r3, #16
 8001714:	2b00      	cmp	r3, #0
 8001716:	d12f      	bne.n	8001778 <HAL_ADC_Init+0xe0>
 8001718:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800171c:	2b00      	cmp	r3, #0
 800171e:	d12b      	bne.n	8001778 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001724:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001728:	f023 0302 	bic.w	r3, r3, #2
 800172c:	f043 0202 	orr.w	r2, r3, #2
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	689a      	ldr	r2, [r3, #8]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001742:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	689a      	ldr	r2, [r3, #8]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001752:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001754:	4b94      	ldr	r3, [pc, #592]	; (80019a8 <HAL_ADC_Init+0x310>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a94      	ldr	r2, [pc, #592]	; (80019ac <HAL_ADC_Init+0x314>)
 800175a:	fba2 2303 	umull	r2, r3, r2, r3
 800175e:	0c9a      	lsrs	r2, r3, #18
 8001760:	4613      	mov	r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	4413      	add	r3, r2
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800176a:	e002      	b.n	8001772 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	3b01      	subs	r3, #1
 8001770:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d1f9      	bne.n	800176c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d007      	beq.n	8001796 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001790:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001794:	d110      	bne.n	80017b8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	f023 0312 	bic.w	r3, r3, #18
 800179e:	f043 0210 	orr.w	r2, r3, #16
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017aa:	f043 0201 	orr.w	r2, r3, #1
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017bc:	f003 0310 	and.w	r3, r3, #16
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	f040 80df 	bne.w	8001984 <HAL_ADC_Init+0x2ec>
 80017c6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f040 80da 	bne.w	8001984 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f040 80d2 	bne.w	8001984 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80017e8:	f043 0202 	orr.w	r2, r3, #2
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017f0:	4b6f      	ldr	r3, [pc, #444]	; (80019b0 <HAL_ADC_Init+0x318>)
 80017f2:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017fc:	d102      	bne.n	8001804 <HAL_ADC_Init+0x16c>
 80017fe:	4b6d      	ldr	r3, [pc, #436]	; (80019b4 <HAL_ADC_Init+0x31c>)
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	e002      	b.n	800180a <HAL_ADC_Init+0x172>
 8001804:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001808:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f003 0303 	and.w	r3, r3, #3
 8001814:	2b01      	cmp	r3, #1
 8001816:	d108      	bne.n	800182a <HAL_ADC_Init+0x192>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	2b01      	cmp	r3, #1
 8001824:	d101      	bne.n	800182a <HAL_ADC_Init+0x192>
 8001826:	2301      	movs	r3, #1
 8001828:	e000      	b.n	800182c <HAL_ADC_Init+0x194>
 800182a:	2300      	movs	r3, #0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d11c      	bne.n	800186a <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001830:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001832:	2b00      	cmp	r3, #0
 8001834:	d010      	beq.n	8001858 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f003 0303 	and.w	r3, r3, #3
 800183e:	2b01      	cmp	r3, #1
 8001840:	d107      	bne.n	8001852 <HAL_ADC_Init+0x1ba>
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	2b01      	cmp	r3, #1
 800184c:	d101      	bne.n	8001852 <HAL_ADC_Init+0x1ba>
 800184e:	2301      	movs	r3, #1
 8001850:	e000      	b.n	8001854 <HAL_ADC_Init+0x1bc>
 8001852:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001854:	2b00      	cmp	r3, #0
 8001856:	d108      	bne.n	800186a <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001858:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	431a      	orrs	r2, r3
 8001866:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001868:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	7e5b      	ldrb	r3, [r3, #25]
 800186e:	035b      	lsls	r3, r3, #13
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001874:	2a01      	cmp	r2, #1
 8001876:	d002      	beq.n	800187e <HAL_ADC_Init+0x1e6>
 8001878:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800187c:	e000      	b.n	8001880 <HAL_ADC_Init+0x1e8>
 800187e:	2200      	movs	r2, #0
 8001880:	431a      	orrs	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	431a      	orrs	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	4313      	orrs	r3, r2
 800188e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001890:	4313      	orrs	r3, r2
 8001892:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f893 3020 	ldrb.w	r3, [r3, #32]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d11b      	bne.n	80018d6 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	7e5b      	ldrb	r3, [r3, #25]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d109      	bne.n	80018ba <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018aa:	3b01      	subs	r3, #1
 80018ac:	045a      	lsls	r2, r3, #17
 80018ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018b0:	4313      	orrs	r3, r2
 80018b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b6:	663b      	str	r3, [r7, #96]	; 0x60
 80018b8:	e00d      	b.n	80018d6 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80018c2:	f043 0220 	orr.w	r2, r3, #32
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ce:	f043 0201 	orr.w	r2, r3, #1
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d007      	beq.n	80018ee <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e6:	4313      	orrs	r3, r2
 80018e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018ea:	4313      	orrs	r3, r2
 80018ec:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f003 030c 	and.w	r3, r3, #12
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d114      	bne.n	8001926 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	6812      	ldr	r2, [r2, #0]
 8001906:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800190a:	f023 0302 	bic.w	r3, r3, #2
 800190e:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	7e1b      	ldrb	r3, [r3, #24]
 8001914:	039a      	lsls	r2, r3, #14
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	4313      	orrs	r3, r2
 8001920:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001922:	4313      	orrs	r3, r2
 8001924:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	68da      	ldr	r2, [r3, #12]
 800192c:	4b22      	ldr	r3, [pc, #136]	; (80019b8 <HAL_ADC_Init+0x320>)
 800192e:	4013      	ands	r3, r2
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	6812      	ldr	r2, [r2, #0]
 8001934:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001936:	430b      	orrs	r3, r1
 8001938:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	691b      	ldr	r3, [r3, #16]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d10c      	bne.n	800195c <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001948:	f023 010f 	bic.w	r1, r3, #15
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	69db      	ldr	r3, [r3, #28]
 8001950:	1e5a      	subs	r2, r3, #1
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	430a      	orrs	r2, r1
 8001958:	631a      	str	r2, [r3, #48]	; 0x30
 800195a:	e007      	b.n	800196c <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f022 020f 	bic.w	r2, r2, #15
 800196a:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	f023 0303 	bic.w	r3, r3, #3
 800197a:	f043 0201 	orr.w	r2, r3, #1
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	641a      	str	r2, [r3, #64]	; 0x40
 8001982:	e00a      	b.n	800199a <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001988:	f023 0312 	bic.w	r3, r3, #18
 800198c:	f043 0210 	orr.w	r2, r3, #16
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001994:	2301      	movs	r3, #1
 8001996:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800199a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3768      	adds	r7, #104	; 0x68
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000008 	.word	0x20000008
 80019ac:	431bde83 	.word	0x431bde83
 80019b0:	50000300 	.word	0x50000300
 80019b4:	50000100 	.word	0x50000100
 80019b8:	fff0c007 	.word	0xfff0c007

080019bc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80019bc:	b480      	push	{r7}
 80019be:	b09b      	sub	sp, #108	; 0x6c
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019c6:	2300      	movs	r3, #0
 80019c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80019cc:	2300      	movs	r3, #0
 80019ce:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d101      	bne.n	80019de <HAL_ADC_ConfigChannel+0x22>
 80019da:	2302      	movs	r3, #2
 80019dc:	e2a5      	b.n	8001f2a <HAL_ADC_ConfigChannel+0x56e>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2201      	movs	r2, #1
 80019e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f003 0304 	and.w	r3, r3, #4
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f040 8289 	bne.w	8001f08 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2b04      	cmp	r3, #4
 80019fc:	d81c      	bhi.n	8001a38 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685a      	ldr	r2, [r3, #4]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	4413      	add	r3, r2
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	461a      	mov	r2, r3
 8001a12:	231f      	movs	r3, #31
 8001a14:	4093      	lsls	r3, r2
 8001a16:	43db      	mvns	r3, r3
 8001a18:	4019      	ands	r1, r3
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	6818      	ldr	r0, [r3, #0]
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685a      	ldr	r2, [r3, #4]
 8001a22:	4613      	mov	r3, r2
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	4413      	add	r3, r2
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	fa00 f203 	lsl.w	r2, r0, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	430a      	orrs	r2, r1
 8001a34:	631a      	str	r2, [r3, #48]	; 0x30
 8001a36:	e063      	b.n	8001b00 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	2b09      	cmp	r3, #9
 8001a3e:	d81e      	bhi.n	8001a7e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685a      	ldr	r2, [r3, #4]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	4413      	add	r3, r2
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	3b1e      	subs	r3, #30
 8001a54:	221f      	movs	r2, #31
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	4019      	ands	r1, r3
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	6818      	ldr	r0, [r3, #0]
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685a      	ldr	r2, [r3, #4]
 8001a66:	4613      	mov	r3, r2
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	4413      	add	r3, r2
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	3b1e      	subs	r3, #30
 8001a70:	fa00 f203 	lsl.w	r2, r0, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	635a      	str	r2, [r3, #52]	; 0x34
 8001a7c:	e040      	b.n	8001b00 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b0e      	cmp	r3, #14
 8001a84:	d81e      	bhi.n	8001ac4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685a      	ldr	r2, [r3, #4]
 8001a90:	4613      	mov	r3, r2
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	4413      	add	r3, r2
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	3b3c      	subs	r3, #60	; 0x3c
 8001a9a:	221f      	movs	r2, #31
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	4019      	ands	r1, r3
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	6818      	ldr	r0, [r3, #0]
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685a      	ldr	r2, [r3, #4]
 8001aac:	4613      	mov	r3, r2
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	4413      	add	r3, r2
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	3b3c      	subs	r3, #60	; 0x3c
 8001ab6:	fa00 f203 	lsl.w	r2, r0, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	639a      	str	r2, [r3, #56]	; 0x38
 8001ac2:	e01d      	b.n	8001b00 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685a      	ldr	r2, [r3, #4]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	4413      	add	r3, r2
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	3b5a      	subs	r3, #90	; 0x5a
 8001ad8:	221f      	movs	r2, #31
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	4019      	ands	r1, r3
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	6818      	ldr	r0, [r3, #0]
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685a      	ldr	r2, [r3, #4]
 8001aea:	4613      	mov	r3, r2
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	4413      	add	r3, r2
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	3b5a      	subs	r3, #90	; 0x5a
 8001af4:	fa00 f203 	lsl.w	r2, r0, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	430a      	orrs	r2, r1
 8001afe:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 030c 	and.w	r3, r3, #12
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	f040 80e5 	bne.w	8001cda <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2b09      	cmp	r3, #9
 8001b16:	d91c      	bls.n	8001b52 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	6999      	ldr	r1, [r3, #24]
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	4613      	mov	r3, r2
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	4413      	add	r3, r2
 8001b28:	3b1e      	subs	r3, #30
 8001b2a:	2207      	movs	r2, #7
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	43db      	mvns	r3, r3
 8001b32:	4019      	ands	r1, r3
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	6898      	ldr	r0, [r3, #8]
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	4413      	add	r3, r2
 8001b42:	3b1e      	subs	r3, #30
 8001b44:	fa00 f203 	lsl.w	r2, r0, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	619a      	str	r2, [r3, #24]
 8001b50:	e019      	b.n	8001b86 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	6959      	ldr	r1, [r3, #20]
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	4413      	add	r3, r2
 8001b62:	2207      	movs	r2, #7
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	4019      	ands	r1, r3
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	6898      	ldr	r0, [r3, #8]
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	4613      	mov	r3, r2
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	4413      	add	r3, r2
 8001b7a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	430a      	orrs	r2, r1
 8001b84:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	695a      	ldr	r2, [r3, #20]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	08db      	lsrs	r3, r3, #3
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	2b03      	cmp	r3, #3
 8001ba6:	d84f      	bhi.n	8001c48 <HAL_ADC_ConfigChannel+0x28c>
 8001ba8:	a201      	add	r2, pc, #4	; (adr r2, 8001bb0 <HAL_ADC_ConfigChannel+0x1f4>)
 8001baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bae:	bf00      	nop
 8001bb0:	08001bc1 	.word	0x08001bc1
 8001bb4:	08001be3 	.word	0x08001be3
 8001bb8:	08001c05 	.word	0x08001c05
 8001bbc:	08001c27 	.word	0x08001c27
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001bc6:	4b9e      	ldr	r3, [pc, #632]	; (8001e40 <HAL_ADC_ConfigChannel+0x484>)
 8001bc8:	4013      	ands	r3, r2
 8001bca:	683a      	ldr	r2, [r7, #0]
 8001bcc:	6812      	ldr	r2, [r2, #0]
 8001bce:	0691      	lsls	r1, r2, #26
 8001bd0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	431a      	orrs	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001bde:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001be0:	e07e      	b.n	8001ce0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001be8:	4b95      	ldr	r3, [pc, #596]	; (8001e40 <HAL_ADC_ConfigChannel+0x484>)
 8001bea:	4013      	ands	r3, r2
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	6812      	ldr	r2, [r2, #0]
 8001bf0:	0691      	lsls	r1, r2, #26
 8001bf2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	431a      	orrs	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c00:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001c02:	e06d      	b.n	8001ce0 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001c0a:	4b8d      	ldr	r3, [pc, #564]	; (8001e40 <HAL_ADC_ConfigChannel+0x484>)
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	6812      	ldr	r2, [r2, #0]
 8001c12:	0691      	lsls	r1, r2, #26
 8001c14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c16:	430a      	orrs	r2, r1
 8001c18:	431a      	orrs	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c22:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001c24:	e05c      	b.n	8001ce0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001c2c:	4b84      	ldr	r3, [pc, #528]	; (8001e40 <HAL_ADC_ConfigChannel+0x484>)
 8001c2e:	4013      	ands	r3, r2
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	6812      	ldr	r2, [r2, #0]
 8001c34:	0691      	lsls	r1, r2, #26
 8001c36:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c44:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001c46:	e04b      	b.n	8001ce0 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c4e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	069b      	lsls	r3, r3, #26
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d107      	bne.n	8001c6c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001c6a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c72:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	069b      	lsls	r3, r3, #26
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d107      	bne.n	8001c90 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001c8e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	069b      	lsls	r3, r3, #26
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d107      	bne.n	8001cb4 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001cb2:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	069b      	lsls	r3, r3, #26
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d10a      	bne.n	8001cde <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001cd6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001cd8:	e001      	b.n	8001cde <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001cda:	bf00      	nop
 8001cdc:	e000      	b.n	8001ce0 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001cde:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f003 0303 	and.w	r3, r3, #3
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d108      	bne.n	8001d00 <HAL_ADC_ConfigChannel+0x344>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d101      	bne.n	8001d00 <HAL_ADC_ConfigChannel+0x344>
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e000      	b.n	8001d02 <HAL_ADC_ConfigChannel+0x346>
 8001d00:	2300      	movs	r3, #0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f040 810b 	bne.w	8001f1e <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d00f      	beq.n	8001d30 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	43da      	mvns	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	400a      	ands	r2, r1
 8001d2a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001d2e:	e049      	b.n	8001dc4 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	409a      	lsls	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	430a      	orrs	r2, r1
 8001d46:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2b09      	cmp	r3, #9
 8001d50:	d91c      	bls.n	8001d8c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6999      	ldr	r1, [r3, #24]
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	4413      	add	r3, r2
 8001d62:	3b1b      	subs	r3, #27
 8001d64:	2207      	movs	r2, #7
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	4019      	ands	r1, r3
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	6898      	ldr	r0, [r3, #8]
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	4613      	mov	r3, r2
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	4413      	add	r3, r2
 8001d7c:	3b1b      	subs	r3, #27
 8001d7e:	fa00 f203 	lsl.w	r2, r0, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	430a      	orrs	r2, r1
 8001d88:	619a      	str	r2, [r3, #24]
 8001d8a:	e01b      	b.n	8001dc4 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6959      	ldr	r1, [r3, #20]
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	1c5a      	adds	r2, r3, #1
 8001d98:	4613      	mov	r3, r2
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	4413      	add	r3, r2
 8001d9e:	2207      	movs	r2, #7
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	43db      	mvns	r3, r3
 8001da6:	4019      	ands	r1, r3
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	6898      	ldr	r0, [r3, #8]
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	1c5a      	adds	r2, r3, #1
 8001db2:	4613      	mov	r3, r2
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	4413      	add	r3, r2
 8001db8:	fa00 f203 	lsl.w	r2, r0, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dc4:	4b1f      	ldr	r3, [pc, #124]	; (8001e44 <HAL_ADC_ConfigChannel+0x488>)
 8001dc6:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2b10      	cmp	r3, #16
 8001dce:	d105      	bne.n	8001ddc <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001dd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d015      	beq.n	8001e08 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001de0:	2b11      	cmp	r3, #17
 8001de2:	d105      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001de4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d00b      	beq.n	8001e08 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001df4:	2b12      	cmp	r3, #18
 8001df6:	f040 8092 	bne.w	8001f1e <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001dfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f040 808b 	bne.w	8001f1e <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e10:	d102      	bne.n	8001e18 <HAL_ADC_ConfigChannel+0x45c>
 8001e12:	4b0d      	ldr	r3, [pc, #52]	; (8001e48 <HAL_ADC_ConfigChannel+0x48c>)
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	e002      	b.n	8001e1e <HAL_ADC_ConfigChannel+0x462>
 8001e18:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001e1c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 0303 	and.w	r3, r3, #3
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d10f      	bne.n	8001e4c <HAL_ADC_ConfigChannel+0x490>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d108      	bne.n	8001e4c <HAL_ADC_ConfigChannel+0x490>
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e007      	b.n	8001e4e <HAL_ADC_ConfigChannel+0x492>
 8001e3e:	bf00      	nop
 8001e40:	83fff000 	.word	0x83fff000
 8001e44:	50000300 	.word	0x50000300
 8001e48:	50000100 	.word	0x50000100
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d150      	bne.n	8001ef4 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001e52:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d010      	beq.n	8001e7a <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f003 0303 	and.w	r3, r3, #3
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d107      	bne.n	8001e74 <HAL_ADC_ConfigChannel+0x4b8>
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d101      	bne.n	8001e74 <HAL_ADC_ConfigChannel+0x4b8>
 8001e70:	2301      	movs	r3, #1
 8001e72:	e000      	b.n	8001e76 <HAL_ADC_ConfigChannel+0x4ba>
 8001e74:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d13c      	bne.n	8001ef4 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2b10      	cmp	r3, #16
 8001e80:	d11d      	bne.n	8001ebe <HAL_ADC_ConfigChannel+0x502>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e8a:	d118      	bne.n	8001ebe <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001e8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001e94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e96:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e98:	4b27      	ldr	r3, [pc, #156]	; (8001f38 <HAL_ADC_ConfigChannel+0x57c>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a27      	ldr	r2, [pc, #156]	; (8001f3c <HAL_ADC_ConfigChannel+0x580>)
 8001e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea2:	0c9a      	lsrs	r2, r3, #18
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	4413      	add	r3, r2
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001eae:	e002      	b.n	8001eb6 <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d1f9      	bne.n	8001eb0 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ebc:	e02e      	b.n	8001f1c <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2b11      	cmp	r3, #17
 8001ec4:	d10b      	bne.n	8001ede <HAL_ADC_ConfigChannel+0x522>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ece:	d106      	bne.n	8001ede <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001ed0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001ed8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001eda:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001edc:	e01e      	b.n	8001f1c <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2b12      	cmp	r3, #18
 8001ee4:	d11a      	bne.n	8001f1c <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001ee6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001eee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ef0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ef2:	e013      	b.n	8001f1c <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef8:	f043 0220 	orr.w	r2, r3, #32
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001f06:	e00a      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0c:	f043 0220 	orr.w	r2, r3, #32
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001f1a:	e000      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001f1c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001f26:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	376c      	adds	r7, #108	; 0x6c
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	20000008 	.word	0x20000008
 8001f3c:	431bde83 	.word	0x431bde83

08001f40 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b099      	sub	sp, #100	; 0x64
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f58:	d102      	bne.n	8001f60 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001f5a:	4b5a      	ldr	r3, [pc, #360]	; (80020c4 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001f5c:	60bb      	str	r3, [r7, #8]
 8001f5e:	e002      	b.n	8001f66 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8001f60:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001f64:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d101      	bne.n	8001f70 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e0a2      	b.n	80020b6 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d101      	bne.n	8001f7e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	e09b      	b.n	80020b6 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2201      	movs	r2, #1
 8001f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f003 0304 	and.w	r3, r3, #4
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d17f      	bne.n	8002094 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f003 0304 	and.w	r3, r3, #4
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d179      	bne.n	8002094 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fa0:	4b49      	ldr	r3, [pc, #292]	; (80020c8 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8001fa2:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d040      	beq.n	800202e <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001fac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	6859      	ldr	r1, [r3, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001fbe:	035b      	lsls	r3, r3, #13
 8001fc0:	430b      	orrs	r3, r1
 8001fc2:	431a      	orrs	r2, r3
 8001fc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fc6:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f003 0303 	and.w	r3, r3, #3
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d108      	bne.n	8001fe8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d101      	bne.n	8001fe8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e000      	b.n	8001fea <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001fe8:	2300      	movs	r3, #0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d15c      	bne.n	80020a8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f003 0303 	and.w	r3, r3, #3
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d107      	bne.n	800200a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b01      	cmp	r3, #1
 8002004:	d101      	bne.n	800200a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002006:	2301      	movs	r3, #1
 8002008:	e000      	b.n	800200c <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 800200a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800200c:	2b00      	cmp	r3, #0
 800200e:	d14b      	bne.n	80020a8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002010:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002018:	f023 030f 	bic.w	r3, r3, #15
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	6811      	ldr	r1, [r2, #0]
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	6892      	ldr	r2, [r2, #8]
 8002024:	430a      	orrs	r2, r1
 8002026:	431a      	orrs	r2, r3
 8002028:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800202a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800202c:	e03c      	b.n	80020a8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800202e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002036:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002038:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f003 0303 	and.w	r3, r3, #3
 8002044:	2b01      	cmp	r3, #1
 8002046:	d108      	bne.n	800205a <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b01      	cmp	r3, #1
 8002054:	d101      	bne.n	800205a <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002056:	2301      	movs	r3, #1
 8002058:	e000      	b.n	800205c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 800205a:	2300      	movs	r3, #0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d123      	bne.n	80020a8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f003 0303 	and.w	r3, r3, #3
 8002068:	2b01      	cmp	r3, #1
 800206a:	d107      	bne.n	800207c <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	2b01      	cmp	r3, #1
 8002076:	d101      	bne.n	800207c <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002078:	2301      	movs	r3, #1
 800207a:	e000      	b.n	800207e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800207c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800207e:	2b00      	cmp	r3, #0
 8002080:	d112      	bne.n	80020a8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002082:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800208a:	f023 030f 	bic.w	r3, r3, #15
 800208e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002090:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002092:	e009      	b.n	80020a8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002098:	f043 0220 	orr.w	r2, r3, #32
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80020a6:	e000      	b.n	80020aa <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80020a8:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80020b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80020b6:	4618      	mov	r0, r3
 80020b8:	3764      	adds	r7, #100	; 0x64
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	50000100 	.word	0x50000100
 80020c8:	50000300 	.word	0x50000300

080020cc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020d4:	2300      	movs	r3, #0
 80020d6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 0303 	and.w	r3, r3, #3
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d108      	bne.n	80020f8 <ADC_Disable+0x2c>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0301 	and.w	r3, r3, #1
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d101      	bne.n	80020f8 <ADC_Disable+0x2c>
 80020f4:	2301      	movs	r3, #1
 80020f6:	e000      	b.n	80020fa <ADC_Disable+0x2e>
 80020f8:	2300      	movs	r3, #0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d047      	beq.n	800218e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f003 030d 	and.w	r3, r3, #13
 8002108:	2b01      	cmp	r3, #1
 800210a:	d10f      	bne.n	800212c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	689a      	ldr	r2, [r3, #8]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f042 0202 	orr.w	r2, r2, #2
 800211a:	609a      	str	r2, [r3, #8]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2203      	movs	r2, #3
 8002122:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002124:	f7ff faac 	bl	8001680 <HAL_GetTick>
 8002128:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800212a:	e029      	b.n	8002180 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002130:	f043 0210 	orr.w	r2, r3, #16
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213c:	f043 0201 	orr.w	r2, r3, #1
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e023      	b.n	8002190 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002148:	f7ff fa9a 	bl	8001680 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d914      	bls.n	8002180 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f003 0301 	and.w	r3, r3, #1
 8002160:	2b01      	cmp	r3, #1
 8002162:	d10d      	bne.n	8002180 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002168:	f043 0210 	orr.w	r2, r3, #16
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002174:	f043 0201 	orr.w	r2, r3, #1
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e007      	b.n	8002190 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b01      	cmp	r3, #1
 800218c:	d0dc      	beq.n	8002148 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	3710      	adds	r7, #16
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e0ed      	b.n	8002386 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d102      	bne.n	80021bc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f7fe fbba 	bl	8000930 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f042 0201 	orr.w	r2, r2, #1
 80021ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021cc:	f7ff fa58 	bl	8001680 <HAL_GetTick>
 80021d0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80021d2:	e012      	b.n	80021fa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80021d4:	f7ff fa54 	bl	8001680 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b0a      	cmp	r3, #10
 80021e0:	d90b      	bls.n	80021fa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2205      	movs	r2, #5
 80021f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e0c5      	b.n	8002386 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	2b00      	cmp	r3, #0
 8002206:	d0e5      	beq.n	80021d4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f022 0202 	bic.w	r2, r2, #2
 8002216:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002218:	f7ff fa32 	bl	8001680 <HAL_GetTick>
 800221c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800221e:	e012      	b.n	8002246 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002220:	f7ff fa2e 	bl	8001680 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b0a      	cmp	r3, #10
 800222c:	d90b      	bls.n	8002246 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002232:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2205      	movs	r2, #5
 800223e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e09f      	b.n	8002386 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1e5      	bne.n	8002220 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	7e1b      	ldrb	r3, [r3, #24]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d108      	bne.n	800226e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	e007      	b.n	800227e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800227c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	7e5b      	ldrb	r3, [r3, #25]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d108      	bne.n	8002298 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	e007      	b.n	80022a8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	7e9b      	ldrb	r3, [r3, #26]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d108      	bne.n	80022c2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f042 0220 	orr.w	r2, r2, #32
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	e007      	b.n	80022d2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 0220 	bic.w	r2, r2, #32
 80022d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	7edb      	ldrb	r3, [r3, #27]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d108      	bne.n	80022ec <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 0210 	bic.w	r2, r2, #16
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	e007      	b.n	80022fc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f042 0210 	orr.w	r2, r2, #16
 80022fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	7f1b      	ldrb	r3, [r3, #28]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d108      	bne.n	8002316 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f042 0208 	orr.w	r2, r2, #8
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	e007      	b.n	8002326 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f022 0208 	bic.w	r2, r2, #8
 8002324:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	7f5b      	ldrb	r3, [r3, #29]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d108      	bne.n	8002340 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f042 0204 	orr.w	r2, r2, #4
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	e007      	b.n	8002350 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f022 0204 	bic.w	r2, r2, #4
 800234e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	431a      	orrs	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	431a      	orrs	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	695b      	ldr	r3, [r3, #20]
 8002364:	ea42 0103 	orr.w	r1, r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	1e5a      	subs	r2, r3, #1
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	430a      	orrs	r2, r1
 8002374:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800238e:	b480      	push	{r7}
 8002390:	b087      	sub	sp, #28
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
 8002396:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023a4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80023a6:	7cfb      	ldrb	r3, [r7, #19]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d003      	beq.n	80023b4 <HAL_CAN_ConfigFilter+0x26>
 80023ac:	7cfb      	ldrb	r3, [r7, #19]
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	f040 80aa 	bne.w	8002508 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80023ba:	f043 0201 	orr.w	r2, r3, #1
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	695b      	ldr	r3, [r3, #20]
 80023c8:	f003 031f 	and.w	r3, r3, #31
 80023cc:	2201      	movs	r2, #1
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	43db      	mvns	r3, r3
 80023de:	401a      	ands	r2, r3
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d123      	bne.n	8002436 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	43db      	mvns	r3, r3
 80023f8:	401a      	ands	r2, r3
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002410:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	3248      	adds	r2, #72	; 0x48
 8002416:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800242a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800242c:	6979      	ldr	r1, [r7, #20]
 800242e:	3348      	adds	r3, #72	; 0x48
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	440b      	add	r3, r1
 8002434:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	69db      	ldr	r3, [r3, #28]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d122      	bne.n	8002484 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	431a      	orrs	r2, r3
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800245e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	3248      	adds	r2, #72	; 0x48
 8002464:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002478:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800247a:	6979      	ldr	r1, [r7, #20]
 800247c:	3348      	adds	r3, #72	; 0x48
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	440b      	add	r3, r1
 8002482:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d109      	bne.n	80024a0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	43db      	mvns	r3, r3
 8002496:	401a      	ands	r2, r3
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800249e:	e007      	b.n	80024b0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	431a      	orrs	r2, r3
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d109      	bne.n	80024cc <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	43db      	mvns	r3, r3
 80024c2:	401a      	ands	r2, r3
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80024ca:	e007      	b.n	80024dc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	431a      	orrs	r2, r3
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d107      	bne.n	80024f4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	431a      	orrs	r2, r3
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80024fa:	f023 0201 	bic.w	r2, r3, #1
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002504:	2300      	movs	r3, #0
 8002506:	e006      	b.n	8002516 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
  }
}
 8002516:	4618      	mov	r0, r3
 8002518:	371c      	adds	r7, #28
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b084      	sub	sp, #16
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b01      	cmp	r3, #1
 8002534:	d12e      	bne.n	8002594 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2202      	movs	r2, #2
 800253a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f022 0201 	bic.w	r2, r2, #1
 800254c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800254e:	f7ff f897 	bl	8001680 <HAL_GetTick>
 8002552:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002554:	e012      	b.n	800257c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002556:	f7ff f893 	bl	8001680 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b0a      	cmp	r3, #10
 8002562:	d90b      	bls.n	800257c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002568:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2205      	movs	r2, #5
 8002574:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e012      	b.n	80025a2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1e5      	bne.n	8002556 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002590:	2300      	movs	r3, #0
 8002592:	e006      	b.n	80025a2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002598:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
  }
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3710      	adds	r7, #16
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80025aa:	b480      	push	{r7}
 80025ac:	b089      	sub	sp, #36	; 0x24
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	60f8      	str	r0, [r7, #12]
 80025b2:	60b9      	str	r1, [r7, #8]
 80025b4:	607a      	str	r2, [r7, #4]
 80025b6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025be:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80025c8:	7ffb      	ldrb	r3, [r7, #31]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d003      	beq.n	80025d6 <HAL_CAN_AddTxMessage+0x2c>
 80025ce:	7ffb      	ldrb	r3, [r7, #31]
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	f040 80b8 	bne.w	8002746 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10a      	bne.n	80025f6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d105      	bne.n	80025f6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f000 80a0 	beq.w	8002736 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	0e1b      	lsrs	r3, r3, #24
 80025fa:	f003 0303 	and.w	r3, r3, #3
 80025fe:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	2b02      	cmp	r3, #2
 8002604:	d907      	bls.n	8002616 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e09e      	b.n	8002754 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002616:	2201      	movs	r2, #1
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	409a      	lsls	r2, r3
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d10d      	bne.n	8002644 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002632:	68f9      	ldr	r1, [r7, #12]
 8002634:	6809      	ldr	r1, [r1, #0]
 8002636:	431a      	orrs	r2, r3
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	3318      	adds	r3, #24
 800263c:	011b      	lsls	r3, r3, #4
 800263e:	440b      	add	r3, r1
 8002640:	601a      	str	r2, [r3, #0]
 8002642:	e00f      	b.n	8002664 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800264e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002654:	68f9      	ldr	r1, [r7, #12]
 8002656:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002658:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	3318      	adds	r3, #24
 800265e:	011b      	lsls	r3, r3, #4
 8002660:	440b      	add	r3, r1
 8002662:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6819      	ldr	r1, [r3, #0]
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	691a      	ldr	r2, [r3, #16]
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	3318      	adds	r3, #24
 8002670:	011b      	lsls	r3, r3, #4
 8002672:	440b      	add	r3, r1
 8002674:	3304      	adds	r3, #4
 8002676:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	7d1b      	ldrb	r3, [r3, #20]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d111      	bne.n	80026a4 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	3318      	adds	r3, #24
 8002688:	011b      	lsls	r3, r3, #4
 800268a:	4413      	add	r3, r2
 800268c:	3304      	adds	r3, #4
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	6811      	ldr	r1, [r2, #0]
 8002694:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	3318      	adds	r3, #24
 800269c:	011b      	lsls	r3, r3, #4
 800269e:	440b      	add	r3, r1
 80026a0:	3304      	adds	r3, #4
 80026a2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	3307      	adds	r3, #7
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	061a      	lsls	r2, r3, #24
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	3306      	adds	r3, #6
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	041b      	lsls	r3, r3, #16
 80026b4:	431a      	orrs	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	3305      	adds	r3, #5
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	021b      	lsls	r3, r3, #8
 80026be:	4313      	orrs	r3, r2
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	3204      	adds	r2, #4
 80026c4:	7812      	ldrb	r2, [r2, #0]
 80026c6:	4610      	mov	r0, r2
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	6811      	ldr	r1, [r2, #0]
 80026cc:	ea43 0200 	orr.w	r2, r3, r0
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	011b      	lsls	r3, r3, #4
 80026d4:	440b      	add	r3, r1
 80026d6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80026da:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	3303      	adds	r3, #3
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	061a      	lsls	r2, r3, #24
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	3302      	adds	r3, #2
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	041b      	lsls	r3, r3, #16
 80026ec:	431a      	orrs	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	3301      	adds	r3, #1
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	021b      	lsls	r3, r3, #8
 80026f6:	4313      	orrs	r3, r2
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	7812      	ldrb	r2, [r2, #0]
 80026fc:	4610      	mov	r0, r2
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	6811      	ldr	r1, [r2, #0]
 8002702:	ea43 0200 	orr.w	r2, r3, r0
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	011b      	lsls	r3, r3, #4
 800270a:	440b      	add	r3, r1
 800270c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002710:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	3318      	adds	r3, #24
 800271a:	011b      	lsls	r3, r3, #4
 800271c:	4413      	add	r3, r2
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	6811      	ldr	r1, [r2, #0]
 8002724:	f043 0201 	orr.w	r2, r3, #1
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	3318      	adds	r3, #24
 800272c:	011b      	lsls	r3, r3, #4
 800272e:	440b      	add	r3, r1
 8002730:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002732:	2300      	movs	r3, #0
 8002734:	e00e      	b.n	8002754 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e006      	b.n	8002754 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
  }
}
 8002754:	4618      	mov	r0, r3
 8002756:	3724      	adds	r7, #36	; 0x24
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002768:	2300      	movs	r3, #0
 800276a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002772:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002774:	7afb      	ldrb	r3, [r7, #11]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d002      	beq.n	8002780 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800277a:	7afb      	ldrb	r3, [r7, #11]
 800277c:	2b02      	cmp	r3, #2
 800277e:	d11d      	bne.n	80027bc <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d002      	beq.n	8002794 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	3301      	adds	r3, #1
 8002792:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d002      	beq.n	80027a8 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	3301      	adds	r3, #1
 80027a6:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d002      	beq.n	80027bc <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	3301      	adds	r3, #1
 80027ba:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80027bc:	68fb      	ldr	r3, [r7, #12]
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3714      	adds	r7, #20
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr

080027ca <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80027ca:	b480      	push	{r7}
 80027cc:	b087      	sub	sp, #28
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	60f8      	str	r0, [r7, #12]
 80027d2:	60b9      	str	r1, [r7, #8]
 80027d4:	607a      	str	r2, [r7, #4]
 80027d6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027de:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80027e0:	7dfb      	ldrb	r3, [r7, #23]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d003      	beq.n	80027ee <HAL_CAN_GetRxMessage+0x24>
 80027e6:	7dfb      	ldrb	r3, [r7, #23]
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	f040 80f3 	bne.w	80029d4 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d10e      	bne.n	8002812 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	f003 0303 	and.w	r3, r3, #3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d116      	bne.n	8002830 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002806:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e0e7      	b.n	80029e2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	f003 0303 	and.w	r3, r3, #3
 800281c:	2b00      	cmp	r3, #0
 800281e:	d107      	bne.n	8002830 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002824:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e0d8      	b.n	80029e2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	331b      	adds	r3, #27
 8002838:	011b      	lsls	r3, r3, #4
 800283a:	4413      	add	r3, r2
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0204 	and.w	r2, r3, #4
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d10c      	bne.n	8002868 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	331b      	adds	r3, #27
 8002856:	011b      	lsls	r3, r3, #4
 8002858:	4413      	add	r3, r2
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	0d5b      	lsrs	r3, r3, #21
 800285e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	e00b      	b.n	8002880 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	331b      	adds	r3, #27
 8002870:	011b      	lsls	r3, r3, #4
 8002872:	4413      	add	r3, r2
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	08db      	lsrs	r3, r3, #3
 8002878:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	331b      	adds	r3, #27
 8002888:	011b      	lsls	r3, r3, #4
 800288a:	4413      	add	r3, r2
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0202 	and.w	r2, r3, #2
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	331b      	adds	r3, #27
 800289e:	011b      	lsls	r3, r3, #4
 80028a0:	4413      	add	r3, r2
 80028a2:	3304      	adds	r3, #4
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 020f 	and.w	r2, r3, #15
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	331b      	adds	r3, #27
 80028b6:	011b      	lsls	r3, r3, #4
 80028b8:	4413      	add	r3, r2
 80028ba:	3304      	adds	r3, #4
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	0a1b      	lsrs	r3, r3, #8
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	331b      	adds	r3, #27
 80028ce:	011b      	lsls	r3, r3, #4
 80028d0:	4413      	add	r3, r2
 80028d2:	3304      	adds	r3, #4
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	0c1b      	lsrs	r3, r3, #16
 80028d8:	b29a      	uxth	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	011b      	lsls	r3, r3, #4
 80028e6:	4413      	add	r3, r2
 80028e8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	b2da      	uxtb	r2, r3
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	011b      	lsls	r3, r3, #4
 80028fc:	4413      	add	r3, r2
 80028fe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	0a1a      	lsrs	r2, r3, #8
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	3301      	adds	r3, #1
 800290a:	b2d2      	uxtb	r2, r2
 800290c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	011b      	lsls	r3, r3, #4
 8002916:	4413      	add	r3, r2
 8002918:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	0c1a      	lsrs	r2, r3, #16
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	3302      	adds	r3, #2
 8002924:	b2d2      	uxtb	r2, r2
 8002926:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	011b      	lsls	r3, r3, #4
 8002930:	4413      	add	r3, r2
 8002932:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	0e1a      	lsrs	r2, r3, #24
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	3303      	adds	r3, #3
 800293e:	b2d2      	uxtb	r2, r2
 8002940:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	011b      	lsls	r3, r3, #4
 800294a:	4413      	add	r3, r2
 800294c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	3304      	adds	r3, #4
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	011b      	lsls	r3, r3, #4
 8002962:	4413      	add	r3, r2
 8002964:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	0a1a      	lsrs	r2, r3, #8
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	3305      	adds	r3, #5
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	011b      	lsls	r3, r3, #4
 800297c:	4413      	add	r3, r2
 800297e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	0c1a      	lsrs	r2, r3, #16
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	3306      	adds	r3, #6
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	011b      	lsls	r3, r3, #4
 8002996:	4413      	add	r3, r2
 8002998:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	0e1a      	lsrs	r2, r3, #24
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	3307      	adds	r3, #7
 80029a4:	b2d2      	uxtb	r2, r2
 80029a6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d108      	bne.n	80029c0 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68da      	ldr	r2, [r3, #12]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f042 0220 	orr.w	r2, r2, #32
 80029bc:	60da      	str	r2, [r3, #12]
 80029be:	e007      	b.n	80029d0 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	691a      	ldr	r2, [r3, #16]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f042 0220 	orr.w	r2, r2, #32
 80029ce:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80029d0:	2300      	movs	r3, #0
 80029d2:	e006      	b.n	80029e2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
  }
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	371c      	adds	r7, #28
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr

080029ee <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b085      	sub	sp, #20
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
 80029f6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029fe:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002a00:	7bfb      	ldrb	r3, [r7, #15]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d002      	beq.n	8002a0c <HAL_CAN_ActivateNotification+0x1e>
 8002a06:	7bfb      	ldrb	r3, [r7, #15]
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d109      	bne.n	8002a20 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6959      	ldr	r1, [r3, #20]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	e006      	b.n	8002a2e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a24:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
  }
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3714      	adds	r7, #20
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr

08002a3a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b08a      	sub	sp, #40	; 0x28
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002a42:	2300      	movs	r3, #0
 8002a44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	695b      	ldr	r3, [r3, #20]
 8002a4c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002a76:	6a3b      	ldr	r3, [r7, #32]
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d07c      	beq.n	8002b7a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d023      	beq.n	8002ad2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d003      	beq.n	8002aa4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f000 f983 	bl	8002da8 <HAL_CAN_TxMailbox0CompleteCallback>
 8002aa2:	e016      	b.n	8002ad2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	f003 0304 	and.w	r3, r3, #4
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d004      	beq.n	8002ab8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ab6:	e00c      	b.n	8002ad2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	f003 0308 	and.w	r3, r3, #8
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d004      	beq.n	8002acc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8002aca:	e002      	b.n	8002ad2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 f989 	bl	8002de4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d024      	beq.n	8002b26 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ae4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d003      	beq.n	8002af8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f000 f963 	bl	8002dbc <HAL_CAN_TxMailbox1CompleteCallback>
 8002af6:	e016      	b.n	8002b26 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d004      	beq.n	8002b0c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b04:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b08:	627b      	str	r3, [r7, #36]	; 0x24
 8002b0a:	e00c      	b.n	8002b26 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d004      	beq.n	8002b20 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b1e:	e002      	b.n	8002b26 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f000 f969 	bl	8002df8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d024      	beq.n	8002b7a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b38:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d003      	beq.n	8002b4c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 f943 	bl	8002dd0 <HAL_CAN_TxMailbox2CompleteCallback>
 8002b4a:	e016      	b.n	8002b7a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d004      	beq.n	8002b60 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b5e:	e00c      	b.n	8002b7a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d004      	beq.n	8002b74 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b70:	627b      	str	r3, [r7, #36]	; 0x24
 8002b72:	e002      	b.n	8002b7a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 f949 	bl	8002e0c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002b7a:	6a3b      	ldr	r3, [r7, #32]
 8002b7c:	f003 0308 	and.w	r3, r3, #8
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00c      	beq.n	8002b9e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	f003 0310 	and.w	r3, r3, #16
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d007      	beq.n	8002b9e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b94:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2210      	movs	r2, #16
 8002b9c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002b9e:	6a3b      	ldr	r3, [r7, #32]
 8002ba0:	f003 0304 	and.w	r3, r3, #4
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d00b      	beq.n	8002bc0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	f003 0308 	and.w	r3, r3, #8
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d006      	beq.n	8002bc0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2208      	movs	r2, #8
 8002bb8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 f930 	bl	8002e20 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002bc0:	6a3b      	ldr	r3, [r7, #32]
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d009      	beq.n	8002bde <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	f003 0303 	and.w	r3, r3, #3
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d002      	beq.n	8002bde <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f7fd fbbb 	bl	8000354 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002bde:	6a3b      	ldr	r3, [r7, #32]
 8002be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d00c      	beq.n	8002c02 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	f003 0310 	and.w	r3, r3, #16
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d007      	beq.n	8002c02 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bf8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2210      	movs	r2, #16
 8002c00:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002c02:	6a3b      	ldr	r3, [r7, #32]
 8002c04:	f003 0320 	and.w	r3, r3, #32
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00b      	beq.n	8002c24 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	f003 0308 	and.w	r3, r3, #8
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d006      	beq.n	8002c24 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2208      	movs	r2, #8
 8002c1c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 f912 	bl	8002e48 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002c24:	6a3b      	ldr	r3, [r7, #32]
 8002c26:	f003 0310 	and.w	r3, r3, #16
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d009      	beq.n	8002c42 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	f003 0303 	and.w	r3, r3, #3
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d002      	beq.n	8002c42 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 f8f9 	bl	8002e34 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002c42:	6a3b      	ldr	r3, [r7, #32]
 8002c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00b      	beq.n	8002c64 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	f003 0310 	and.w	r3, r3, #16
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d006      	beq.n	8002c64 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2210      	movs	r2, #16
 8002c5c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 f8fc 	bl	8002e5c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002c64:	6a3b      	ldr	r3, [r7, #32]
 8002c66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00b      	beq.n	8002c86 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	f003 0308 	and.w	r3, r3, #8
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d006      	beq.n	8002c86 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2208      	movs	r2, #8
 8002c7e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 f8f5 	bl	8002e70 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002c86:	6a3b      	ldr	r3, [r7, #32]
 8002c88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d07b      	beq.n	8002d88 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	f003 0304 	and.w	r3, r3, #4
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d072      	beq.n	8002d80 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002c9a:	6a3b      	ldr	r3, [r7, #32]
 8002c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d008      	beq.n	8002cb6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb0:	f043 0301 	orr.w	r3, r3, #1
 8002cb4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002cb6:	6a3b      	ldr	r3, [r7, #32]
 8002cb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d008      	beq.n	8002cd2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ccc:	f043 0302 	orr.w	r3, r3, #2
 8002cd0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002cd2:	6a3b      	ldr	r3, [r7, #32]
 8002cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d008      	beq.n	8002cee <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce8:	f043 0304 	orr.w	r3, r3, #4
 8002cec:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002cee:	6a3b      	ldr	r3, [r7, #32]
 8002cf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d043      	beq.n	8002d80 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d03e      	beq.n	8002d80 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d08:	2b60      	cmp	r3, #96	; 0x60
 8002d0a:	d02b      	beq.n	8002d64 <HAL_CAN_IRQHandler+0x32a>
 8002d0c:	2b60      	cmp	r3, #96	; 0x60
 8002d0e:	d82e      	bhi.n	8002d6e <HAL_CAN_IRQHandler+0x334>
 8002d10:	2b50      	cmp	r3, #80	; 0x50
 8002d12:	d022      	beq.n	8002d5a <HAL_CAN_IRQHandler+0x320>
 8002d14:	2b50      	cmp	r3, #80	; 0x50
 8002d16:	d82a      	bhi.n	8002d6e <HAL_CAN_IRQHandler+0x334>
 8002d18:	2b40      	cmp	r3, #64	; 0x40
 8002d1a:	d019      	beq.n	8002d50 <HAL_CAN_IRQHandler+0x316>
 8002d1c:	2b40      	cmp	r3, #64	; 0x40
 8002d1e:	d826      	bhi.n	8002d6e <HAL_CAN_IRQHandler+0x334>
 8002d20:	2b30      	cmp	r3, #48	; 0x30
 8002d22:	d010      	beq.n	8002d46 <HAL_CAN_IRQHandler+0x30c>
 8002d24:	2b30      	cmp	r3, #48	; 0x30
 8002d26:	d822      	bhi.n	8002d6e <HAL_CAN_IRQHandler+0x334>
 8002d28:	2b10      	cmp	r3, #16
 8002d2a:	d002      	beq.n	8002d32 <HAL_CAN_IRQHandler+0x2f8>
 8002d2c:	2b20      	cmp	r3, #32
 8002d2e:	d005      	beq.n	8002d3c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002d30:	e01d      	b.n	8002d6e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d34:	f043 0308 	orr.w	r3, r3, #8
 8002d38:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d3a:	e019      	b.n	8002d70 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3e:	f043 0310 	orr.w	r3, r3, #16
 8002d42:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d44:	e014      	b.n	8002d70 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d48:	f043 0320 	orr.w	r3, r3, #32
 8002d4c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d4e:	e00f      	b.n	8002d70 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d56:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d58:	e00a      	b.n	8002d70 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d60:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d62:	e005      	b.n	8002d70 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d6a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d6c:	e000      	b.n	8002d70 <HAL_CAN_IRQHandler+0x336>
            break;
 8002d6e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	699a      	ldr	r2, [r3, #24]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002d7e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2204      	movs	r2, #4
 8002d86:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d008      	beq.n	8002da0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d94:	431a      	orrs	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 f872 	bl	8002e84 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002da0:	bf00      	nop
 8002da2:	3728      	adds	r7, #40	; 0x28
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <__NVIC_SetPriorityGrouping>:
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f003 0307 	and.w	r3, r3, #7
 8002ea6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ea8:	4b0c      	ldr	r3, [pc, #48]	; (8002edc <__NVIC_SetPriorityGrouping+0x44>)
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eae:	68ba      	ldr	r2, [r7, #8]
 8002eb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ec0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ec8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eca:	4a04      	ldr	r2, [pc, #16]	; (8002edc <__NVIC_SetPriorityGrouping+0x44>)
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	60d3      	str	r3, [r2, #12]
}
 8002ed0:	bf00      	nop
 8002ed2:	3714      	adds	r7, #20
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr
 8002edc:	e000ed00 	.word	0xe000ed00

08002ee0 <__NVIC_GetPriorityGrouping>:
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ee4:	4b04      	ldr	r3, [pc, #16]	; (8002ef8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	0a1b      	lsrs	r3, r3, #8
 8002eea:	f003 0307 	and.w	r3, r3, #7
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr
 8002ef8:	e000ed00 	.word	0xe000ed00

08002efc <__NVIC_EnableIRQ>:
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	4603      	mov	r3, r0
 8002f04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	db0b      	blt.n	8002f26 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f0e:	79fb      	ldrb	r3, [r7, #7]
 8002f10:	f003 021f 	and.w	r2, r3, #31
 8002f14:	4907      	ldr	r1, [pc, #28]	; (8002f34 <__NVIC_EnableIRQ+0x38>)
 8002f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1a:	095b      	lsrs	r3, r3, #5
 8002f1c:	2001      	movs	r0, #1
 8002f1e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002f26:	bf00      	nop
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	e000e100 	.word	0xe000e100

08002f38 <__NVIC_SetPriority>:
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	4603      	mov	r3, r0
 8002f40:	6039      	str	r1, [r7, #0]
 8002f42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	db0a      	blt.n	8002f62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	b2da      	uxtb	r2, r3
 8002f50:	490c      	ldr	r1, [pc, #48]	; (8002f84 <__NVIC_SetPriority+0x4c>)
 8002f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f56:	0112      	lsls	r2, r2, #4
 8002f58:	b2d2      	uxtb	r2, r2
 8002f5a:	440b      	add	r3, r1
 8002f5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002f60:	e00a      	b.n	8002f78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	4908      	ldr	r1, [pc, #32]	; (8002f88 <__NVIC_SetPriority+0x50>)
 8002f68:	79fb      	ldrb	r3, [r7, #7]
 8002f6a:	f003 030f 	and.w	r3, r3, #15
 8002f6e:	3b04      	subs	r3, #4
 8002f70:	0112      	lsls	r2, r2, #4
 8002f72:	b2d2      	uxtb	r2, r2
 8002f74:	440b      	add	r3, r1
 8002f76:	761a      	strb	r2, [r3, #24]
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	e000e100 	.word	0xe000e100
 8002f88:	e000ed00 	.word	0xe000ed00

08002f8c <NVIC_EncodePriority>:
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b089      	sub	sp, #36	; 0x24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f003 0307 	and.w	r3, r3, #7
 8002f9e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	f1c3 0307 	rsb	r3, r3, #7
 8002fa6:	2b04      	cmp	r3, #4
 8002fa8:	bf28      	it	cs
 8002faa:	2304      	movcs	r3, #4
 8002fac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	3304      	adds	r3, #4
 8002fb2:	2b06      	cmp	r3, #6
 8002fb4:	d902      	bls.n	8002fbc <NVIC_EncodePriority+0x30>
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	3b03      	subs	r3, #3
 8002fba:	e000      	b.n	8002fbe <NVIC_EncodePriority+0x32>
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fca:	43da      	mvns	r2, r3
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	401a      	ands	r2, r3
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fd4:	f04f 31ff 	mov.w	r1, #4294967295
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	fa01 f303 	lsl.w	r3, r1, r3
 8002fde:	43d9      	mvns	r1, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fe4:	4313      	orrs	r3, r2
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3724      	adds	r7, #36	; 0x24
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
	...

08002ff4 <SysTick_Config>:
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	3b01      	subs	r3, #1
 8003000:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003004:	d301      	bcc.n	800300a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003006:	2301      	movs	r3, #1
 8003008:	e00f      	b.n	800302a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800300a:	4a0a      	ldr	r2, [pc, #40]	; (8003034 <SysTick_Config+0x40>)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	3b01      	subs	r3, #1
 8003010:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003012:	210f      	movs	r1, #15
 8003014:	f04f 30ff 	mov.w	r0, #4294967295
 8003018:	f7ff ff8e 	bl	8002f38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800301c:	4b05      	ldr	r3, [pc, #20]	; (8003034 <SysTick_Config+0x40>)
 800301e:	2200      	movs	r2, #0
 8003020:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003022:	4b04      	ldr	r3, [pc, #16]	; (8003034 <SysTick_Config+0x40>)
 8003024:	2207      	movs	r2, #7
 8003026:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	e000e010 	.word	0xe000e010

08003038 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f7ff ff29 	bl	8002e98 <__NVIC_SetPriorityGrouping>
}
 8003046:	bf00      	nop
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b086      	sub	sp, #24
 8003052:	af00      	add	r7, sp, #0
 8003054:	4603      	mov	r3, r0
 8003056:	60b9      	str	r1, [r7, #8]
 8003058:	607a      	str	r2, [r7, #4]
 800305a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800305c:	2300      	movs	r3, #0
 800305e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003060:	f7ff ff3e 	bl	8002ee0 <__NVIC_GetPriorityGrouping>
 8003064:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	68b9      	ldr	r1, [r7, #8]
 800306a:	6978      	ldr	r0, [r7, #20]
 800306c:	f7ff ff8e 	bl	8002f8c <NVIC_EncodePriority>
 8003070:	4602      	mov	r2, r0
 8003072:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003076:	4611      	mov	r1, r2
 8003078:	4618      	mov	r0, r3
 800307a:	f7ff ff5d 	bl	8002f38 <__NVIC_SetPriority>
}
 800307e:	bf00      	nop
 8003080:	3718      	adds	r7, #24
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003086:	b580      	push	{r7, lr}
 8003088:	b082      	sub	sp, #8
 800308a:	af00      	add	r7, sp, #0
 800308c:	4603      	mov	r3, r0
 800308e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003094:	4618      	mov	r0, r3
 8003096:	f7ff ff31 	bl	8002efc <__NVIC_EnableIRQ>
}
 800309a:	bf00      	nop
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b082      	sub	sp, #8
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f7ff ffa2 	bl	8002ff4 <SysTick_Config>
 80030b0:	4603      	mov	r3, r0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80030be:	f7fd fa8d 	bl	80005dc <HAL_SYSTICK_Callback>
}
 80030c2:	bf00      	nop
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b084      	sub	sp, #16
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80030ce:	2300      	movs	r3, #0
 80030d0:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e037      	b.n	800314c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2202      	movs	r2, #2
 80030e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80030f2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80030f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003100:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800310c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003118:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	69db      	ldr	r3, [r3, #28]
 800311e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	4313      	orrs	r3, r2
 8003124:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 f8b4 	bl	800329c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}  
 800314c:	4618      	mov	r0, r3
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003170:	2204      	movs	r2, #4
 8003172:	409a      	lsls	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	4013      	ands	r3, r2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d024      	beq.n	80031c6 <HAL_DMA_IRQHandler+0x72>
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	f003 0304 	and.w	r3, r3, #4
 8003182:	2b00      	cmp	r3, #0
 8003184:	d01f      	beq.n	80031c6 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0320 	and.w	r3, r3, #32
 8003190:	2b00      	cmp	r3, #0
 8003192:	d107      	bne.n	80031a4 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f022 0204 	bic.w	r2, r2, #4
 80031a2:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ac:	2104      	movs	r1, #4
 80031ae:	fa01 f202 	lsl.w	r2, r1, r2
 80031b2:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d06a      	beq.n	8003292 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80031c4:	e065      	b.n	8003292 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	2202      	movs	r2, #2
 80031cc:	409a      	lsls	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	4013      	ands	r3, r2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d02c      	beq.n	8003230 <HAL_DMA_IRQHandler+0xdc>
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d027      	beq.n	8003230 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0320 	and.w	r3, r3, #32
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d10b      	bne.n	8003206 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f022 020a 	bic.w	r2, r2, #10
 80031fc:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800320e:	2102      	movs	r1, #2
 8003210:	fa01 f202 	lsl.w	r2, r1, r2
 8003214:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003222:	2b00      	cmp	r3, #0
 8003224:	d035      	beq.n	8003292 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800322e:	e030      	b.n	8003292 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003234:	2208      	movs	r2, #8
 8003236:	409a      	lsls	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	4013      	ands	r3, r2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d028      	beq.n	8003292 <HAL_DMA_IRQHandler+0x13e>
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	f003 0308 	and.w	r3, r3, #8
 8003246:	2b00      	cmp	r3, #0
 8003248:	d023      	beq.n	8003292 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 020e 	bic.w	r2, r2, #14
 8003258:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003262:	2101      	movs	r1, #1
 8003264:	fa01 f202 	lsl.w	r2, r1, r2
 8003268:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2201      	movs	r2, #1
 800326e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003284:	2b00      	cmp	r3, #0
 8003286:	d004      	beq.n	8003292 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	4798      	blx	r3
    }
  }
}  
 8003290:	e7ff      	b.n	8003292 <HAL_DMA_IRQHandler+0x13e>
 8003292:	bf00      	nop
 8003294:	3710      	adds	r7, #16
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
	...

0800329c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	461a      	mov	r2, r3
 80032aa:	4b09      	ldr	r3, [pc, #36]	; (80032d0 <DMA_CalcBaseAndBitshift+0x34>)
 80032ac:	4413      	add	r3, r2
 80032ae:	4a09      	ldr	r2, [pc, #36]	; (80032d4 <DMA_CalcBaseAndBitshift+0x38>)
 80032b0:	fba2 2303 	umull	r2, r3, r2, r3
 80032b4:	091b      	lsrs	r3, r3, #4
 80032b6:	009a      	lsls	r2, r3, #2
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a06      	ldr	r2, [pc, #24]	; (80032d8 <DMA_CalcBaseAndBitshift+0x3c>)
 80032c0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80032c2:	bf00      	nop
 80032c4:	370c      	adds	r7, #12
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	bffdfff8 	.word	0xbffdfff8
 80032d4:	cccccccd 	.word	0xcccccccd
 80032d8:	40020000 	.word	0x40020000

080032dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032dc:	b480      	push	{r7}
 80032de:	b087      	sub	sp, #28
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032e6:	2300      	movs	r3, #0
 80032e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032ea:	e14e      	b.n	800358a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	2101      	movs	r1, #1
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	fa01 f303 	lsl.w	r3, r1, r3
 80032f8:	4013      	ands	r3, r2
 80032fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f000 8140 	beq.w	8003584 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f003 0303 	and.w	r3, r3, #3
 800330c:	2b01      	cmp	r3, #1
 800330e:	d005      	beq.n	800331c <HAL_GPIO_Init+0x40>
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f003 0303 	and.w	r3, r3, #3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d130      	bne.n	800337e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	2203      	movs	r2, #3
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	43db      	mvns	r3, r3
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	4013      	ands	r3, r2
 8003332:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	68da      	ldr	r2, [r3, #12]
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	4313      	orrs	r3, r2
 8003344:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003352:	2201      	movs	r2, #1
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	fa02 f303 	lsl.w	r3, r2, r3
 800335a:	43db      	mvns	r3, r3
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	4013      	ands	r3, r2
 8003360:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	091b      	lsrs	r3, r3, #4
 8003368:	f003 0201 	and.w	r2, r3, #1
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	fa02 f303 	lsl.w	r3, r2, r3
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	4313      	orrs	r3, r2
 8003376:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f003 0303 	and.w	r3, r3, #3
 8003386:	2b03      	cmp	r3, #3
 8003388:	d017      	beq.n	80033ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	2203      	movs	r2, #3
 8003396:	fa02 f303 	lsl.w	r3, r2, r3
 800339a:	43db      	mvns	r3, r3
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	4013      	ands	r3, r2
 80033a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	689a      	ldr	r2, [r3, #8]
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	fa02 f303 	lsl.w	r3, r2, r3
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f003 0303 	and.w	r3, r3, #3
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d123      	bne.n	800340e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	08da      	lsrs	r2, r3, #3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	3208      	adds	r2, #8
 80033ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	f003 0307 	and.w	r3, r3, #7
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	220f      	movs	r2, #15
 80033de:	fa02 f303 	lsl.w	r3, r2, r3
 80033e2:	43db      	mvns	r3, r3
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	4013      	ands	r3, r2
 80033e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	691a      	ldr	r2, [r3, #16]
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	f003 0307 	and.w	r3, r3, #7
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	fa02 f303 	lsl.w	r3, r2, r3
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	08da      	lsrs	r2, r3, #3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	3208      	adds	r2, #8
 8003408:	6939      	ldr	r1, [r7, #16]
 800340a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	2203      	movs	r2, #3
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	43db      	mvns	r3, r3
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	4013      	ands	r3, r2
 8003424:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f003 0203 	and.w	r2, r3, #3
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	fa02 f303 	lsl.w	r3, r2, r3
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	4313      	orrs	r3, r2
 800343a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800344a:	2b00      	cmp	r3, #0
 800344c:	f000 809a 	beq.w	8003584 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003450:	4b55      	ldr	r3, [pc, #340]	; (80035a8 <HAL_GPIO_Init+0x2cc>)
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	4a54      	ldr	r2, [pc, #336]	; (80035a8 <HAL_GPIO_Init+0x2cc>)
 8003456:	f043 0301 	orr.w	r3, r3, #1
 800345a:	6193      	str	r3, [r2, #24]
 800345c:	4b52      	ldr	r3, [pc, #328]	; (80035a8 <HAL_GPIO_Init+0x2cc>)
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	60bb      	str	r3, [r7, #8]
 8003466:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003468:	4a50      	ldr	r2, [pc, #320]	; (80035ac <HAL_GPIO_Init+0x2d0>)
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	089b      	lsrs	r3, r3, #2
 800346e:	3302      	adds	r3, #2
 8003470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003474:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	f003 0303 	and.w	r3, r3, #3
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	220f      	movs	r2, #15
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	43db      	mvns	r3, r3
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	4013      	ands	r3, r2
 800348a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003492:	d013      	beq.n	80034bc <HAL_GPIO_Init+0x1e0>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a46      	ldr	r2, [pc, #280]	; (80035b0 <HAL_GPIO_Init+0x2d4>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d00d      	beq.n	80034b8 <HAL_GPIO_Init+0x1dc>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a45      	ldr	r2, [pc, #276]	; (80035b4 <HAL_GPIO_Init+0x2d8>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d007      	beq.n	80034b4 <HAL_GPIO_Init+0x1d8>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a44      	ldr	r2, [pc, #272]	; (80035b8 <HAL_GPIO_Init+0x2dc>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d101      	bne.n	80034b0 <HAL_GPIO_Init+0x1d4>
 80034ac:	2303      	movs	r3, #3
 80034ae:	e006      	b.n	80034be <HAL_GPIO_Init+0x1e2>
 80034b0:	2305      	movs	r3, #5
 80034b2:	e004      	b.n	80034be <HAL_GPIO_Init+0x1e2>
 80034b4:	2302      	movs	r3, #2
 80034b6:	e002      	b.n	80034be <HAL_GPIO_Init+0x1e2>
 80034b8:	2301      	movs	r3, #1
 80034ba:	e000      	b.n	80034be <HAL_GPIO_Init+0x1e2>
 80034bc:	2300      	movs	r3, #0
 80034be:	697a      	ldr	r2, [r7, #20]
 80034c0:	f002 0203 	and.w	r2, r2, #3
 80034c4:	0092      	lsls	r2, r2, #2
 80034c6:	4093      	lsls	r3, r2
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80034ce:	4937      	ldr	r1, [pc, #220]	; (80035ac <HAL_GPIO_Init+0x2d0>)
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	089b      	lsrs	r3, r3, #2
 80034d4:	3302      	adds	r3, #2
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034dc:	4b37      	ldr	r3, [pc, #220]	; (80035bc <HAL_GPIO_Init+0x2e0>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	43db      	mvns	r3, r3
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	4013      	ands	r3, r2
 80034ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d003      	beq.n	8003500 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80034f8:	693a      	ldr	r2, [r7, #16]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003500:	4a2e      	ldr	r2, [pc, #184]	; (80035bc <HAL_GPIO_Init+0x2e0>)
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003506:	4b2d      	ldr	r3, [pc, #180]	; (80035bc <HAL_GPIO_Init+0x2e0>)
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	43db      	mvns	r3, r3
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	4013      	ands	r3, r2
 8003514:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d003      	beq.n	800352a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	4313      	orrs	r3, r2
 8003528:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800352a:	4a24      	ldr	r2, [pc, #144]	; (80035bc <HAL_GPIO_Init+0x2e0>)
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003530:	4b22      	ldr	r3, [pc, #136]	; (80035bc <HAL_GPIO_Init+0x2e0>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	43db      	mvns	r3, r3
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	4013      	ands	r3, r2
 800353e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d003      	beq.n	8003554 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	4313      	orrs	r3, r2
 8003552:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003554:	4a19      	ldr	r2, [pc, #100]	; (80035bc <HAL_GPIO_Init+0x2e0>)
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800355a:	4b18      	ldr	r3, [pc, #96]	; (80035bc <HAL_GPIO_Init+0x2e0>)
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	43db      	mvns	r3, r3
 8003564:	693a      	ldr	r2, [r7, #16]
 8003566:	4013      	ands	r3, r2
 8003568:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d003      	beq.n	800357e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	4313      	orrs	r3, r2
 800357c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800357e:	4a0f      	ldr	r2, [pc, #60]	; (80035bc <HAL_GPIO_Init+0x2e0>)
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	3301      	adds	r3, #1
 8003588:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	fa22 f303 	lsr.w	r3, r2, r3
 8003594:	2b00      	cmp	r3, #0
 8003596:	f47f aea9 	bne.w	80032ec <HAL_GPIO_Init+0x10>
  }
}
 800359a:	bf00      	nop
 800359c:	bf00      	nop
 800359e:	371c      	adds	r7, #28
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr
 80035a8:	40021000 	.word	0x40021000
 80035ac:	40010000 	.word	0x40010000
 80035b0:	48000400 	.word	0x48000400
 80035b4:	48000800 	.word	0x48000800
 80035b8:	48000c00 	.word	0x48000c00
 80035bc:	40010400 	.word	0x40010400

080035c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	460b      	mov	r3, r1
 80035ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	691a      	ldr	r2, [r3, #16]
 80035d0:	887b      	ldrh	r3, [r7, #2]
 80035d2:	4013      	ands	r3, r2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d002      	beq.n	80035de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035d8:	2301      	movs	r3, #1
 80035da:	73fb      	strb	r3, [r7, #15]
 80035dc:	e001      	b.n	80035e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035de:	2300      	movs	r3, #0
 80035e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3714      	adds	r7, #20
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	460b      	mov	r3, r1
 80035fa:	807b      	strh	r3, [r7, #2]
 80035fc:	4613      	mov	r3, r2
 80035fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003600:	787b      	ldrb	r3, [r7, #1]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d003      	beq.n	800360e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003606:	887a      	ldrh	r2, [r7, #2]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800360c:	e002      	b.n	8003614 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800360e:	887a      	ldrh	r2, [r7, #2]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	460b      	mov	r3, r1
 800362a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	695b      	ldr	r3, [r3, #20]
 8003630:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003632:	887a      	ldrh	r2, [r7, #2]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	4013      	ands	r3, r2
 8003638:	041a      	lsls	r2, r3, #16
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	43d9      	mvns	r1, r3
 800363e:	887b      	ldrh	r3, [r7, #2]
 8003640:	400b      	ands	r3, r1
 8003642:	431a      	orrs	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	619a      	str	r2, [r3, #24]
}
 8003648:	bf00      	nop
 800364a:	3714      	adds	r7, #20
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800365a:	af00      	add	r7, sp, #0
 800365c:	1d3b      	adds	r3, r7, #4
 800365e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003660:	1d3b      	adds	r3, r7, #4
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d102      	bne.n	800366e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	f000 bef4 	b.w	8004456 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800366e:	1d3b      	adds	r3, r7, #4
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	2b00      	cmp	r3, #0
 800367a:	f000 816a 	beq.w	8003952 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800367e:	4bb3      	ldr	r3, [pc, #716]	; (800394c <HAL_RCC_OscConfig+0x2f8>)
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f003 030c 	and.w	r3, r3, #12
 8003686:	2b04      	cmp	r3, #4
 8003688:	d00c      	beq.n	80036a4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800368a:	4bb0      	ldr	r3, [pc, #704]	; (800394c <HAL_RCC_OscConfig+0x2f8>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f003 030c 	and.w	r3, r3, #12
 8003692:	2b08      	cmp	r3, #8
 8003694:	d159      	bne.n	800374a <HAL_RCC_OscConfig+0xf6>
 8003696:	4bad      	ldr	r3, [pc, #692]	; (800394c <HAL_RCC_OscConfig+0x2f8>)
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800369e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036a2:	d152      	bne.n	800374a <HAL_RCC_OscConfig+0xf6>
 80036a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036a8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ac:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80036b0:	fa93 f3a3 	rbit	r3, r3
 80036b4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80036b8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036bc:	fab3 f383 	clz	r3, r3
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	095b      	lsrs	r3, r3, #5
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	f043 0301 	orr.w	r3, r3, #1
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d102      	bne.n	80036d6 <HAL_RCC_OscConfig+0x82>
 80036d0:	4b9e      	ldr	r3, [pc, #632]	; (800394c <HAL_RCC_OscConfig+0x2f8>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	e015      	b.n	8003702 <HAL_RCC_OscConfig+0xae>
 80036d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036da:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036de:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80036e2:	fa93 f3a3 	rbit	r3, r3
 80036e6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80036ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036ee:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80036f2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80036f6:	fa93 f3a3 	rbit	r3, r3
 80036fa:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80036fe:	4b93      	ldr	r3, [pc, #588]	; (800394c <HAL_RCC_OscConfig+0x2f8>)
 8003700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003702:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003706:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800370a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800370e:	fa92 f2a2 	rbit	r2, r2
 8003712:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003716:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800371a:	fab2 f282 	clz	r2, r2
 800371e:	b2d2      	uxtb	r2, r2
 8003720:	f042 0220 	orr.w	r2, r2, #32
 8003724:	b2d2      	uxtb	r2, r2
 8003726:	f002 021f 	and.w	r2, r2, #31
 800372a:	2101      	movs	r1, #1
 800372c:	fa01 f202 	lsl.w	r2, r1, r2
 8003730:	4013      	ands	r3, r2
 8003732:	2b00      	cmp	r3, #0
 8003734:	f000 810c 	beq.w	8003950 <HAL_RCC_OscConfig+0x2fc>
 8003738:	1d3b      	adds	r3, r7, #4
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	f040 8106 	bne.w	8003950 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	f000 be86 	b.w	8004456 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800374a:	1d3b      	adds	r3, r7, #4
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003754:	d106      	bne.n	8003764 <HAL_RCC_OscConfig+0x110>
 8003756:	4b7d      	ldr	r3, [pc, #500]	; (800394c <HAL_RCC_OscConfig+0x2f8>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a7c      	ldr	r2, [pc, #496]	; (800394c <HAL_RCC_OscConfig+0x2f8>)
 800375c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003760:	6013      	str	r3, [r2, #0]
 8003762:	e030      	b.n	80037c6 <HAL_RCC_OscConfig+0x172>
 8003764:	1d3b      	adds	r3, r7, #4
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d10c      	bne.n	8003788 <HAL_RCC_OscConfig+0x134>
 800376e:	4b77      	ldr	r3, [pc, #476]	; (800394c <HAL_RCC_OscConfig+0x2f8>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a76      	ldr	r2, [pc, #472]	; (800394c <HAL_RCC_OscConfig+0x2f8>)
 8003774:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003778:	6013      	str	r3, [r2, #0]
 800377a:	4b74      	ldr	r3, [pc, #464]	; (800394c <HAL_RCC_OscConfig+0x2f8>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a73      	ldr	r2, [pc, #460]	; (800394c <HAL_RCC_OscConfig+0x2f8>)
 8003780:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003784:	6013      	str	r3, [r2, #0]
 8003786:	e01e      	b.n	80037c6 <HAL_RCC_OscConfig+0x172>
 8003788:	1d3b      	adds	r3, r7, #4
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003792:	d10c      	bne.n	80037ae <HAL_RCC_OscConfig+0x15a>
 8003794:	4b6d      	ldr	r3, [pc, #436]	; (800394c <HAL_RCC_OscConfig+0x2f8>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a6c      	ldr	r2, [pc, #432]	; (800394c <HAL_RCC_OscConfig+0x2f8>)
 800379a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800379e:	6013      	str	r3, [r2, #0]
 80037a0:	4b6a      	ldr	r3, [pc, #424]	; (800394c <HAL_RCC_OscConfig+0x2f8>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a69      	ldr	r2, [pc, #420]	; (800394c <HAL_RCC_OscConfig+0x2f8>)
 80037a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037aa:	6013      	str	r3, [r2, #0]
 80037ac:	e00b      	b.n	80037c6 <HAL_RCC_OscConfig+0x172>
 80037ae:	4b67      	ldr	r3, [pc, #412]	; (800394c <HAL_RCC_OscConfig+0x2f8>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a66      	ldr	r2, [pc, #408]	; (800394c <HAL_RCC_OscConfig+0x2f8>)
 80037b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037b8:	6013      	str	r3, [r2, #0]
 80037ba:	4b64      	ldr	r3, [pc, #400]	; (800394c <HAL_RCC_OscConfig+0x2f8>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a63      	ldr	r2, [pc, #396]	; (800394c <HAL_RCC_OscConfig+0x2f8>)
 80037c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037c4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80037c6:	4b61      	ldr	r3, [pc, #388]	; (800394c <HAL_RCC_OscConfig+0x2f8>)
 80037c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ca:	f023 020f 	bic.w	r2, r3, #15
 80037ce:	1d3b      	adds	r3, r7, #4
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	495d      	ldr	r1, [pc, #372]	; (800394c <HAL_RCC_OscConfig+0x2f8>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037da:	1d3b      	adds	r3, r7, #4
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d059      	beq.n	8003898 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e4:	f7fd ff4c 	bl	8001680 <HAL_GetTick>
 80037e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ec:	e00a      	b.n	8003804 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037ee:	f7fd ff47 	bl	8001680 <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b64      	cmp	r3, #100	; 0x64
 80037fc:	d902      	bls.n	8003804 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	f000 be29 	b.w	8004456 <HAL_RCC_OscConfig+0xe02>
 8003804:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003808:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003810:	fa93 f3a3 	rbit	r3, r3
 8003814:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003818:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800381c:	fab3 f383 	clz	r3, r3
 8003820:	b2db      	uxtb	r3, r3
 8003822:	095b      	lsrs	r3, r3, #5
 8003824:	b2db      	uxtb	r3, r3
 8003826:	f043 0301 	orr.w	r3, r3, #1
 800382a:	b2db      	uxtb	r3, r3
 800382c:	2b01      	cmp	r3, #1
 800382e:	d102      	bne.n	8003836 <HAL_RCC_OscConfig+0x1e2>
 8003830:	4b46      	ldr	r3, [pc, #280]	; (800394c <HAL_RCC_OscConfig+0x2f8>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	e015      	b.n	8003862 <HAL_RCC_OscConfig+0x20e>
 8003836:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800383a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003842:	fa93 f3a3 	rbit	r3, r3
 8003846:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800384a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800384e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003852:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003856:	fa93 f3a3 	rbit	r3, r3
 800385a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800385e:	4b3b      	ldr	r3, [pc, #236]	; (800394c <HAL_RCC_OscConfig+0x2f8>)
 8003860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003862:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003866:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800386a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800386e:	fa92 f2a2 	rbit	r2, r2
 8003872:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003876:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800387a:	fab2 f282 	clz	r2, r2
 800387e:	b2d2      	uxtb	r2, r2
 8003880:	f042 0220 	orr.w	r2, r2, #32
 8003884:	b2d2      	uxtb	r2, r2
 8003886:	f002 021f 	and.w	r2, r2, #31
 800388a:	2101      	movs	r1, #1
 800388c:	fa01 f202 	lsl.w	r2, r1, r2
 8003890:	4013      	ands	r3, r2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d0ab      	beq.n	80037ee <HAL_RCC_OscConfig+0x19a>
 8003896:	e05c      	b.n	8003952 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003898:	f7fd fef2 	bl	8001680 <HAL_GetTick>
 800389c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038a0:	e00a      	b.n	80038b8 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038a2:	f7fd feed 	bl	8001680 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b64      	cmp	r3, #100	; 0x64
 80038b0:	d902      	bls.n	80038b8 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	f000 bdcf 	b.w	8004456 <HAL_RCC_OscConfig+0xe02>
 80038b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038bc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80038c4:	fa93 f3a3 	rbit	r3, r3
 80038c8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80038cc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038d0:	fab3 f383 	clz	r3, r3
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	095b      	lsrs	r3, r3, #5
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	f043 0301 	orr.w	r3, r3, #1
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d102      	bne.n	80038ea <HAL_RCC_OscConfig+0x296>
 80038e4:	4b19      	ldr	r3, [pc, #100]	; (800394c <HAL_RCC_OscConfig+0x2f8>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	e015      	b.n	8003916 <HAL_RCC_OscConfig+0x2c2>
 80038ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038ee:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80038f6:	fa93 f3a3 	rbit	r3, r3
 80038fa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80038fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003902:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003906:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800390a:	fa93 f3a3 	rbit	r3, r3
 800390e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003912:	4b0e      	ldr	r3, [pc, #56]	; (800394c <HAL_RCC_OscConfig+0x2f8>)
 8003914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003916:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800391a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800391e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003922:	fa92 f2a2 	rbit	r2, r2
 8003926:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800392a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800392e:	fab2 f282 	clz	r2, r2
 8003932:	b2d2      	uxtb	r2, r2
 8003934:	f042 0220 	orr.w	r2, r2, #32
 8003938:	b2d2      	uxtb	r2, r2
 800393a:	f002 021f 	and.w	r2, r2, #31
 800393e:	2101      	movs	r1, #1
 8003940:	fa01 f202 	lsl.w	r2, r1, r2
 8003944:	4013      	ands	r3, r2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1ab      	bne.n	80038a2 <HAL_RCC_OscConfig+0x24e>
 800394a:	e002      	b.n	8003952 <HAL_RCC_OscConfig+0x2fe>
 800394c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003950:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003952:	1d3b      	adds	r3, r7, #4
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	2b00      	cmp	r3, #0
 800395e:	f000 816f 	beq.w	8003c40 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003962:	4bd0      	ldr	r3, [pc, #832]	; (8003ca4 <HAL_RCC_OscConfig+0x650>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f003 030c 	and.w	r3, r3, #12
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00b      	beq.n	8003986 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800396e:	4bcd      	ldr	r3, [pc, #820]	; (8003ca4 <HAL_RCC_OscConfig+0x650>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f003 030c 	and.w	r3, r3, #12
 8003976:	2b08      	cmp	r3, #8
 8003978:	d16c      	bne.n	8003a54 <HAL_RCC_OscConfig+0x400>
 800397a:	4bca      	ldr	r3, [pc, #808]	; (8003ca4 <HAL_RCC_OscConfig+0x650>)
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d166      	bne.n	8003a54 <HAL_RCC_OscConfig+0x400>
 8003986:	2302      	movs	r3, #2
 8003988:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003990:	fa93 f3a3 	rbit	r3, r3
 8003994:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003998:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800399c:	fab3 f383 	clz	r3, r3
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	095b      	lsrs	r3, r3, #5
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	f043 0301 	orr.w	r3, r3, #1
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d102      	bne.n	80039b6 <HAL_RCC_OscConfig+0x362>
 80039b0:	4bbc      	ldr	r3, [pc, #752]	; (8003ca4 <HAL_RCC_OscConfig+0x650>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	e013      	b.n	80039de <HAL_RCC_OscConfig+0x38a>
 80039b6:	2302      	movs	r3, #2
 80039b8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039bc:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80039c0:	fa93 f3a3 	rbit	r3, r3
 80039c4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80039c8:	2302      	movs	r3, #2
 80039ca:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80039ce:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80039d2:	fa93 f3a3 	rbit	r3, r3
 80039d6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80039da:	4bb2      	ldr	r3, [pc, #712]	; (8003ca4 <HAL_RCC_OscConfig+0x650>)
 80039dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039de:	2202      	movs	r2, #2
 80039e0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80039e4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80039e8:	fa92 f2a2 	rbit	r2, r2
 80039ec:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80039f0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80039f4:	fab2 f282 	clz	r2, r2
 80039f8:	b2d2      	uxtb	r2, r2
 80039fa:	f042 0220 	orr.w	r2, r2, #32
 80039fe:	b2d2      	uxtb	r2, r2
 8003a00:	f002 021f 	and.w	r2, r2, #31
 8003a04:	2101      	movs	r1, #1
 8003a06:	fa01 f202 	lsl.w	r2, r1, r2
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d007      	beq.n	8003a20 <HAL_RCC_OscConfig+0x3cc>
 8003a10:	1d3b      	adds	r3, r7, #4
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d002      	beq.n	8003a20 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	f000 bd1b 	b.w	8004456 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a20:	4ba0      	ldr	r3, [pc, #640]	; (8003ca4 <HAL_RCC_OscConfig+0x650>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a28:	1d3b      	adds	r3, r7, #4
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	21f8      	movs	r1, #248	; 0xf8
 8003a30:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a34:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003a38:	fa91 f1a1 	rbit	r1, r1
 8003a3c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003a40:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003a44:	fab1 f181 	clz	r1, r1
 8003a48:	b2c9      	uxtb	r1, r1
 8003a4a:	408b      	lsls	r3, r1
 8003a4c:	4995      	ldr	r1, [pc, #596]	; (8003ca4 <HAL_RCC_OscConfig+0x650>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a52:	e0f5      	b.n	8003c40 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a54:	1d3b      	adds	r3, r7, #4
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f000 8085 	beq.w	8003b6a <HAL_RCC_OscConfig+0x516>
 8003a60:	2301      	movs	r3, #1
 8003a62:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a66:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003a6a:	fa93 f3a3 	rbit	r3, r3
 8003a6e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003a72:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a76:	fab3 f383 	clz	r3, r3
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a80:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	461a      	mov	r2, r3
 8003a88:	2301      	movs	r3, #1
 8003a8a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a8c:	f7fd fdf8 	bl	8001680 <HAL_GetTick>
 8003a90:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a94:	e00a      	b.n	8003aac <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a96:	f7fd fdf3 	bl	8001680 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d902      	bls.n	8003aac <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	f000 bcd5 	b.w	8004456 <HAL_RCC_OscConfig+0xe02>
 8003aac:	2302      	movs	r3, #2
 8003aae:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003ab6:	fa93 f3a3 	rbit	r3, r3
 8003aba:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003abe:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ac2:	fab3 f383 	clz	r3, r3
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	095b      	lsrs	r3, r3, #5
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	f043 0301 	orr.w	r3, r3, #1
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d102      	bne.n	8003adc <HAL_RCC_OscConfig+0x488>
 8003ad6:	4b73      	ldr	r3, [pc, #460]	; (8003ca4 <HAL_RCC_OscConfig+0x650>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	e013      	b.n	8003b04 <HAL_RCC_OscConfig+0x4b0>
 8003adc:	2302      	movs	r3, #2
 8003ade:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003ae6:	fa93 f3a3 	rbit	r3, r3
 8003aea:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003aee:	2302      	movs	r3, #2
 8003af0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003af4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003af8:	fa93 f3a3 	rbit	r3, r3
 8003afc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003b00:	4b68      	ldr	r3, [pc, #416]	; (8003ca4 <HAL_RCC_OscConfig+0x650>)
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	2202      	movs	r2, #2
 8003b06:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003b0a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003b0e:	fa92 f2a2 	rbit	r2, r2
 8003b12:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003b16:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003b1a:	fab2 f282 	clz	r2, r2
 8003b1e:	b2d2      	uxtb	r2, r2
 8003b20:	f042 0220 	orr.w	r2, r2, #32
 8003b24:	b2d2      	uxtb	r2, r2
 8003b26:	f002 021f 	and.w	r2, r2, #31
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b30:	4013      	ands	r3, r2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d0af      	beq.n	8003a96 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b36:	4b5b      	ldr	r3, [pc, #364]	; (8003ca4 <HAL_RCC_OscConfig+0x650>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b3e:	1d3b      	adds	r3, r7, #4
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	695b      	ldr	r3, [r3, #20]
 8003b44:	21f8      	movs	r1, #248	; 0xf8
 8003b46:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b4a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003b4e:	fa91 f1a1 	rbit	r1, r1
 8003b52:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003b56:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003b5a:	fab1 f181 	clz	r1, r1
 8003b5e:	b2c9      	uxtb	r1, r1
 8003b60:	408b      	lsls	r3, r1
 8003b62:	4950      	ldr	r1, [pc, #320]	; (8003ca4 <HAL_RCC_OscConfig+0x650>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	600b      	str	r3, [r1, #0]
 8003b68:	e06a      	b.n	8003c40 <HAL_RCC_OscConfig+0x5ec>
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b70:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003b74:	fa93 f3a3 	rbit	r3, r3
 8003b78:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003b7c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b80:	fab3 f383 	clz	r3, r3
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003b8a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	461a      	mov	r2, r3
 8003b92:	2300      	movs	r3, #0
 8003b94:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b96:	f7fd fd73 	bl	8001680 <HAL_GetTick>
 8003b9a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b9e:	e00a      	b.n	8003bb6 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ba0:	f7fd fd6e 	bl	8001680 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d902      	bls.n	8003bb6 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	f000 bc50 	b.w	8004456 <HAL_RCC_OscConfig+0xe02>
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bbc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003bc0:	fa93 f3a3 	rbit	r3, r3
 8003bc4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003bc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bcc:	fab3 f383 	clz	r3, r3
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	095b      	lsrs	r3, r3, #5
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	f043 0301 	orr.w	r3, r3, #1
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d102      	bne.n	8003be6 <HAL_RCC_OscConfig+0x592>
 8003be0:	4b30      	ldr	r3, [pc, #192]	; (8003ca4 <HAL_RCC_OscConfig+0x650>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	e013      	b.n	8003c0e <HAL_RCC_OscConfig+0x5ba>
 8003be6:	2302      	movs	r3, #2
 8003be8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003bf0:	fa93 f3a3 	rbit	r3, r3
 8003bf4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003bfe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003c02:	fa93 f3a3 	rbit	r3, r3
 8003c06:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003c0a:	4b26      	ldr	r3, [pc, #152]	; (8003ca4 <HAL_RCC_OscConfig+0x650>)
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0e:	2202      	movs	r2, #2
 8003c10:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003c14:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003c18:	fa92 f2a2 	rbit	r2, r2
 8003c1c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003c20:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003c24:	fab2 f282 	clz	r2, r2
 8003c28:	b2d2      	uxtb	r2, r2
 8003c2a:	f042 0220 	orr.w	r2, r2, #32
 8003c2e:	b2d2      	uxtb	r2, r2
 8003c30:	f002 021f 	and.w	r2, r2, #31
 8003c34:	2101      	movs	r1, #1
 8003c36:	fa01 f202 	lsl.w	r2, r1, r2
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1af      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c40:	1d3b      	adds	r3, r7, #4
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0308 	and.w	r3, r3, #8
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f000 80da 	beq.w	8003e04 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c50:	1d3b      	adds	r3, r7, #4
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d069      	beq.n	8003d2e <HAL_RCC_OscConfig+0x6da>
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c60:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003c64:	fa93 f3a3 	rbit	r3, r3
 8003c68:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003c6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c70:	fab3 f383 	clz	r3, r3
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	461a      	mov	r2, r3
 8003c78:	4b0b      	ldr	r3, [pc, #44]	; (8003ca8 <HAL_RCC_OscConfig+0x654>)
 8003c7a:	4413      	add	r3, r2
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	461a      	mov	r2, r3
 8003c80:	2301      	movs	r3, #1
 8003c82:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c84:	f7fd fcfc 	bl	8001680 <HAL_GetTick>
 8003c88:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c8c:	e00e      	b.n	8003cac <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c8e:	f7fd fcf7 	bl	8001680 <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d906      	bls.n	8003cac <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e3d9      	b.n	8004456 <HAL_RCC_OscConfig+0xe02>
 8003ca2:	bf00      	nop
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	10908120 	.word	0x10908120
 8003cac:	2302      	movs	r3, #2
 8003cae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003cb6:	fa93 f3a3 	rbit	r3, r3
 8003cba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003cbe:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	601a      	str	r2, [r3, #0]
 8003cc6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	fa93 f2a3 	rbit	r2, r3
 8003cd0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003cd4:	601a      	str	r2, [r3, #0]
 8003cd6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003cda:	2202      	movs	r2, #2
 8003cdc:	601a      	str	r2, [r3, #0]
 8003cde:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	fa93 f2a3 	rbit	r2, r3
 8003ce8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003cec:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cee:	4ba5      	ldr	r3, [pc, #660]	; (8003f84 <HAL_RCC_OscConfig+0x930>)
 8003cf0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cf2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003cf6:	2102      	movs	r1, #2
 8003cf8:	6019      	str	r1, [r3, #0]
 8003cfa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	fa93 f1a3 	rbit	r1, r3
 8003d04:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003d08:	6019      	str	r1, [r3, #0]
  return result;
 8003d0a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	fab3 f383 	clz	r3, r3
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	f003 031f 	and.w	r3, r3, #31
 8003d20:	2101      	movs	r1, #1
 8003d22:	fa01 f303 	lsl.w	r3, r1, r3
 8003d26:	4013      	ands	r3, r2
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d0b0      	beq.n	8003c8e <HAL_RCC_OscConfig+0x63a>
 8003d2c:	e06a      	b.n	8003e04 <HAL_RCC_OscConfig+0x7b0>
 8003d2e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003d32:	2201      	movs	r2, #1
 8003d34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d36:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	fa93 f2a3 	rbit	r2, r3
 8003d40:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003d44:	601a      	str	r2, [r3, #0]
  return result;
 8003d46:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003d4a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d4c:	fab3 f383 	clz	r3, r3
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	461a      	mov	r2, r3
 8003d54:	4b8c      	ldr	r3, [pc, #560]	; (8003f88 <HAL_RCC_OscConfig+0x934>)
 8003d56:	4413      	add	r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d60:	f7fd fc8e 	bl	8001680 <HAL_GetTick>
 8003d64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d68:	e009      	b.n	8003d7e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d6a:	f7fd fc89 	bl	8001680 <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e36b      	b.n	8004456 <HAL_RCC_OscConfig+0xe02>
 8003d7e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003d82:	2202      	movs	r2, #2
 8003d84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d86:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	fa93 f2a3 	rbit	r2, r3
 8003d90:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003d94:	601a      	str	r2, [r3, #0]
 8003d96:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	601a      	str	r2, [r3, #0]
 8003d9e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	fa93 f2a3 	rbit	r2, r3
 8003da8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003dac:	601a      	str	r2, [r3, #0]
 8003dae:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003db2:	2202      	movs	r2, #2
 8003db4:	601a      	str	r2, [r3, #0]
 8003db6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	fa93 f2a3 	rbit	r2, r3
 8003dc0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003dc4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dc6:	4b6f      	ldr	r3, [pc, #444]	; (8003f84 <HAL_RCC_OscConfig+0x930>)
 8003dc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003dca:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003dce:	2102      	movs	r1, #2
 8003dd0:	6019      	str	r1, [r3, #0]
 8003dd2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	fa93 f1a3 	rbit	r1, r3
 8003ddc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003de0:	6019      	str	r1, [r3, #0]
  return result;
 8003de2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	fab3 f383 	clz	r3, r3
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	f003 031f 	and.w	r3, r3, #31
 8003df8:	2101      	movs	r1, #1
 8003dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8003dfe:	4013      	ands	r3, r2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1b2      	bne.n	8003d6a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e04:	1d3b      	adds	r3, r7, #4
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0304 	and.w	r3, r3, #4
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f000 8158 	beq.w	80040c4 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e14:	2300      	movs	r3, #0
 8003e16:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e1a:	4b5a      	ldr	r3, [pc, #360]	; (8003f84 <HAL_RCC_OscConfig+0x930>)
 8003e1c:	69db      	ldr	r3, [r3, #28]
 8003e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d112      	bne.n	8003e4c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e26:	4b57      	ldr	r3, [pc, #348]	; (8003f84 <HAL_RCC_OscConfig+0x930>)
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	4a56      	ldr	r2, [pc, #344]	; (8003f84 <HAL_RCC_OscConfig+0x930>)
 8003e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e30:	61d3      	str	r3, [r2, #28]
 8003e32:	4b54      	ldr	r3, [pc, #336]	; (8003f84 <HAL_RCC_OscConfig+0x930>)
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003e3a:	f107 0308 	add.w	r3, r7, #8
 8003e3e:	601a      	str	r2, [r3, #0]
 8003e40:	f107 0308 	add.w	r3, r7, #8
 8003e44:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003e46:	2301      	movs	r3, #1
 8003e48:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e4c:	4b4f      	ldr	r3, [pc, #316]	; (8003f8c <HAL_RCC_OscConfig+0x938>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d11a      	bne.n	8003e8e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e58:	4b4c      	ldr	r3, [pc, #304]	; (8003f8c <HAL_RCC_OscConfig+0x938>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a4b      	ldr	r2, [pc, #300]	; (8003f8c <HAL_RCC_OscConfig+0x938>)
 8003e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e62:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e64:	f7fd fc0c 	bl	8001680 <HAL_GetTick>
 8003e68:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e6c:	e009      	b.n	8003e82 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e6e:	f7fd fc07 	bl	8001680 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b64      	cmp	r3, #100	; 0x64
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e2e9      	b.n	8004456 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e82:	4b42      	ldr	r3, [pc, #264]	; (8003f8c <HAL_RCC_OscConfig+0x938>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d0ef      	beq.n	8003e6e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e8e:	1d3b      	adds	r3, r7, #4
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d106      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x852>
 8003e98:	4b3a      	ldr	r3, [pc, #232]	; (8003f84 <HAL_RCC_OscConfig+0x930>)
 8003e9a:	6a1b      	ldr	r3, [r3, #32]
 8003e9c:	4a39      	ldr	r2, [pc, #228]	; (8003f84 <HAL_RCC_OscConfig+0x930>)
 8003e9e:	f043 0301 	orr.w	r3, r3, #1
 8003ea2:	6213      	str	r3, [r2, #32]
 8003ea4:	e02f      	b.n	8003f06 <HAL_RCC_OscConfig+0x8b2>
 8003ea6:	1d3b      	adds	r3, r7, #4
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d10c      	bne.n	8003eca <HAL_RCC_OscConfig+0x876>
 8003eb0:	4b34      	ldr	r3, [pc, #208]	; (8003f84 <HAL_RCC_OscConfig+0x930>)
 8003eb2:	6a1b      	ldr	r3, [r3, #32]
 8003eb4:	4a33      	ldr	r2, [pc, #204]	; (8003f84 <HAL_RCC_OscConfig+0x930>)
 8003eb6:	f023 0301 	bic.w	r3, r3, #1
 8003eba:	6213      	str	r3, [r2, #32]
 8003ebc:	4b31      	ldr	r3, [pc, #196]	; (8003f84 <HAL_RCC_OscConfig+0x930>)
 8003ebe:	6a1b      	ldr	r3, [r3, #32]
 8003ec0:	4a30      	ldr	r2, [pc, #192]	; (8003f84 <HAL_RCC_OscConfig+0x930>)
 8003ec2:	f023 0304 	bic.w	r3, r3, #4
 8003ec6:	6213      	str	r3, [r2, #32]
 8003ec8:	e01d      	b.n	8003f06 <HAL_RCC_OscConfig+0x8b2>
 8003eca:	1d3b      	adds	r3, r7, #4
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	2b05      	cmp	r3, #5
 8003ed2:	d10c      	bne.n	8003eee <HAL_RCC_OscConfig+0x89a>
 8003ed4:	4b2b      	ldr	r3, [pc, #172]	; (8003f84 <HAL_RCC_OscConfig+0x930>)
 8003ed6:	6a1b      	ldr	r3, [r3, #32]
 8003ed8:	4a2a      	ldr	r2, [pc, #168]	; (8003f84 <HAL_RCC_OscConfig+0x930>)
 8003eda:	f043 0304 	orr.w	r3, r3, #4
 8003ede:	6213      	str	r3, [r2, #32]
 8003ee0:	4b28      	ldr	r3, [pc, #160]	; (8003f84 <HAL_RCC_OscConfig+0x930>)
 8003ee2:	6a1b      	ldr	r3, [r3, #32]
 8003ee4:	4a27      	ldr	r2, [pc, #156]	; (8003f84 <HAL_RCC_OscConfig+0x930>)
 8003ee6:	f043 0301 	orr.w	r3, r3, #1
 8003eea:	6213      	str	r3, [r2, #32]
 8003eec:	e00b      	b.n	8003f06 <HAL_RCC_OscConfig+0x8b2>
 8003eee:	4b25      	ldr	r3, [pc, #148]	; (8003f84 <HAL_RCC_OscConfig+0x930>)
 8003ef0:	6a1b      	ldr	r3, [r3, #32]
 8003ef2:	4a24      	ldr	r2, [pc, #144]	; (8003f84 <HAL_RCC_OscConfig+0x930>)
 8003ef4:	f023 0301 	bic.w	r3, r3, #1
 8003ef8:	6213      	str	r3, [r2, #32]
 8003efa:	4b22      	ldr	r3, [pc, #136]	; (8003f84 <HAL_RCC_OscConfig+0x930>)
 8003efc:	6a1b      	ldr	r3, [r3, #32]
 8003efe:	4a21      	ldr	r2, [pc, #132]	; (8003f84 <HAL_RCC_OscConfig+0x930>)
 8003f00:	f023 0304 	bic.w	r3, r3, #4
 8003f04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f06:	1d3b      	adds	r3, r7, #4
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d06b      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f10:	f7fd fbb6 	bl	8001680 <HAL_GetTick>
 8003f14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f18:	e00b      	b.n	8003f32 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f1a:	f7fd fbb1 	bl	8001680 <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e291      	b.n	8004456 <HAL_RCC_OscConfig+0xe02>
 8003f32:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003f36:	2202      	movs	r2, #2
 8003f38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f3a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	fa93 f2a3 	rbit	r2, r3
 8003f44:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003f48:	601a      	str	r2, [r3, #0]
 8003f4a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003f4e:	2202      	movs	r2, #2
 8003f50:	601a      	str	r2, [r3, #0]
 8003f52:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	fa93 f2a3 	rbit	r2, r3
 8003f5c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003f60:	601a      	str	r2, [r3, #0]
  return result;
 8003f62:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003f66:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f68:	fab3 f383 	clz	r3, r3
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	095b      	lsrs	r3, r3, #5
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	f043 0302 	orr.w	r3, r3, #2
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d109      	bne.n	8003f90 <HAL_RCC_OscConfig+0x93c>
 8003f7c:	4b01      	ldr	r3, [pc, #4]	; (8003f84 <HAL_RCC_OscConfig+0x930>)
 8003f7e:	6a1b      	ldr	r3, [r3, #32]
 8003f80:	e014      	b.n	8003fac <HAL_RCC_OscConfig+0x958>
 8003f82:	bf00      	nop
 8003f84:	40021000 	.word	0x40021000
 8003f88:	10908120 	.word	0x10908120
 8003f8c:	40007000 	.word	0x40007000
 8003f90:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003f94:	2202      	movs	r2, #2
 8003f96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f98:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	fa93 f2a3 	rbit	r2, r3
 8003fa2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003fa6:	601a      	str	r2, [r3, #0]
 8003fa8:	4bbb      	ldr	r3, [pc, #748]	; (8004298 <HAL_RCC_OscConfig+0xc44>)
 8003faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fac:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003fb0:	2102      	movs	r1, #2
 8003fb2:	6011      	str	r1, [r2, #0]
 8003fb4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003fb8:	6812      	ldr	r2, [r2, #0]
 8003fba:	fa92 f1a2 	rbit	r1, r2
 8003fbe:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003fc2:	6011      	str	r1, [r2, #0]
  return result;
 8003fc4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003fc8:	6812      	ldr	r2, [r2, #0]
 8003fca:	fab2 f282 	clz	r2, r2
 8003fce:	b2d2      	uxtb	r2, r2
 8003fd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fd4:	b2d2      	uxtb	r2, r2
 8003fd6:	f002 021f 	and.w	r2, r2, #31
 8003fda:	2101      	movs	r1, #1
 8003fdc:	fa01 f202 	lsl.w	r2, r1, r2
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d099      	beq.n	8003f1a <HAL_RCC_OscConfig+0x8c6>
 8003fe6:	e063      	b.n	80040b0 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fe8:	f7fd fb4a 	bl	8001680 <HAL_GetTick>
 8003fec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ff0:	e00b      	b.n	800400a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ff2:	f7fd fb45 	bl	8001680 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004002:	4293      	cmp	r3, r2
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e225      	b.n	8004456 <HAL_RCC_OscConfig+0xe02>
 800400a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800400e:	2202      	movs	r2, #2
 8004010:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004012:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	fa93 f2a3 	rbit	r2, r3
 800401c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004020:	601a      	str	r2, [r3, #0]
 8004022:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004026:	2202      	movs	r2, #2
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	fa93 f2a3 	rbit	r2, r3
 8004034:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004038:	601a      	str	r2, [r3, #0]
  return result;
 800403a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800403e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004040:	fab3 f383 	clz	r3, r3
 8004044:	b2db      	uxtb	r3, r3
 8004046:	095b      	lsrs	r3, r3, #5
 8004048:	b2db      	uxtb	r3, r3
 800404a:	f043 0302 	orr.w	r3, r3, #2
 800404e:	b2db      	uxtb	r3, r3
 8004050:	2b02      	cmp	r3, #2
 8004052:	d102      	bne.n	800405a <HAL_RCC_OscConfig+0xa06>
 8004054:	4b90      	ldr	r3, [pc, #576]	; (8004298 <HAL_RCC_OscConfig+0xc44>)
 8004056:	6a1b      	ldr	r3, [r3, #32]
 8004058:	e00d      	b.n	8004076 <HAL_RCC_OscConfig+0xa22>
 800405a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800405e:	2202      	movs	r2, #2
 8004060:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004062:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	fa93 f2a3 	rbit	r2, r3
 800406c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004070:	601a      	str	r2, [r3, #0]
 8004072:	4b89      	ldr	r3, [pc, #548]	; (8004298 <HAL_RCC_OscConfig+0xc44>)
 8004074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004076:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800407a:	2102      	movs	r1, #2
 800407c:	6011      	str	r1, [r2, #0]
 800407e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004082:	6812      	ldr	r2, [r2, #0]
 8004084:	fa92 f1a2 	rbit	r1, r2
 8004088:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800408c:	6011      	str	r1, [r2, #0]
  return result;
 800408e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8004092:	6812      	ldr	r2, [r2, #0]
 8004094:	fab2 f282 	clz	r2, r2
 8004098:	b2d2      	uxtb	r2, r2
 800409a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800409e:	b2d2      	uxtb	r2, r2
 80040a0:	f002 021f 	and.w	r2, r2, #31
 80040a4:	2101      	movs	r1, #1
 80040a6:	fa01 f202 	lsl.w	r2, r1, r2
 80040aa:	4013      	ands	r3, r2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1a0      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80040b0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d105      	bne.n	80040c4 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040b8:	4b77      	ldr	r3, [pc, #476]	; (8004298 <HAL_RCC_OscConfig+0xc44>)
 80040ba:	69db      	ldr	r3, [r3, #28]
 80040bc:	4a76      	ldr	r2, [pc, #472]	; (8004298 <HAL_RCC_OscConfig+0xc44>)
 80040be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040c2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040c4:	1d3b      	adds	r3, r7, #4
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f000 81c2 	beq.w	8004454 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040d0:	4b71      	ldr	r3, [pc, #452]	; (8004298 <HAL_RCC_OscConfig+0xc44>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f003 030c 	and.w	r3, r3, #12
 80040d8:	2b08      	cmp	r3, #8
 80040da:	f000 819c 	beq.w	8004416 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040de:	1d3b      	adds	r3, r7, #4
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	69db      	ldr	r3, [r3, #28]
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	f040 8114 	bne.w	8004312 <HAL_RCC_OscConfig+0xcbe>
 80040ea:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80040ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80040f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	fa93 f2a3 	rbit	r2, r3
 80040fe:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004102:	601a      	str	r2, [r3, #0]
  return result;
 8004104:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004108:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800410a:	fab3 f383 	clz	r3, r3
 800410e:	b2db      	uxtb	r3, r3
 8004110:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004114:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	461a      	mov	r2, r3
 800411c:	2300      	movs	r3, #0
 800411e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004120:	f7fd faae 	bl	8001680 <HAL_GetTick>
 8004124:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004128:	e009      	b.n	800413e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800412a:	f7fd faa9 	bl	8001680 <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b02      	cmp	r3, #2
 8004138:	d901      	bls.n	800413e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e18b      	b.n	8004456 <HAL_RCC_OscConfig+0xe02>
 800413e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004142:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004146:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004148:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	fa93 f2a3 	rbit	r2, r3
 8004152:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004156:	601a      	str	r2, [r3, #0]
  return result;
 8004158:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800415c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800415e:	fab3 f383 	clz	r3, r3
 8004162:	b2db      	uxtb	r3, r3
 8004164:	095b      	lsrs	r3, r3, #5
 8004166:	b2db      	uxtb	r3, r3
 8004168:	f043 0301 	orr.w	r3, r3, #1
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b01      	cmp	r3, #1
 8004170:	d102      	bne.n	8004178 <HAL_RCC_OscConfig+0xb24>
 8004172:	4b49      	ldr	r3, [pc, #292]	; (8004298 <HAL_RCC_OscConfig+0xc44>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	e01b      	b.n	80041b0 <HAL_RCC_OscConfig+0xb5c>
 8004178:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800417c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004180:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004182:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	fa93 f2a3 	rbit	r2, r3
 800418c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004190:	601a      	str	r2, [r3, #0]
 8004192:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004196:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800419a:	601a      	str	r2, [r3, #0]
 800419c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	fa93 f2a3 	rbit	r2, r3
 80041a6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80041aa:	601a      	str	r2, [r3, #0]
 80041ac:	4b3a      	ldr	r3, [pc, #232]	; (8004298 <HAL_RCC_OscConfig+0xc44>)
 80041ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80041b4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80041b8:	6011      	str	r1, [r2, #0]
 80041ba:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80041be:	6812      	ldr	r2, [r2, #0]
 80041c0:	fa92 f1a2 	rbit	r1, r2
 80041c4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80041c8:	6011      	str	r1, [r2, #0]
  return result;
 80041ca:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80041ce:	6812      	ldr	r2, [r2, #0]
 80041d0:	fab2 f282 	clz	r2, r2
 80041d4:	b2d2      	uxtb	r2, r2
 80041d6:	f042 0220 	orr.w	r2, r2, #32
 80041da:	b2d2      	uxtb	r2, r2
 80041dc:	f002 021f 	and.w	r2, r2, #31
 80041e0:	2101      	movs	r1, #1
 80041e2:	fa01 f202 	lsl.w	r2, r1, r2
 80041e6:	4013      	ands	r3, r2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d19e      	bne.n	800412a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041ec:	4b2a      	ldr	r3, [pc, #168]	; (8004298 <HAL_RCC_OscConfig+0xc44>)
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80041f4:	1d3b      	adds	r3, r7, #4
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80041fa:	1d3b      	adds	r3, r7, #4
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	6a1b      	ldr	r3, [r3, #32]
 8004200:	430b      	orrs	r3, r1
 8004202:	4925      	ldr	r1, [pc, #148]	; (8004298 <HAL_RCC_OscConfig+0xc44>)
 8004204:	4313      	orrs	r3, r2
 8004206:	604b      	str	r3, [r1, #4]
 8004208:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800420c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004210:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004212:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	fa93 f2a3 	rbit	r2, r3
 800421c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004220:	601a      	str	r2, [r3, #0]
  return result;
 8004222:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004226:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004228:	fab3 f383 	clz	r3, r3
 800422c:	b2db      	uxtb	r3, r3
 800422e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004232:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	461a      	mov	r2, r3
 800423a:	2301      	movs	r3, #1
 800423c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800423e:	f7fd fa1f 	bl	8001680 <HAL_GetTick>
 8004242:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004246:	e009      	b.n	800425c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004248:	f7fd fa1a 	bl	8001680 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	2b02      	cmp	r3, #2
 8004256:	d901      	bls.n	800425c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e0fc      	b.n	8004456 <HAL_RCC_OscConfig+0xe02>
 800425c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004260:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004264:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004266:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	fa93 f2a3 	rbit	r2, r3
 8004270:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004274:	601a      	str	r2, [r3, #0]
  return result;
 8004276:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800427a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800427c:	fab3 f383 	clz	r3, r3
 8004280:	b2db      	uxtb	r3, r3
 8004282:	095b      	lsrs	r3, r3, #5
 8004284:	b2db      	uxtb	r3, r3
 8004286:	f043 0301 	orr.w	r3, r3, #1
 800428a:	b2db      	uxtb	r3, r3
 800428c:	2b01      	cmp	r3, #1
 800428e:	d105      	bne.n	800429c <HAL_RCC_OscConfig+0xc48>
 8004290:	4b01      	ldr	r3, [pc, #4]	; (8004298 <HAL_RCC_OscConfig+0xc44>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	e01e      	b.n	80042d4 <HAL_RCC_OscConfig+0xc80>
 8004296:	bf00      	nop
 8004298:	40021000 	.word	0x40021000
 800429c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80042a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	fa93 f2a3 	rbit	r2, r3
 80042b0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80042b4:	601a      	str	r2, [r3, #0]
 80042b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80042ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042be:	601a      	str	r2, [r3, #0]
 80042c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	fa93 f2a3 	rbit	r2, r3
 80042ca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80042ce:	601a      	str	r2, [r3, #0]
 80042d0:	4b63      	ldr	r3, [pc, #396]	; (8004460 <HAL_RCC_OscConfig+0xe0c>)
 80042d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80042d8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80042dc:	6011      	str	r1, [r2, #0]
 80042de:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80042e2:	6812      	ldr	r2, [r2, #0]
 80042e4:	fa92 f1a2 	rbit	r1, r2
 80042e8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80042ec:	6011      	str	r1, [r2, #0]
  return result;
 80042ee:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80042f2:	6812      	ldr	r2, [r2, #0]
 80042f4:	fab2 f282 	clz	r2, r2
 80042f8:	b2d2      	uxtb	r2, r2
 80042fa:	f042 0220 	orr.w	r2, r2, #32
 80042fe:	b2d2      	uxtb	r2, r2
 8004300:	f002 021f 	and.w	r2, r2, #31
 8004304:	2101      	movs	r1, #1
 8004306:	fa01 f202 	lsl.w	r2, r1, r2
 800430a:	4013      	ands	r3, r2
 800430c:	2b00      	cmp	r3, #0
 800430e:	d09b      	beq.n	8004248 <HAL_RCC_OscConfig+0xbf4>
 8004310:	e0a0      	b.n	8004454 <HAL_RCC_OscConfig+0xe00>
 8004312:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004316:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800431a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800431c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	fa93 f2a3 	rbit	r2, r3
 8004326:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800432a:	601a      	str	r2, [r3, #0]
  return result;
 800432c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004330:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004332:	fab3 f383 	clz	r3, r3
 8004336:	b2db      	uxtb	r3, r3
 8004338:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800433c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	461a      	mov	r2, r3
 8004344:	2300      	movs	r3, #0
 8004346:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004348:	f7fd f99a 	bl	8001680 <HAL_GetTick>
 800434c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004350:	e009      	b.n	8004366 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004352:	f7fd f995 	bl	8001680 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	2b02      	cmp	r3, #2
 8004360:	d901      	bls.n	8004366 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e077      	b.n	8004456 <HAL_RCC_OscConfig+0xe02>
 8004366:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800436a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800436e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004370:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	fa93 f2a3 	rbit	r2, r3
 800437a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800437e:	601a      	str	r2, [r3, #0]
  return result;
 8004380:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004384:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004386:	fab3 f383 	clz	r3, r3
 800438a:	b2db      	uxtb	r3, r3
 800438c:	095b      	lsrs	r3, r3, #5
 800438e:	b2db      	uxtb	r3, r3
 8004390:	f043 0301 	orr.w	r3, r3, #1
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b01      	cmp	r3, #1
 8004398:	d102      	bne.n	80043a0 <HAL_RCC_OscConfig+0xd4c>
 800439a:	4b31      	ldr	r3, [pc, #196]	; (8004460 <HAL_RCC_OscConfig+0xe0c>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	e01b      	b.n	80043d8 <HAL_RCC_OscConfig+0xd84>
 80043a0:	f107 0320 	add.w	r3, r7, #32
 80043a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043aa:	f107 0320 	add.w	r3, r7, #32
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	fa93 f2a3 	rbit	r2, r3
 80043b4:	f107 031c 	add.w	r3, r7, #28
 80043b8:	601a      	str	r2, [r3, #0]
 80043ba:	f107 0318 	add.w	r3, r7, #24
 80043be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043c2:	601a      	str	r2, [r3, #0]
 80043c4:	f107 0318 	add.w	r3, r7, #24
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	fa93 f2a3 	rbit	r2, r3
 80043ce:	f107 0314 	add.w	r3, r7, #20
 80043d2:	601a      	str	r2, [r3, #0]
 80043d4:	4b22      	ldr	r3, [pc, #136]	; (8004460 <HAL_RCC_OscConfig+0xe0c>)
 80043d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d8:	f107 0210 	add.w	r2, r7, #16
 80043dc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80043e0:	6011      	str	r1, [r2, #0]
 80043e2:	f107 0210 	add.w	r2, r7, #16
 80043e6:	6812      	ldr	r2, [r2, #0]
 80043e8:	fa92 f1a2 	rbit	r1, r2
 80043ec:	f107 020c 	add.w	r2, r7, #12
 80043f0:	6011      	str	r1, [r2, #0]
  return result;
 80043f2:	f107 020c 	add.w	r2, r7, #12
 80043f6:	6812      	ldr	r2, [r2, #0]
 80043f8:	fab2 f282 	clz	r2, r2
 80043fc:	b2d2      	uxtb	r2, r2
 80043fe:	f042 0220 	orr.w	r2, r2, #32
 8004402:	b2d2      	uxtb	r2, r2
 8004404:	f002 021f 	and.w	r2, r2, #31
 8004408:	2101      	movs	r1, #1
 800440a:	fa01 f202 	lsl.w	r2, r1, r2
 800440e:	4013      	ands	r3, r2
 8004410:	2b00      	cmp	r3, #0
 8004412:	d19e      	bne.n	8004352 <HAL_RCC_OscConfig+0xcfe>
 8004414:	e01e      	b.n	8004454 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004416:	1d3b      	adds	r3, r7, #4
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	69db      	ldr	r3, [r3, #28]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d101      	bne.n	8004424 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e018      	b.n	8004456 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004424:	4b0e      	ldr	r3, [pc, #56]	; (8004460 <HAL_RCC_OscConfig+0xe0c>)
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800442c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004430:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004434:	1d3b      	adds	r3, r7, #4
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	429a      	cmp	r2, r3
 800443c:	d108      	bne.n	8004450 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800443e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004442:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004446:	1d3b      	adds	r3, r7, #4
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800444c:	429a      	cmp	r2, r3
 800444e:	d001      	beq.n	8004454 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e000      	b.n	8004456 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	40021000 	.word	0x40021000

08004464 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b09e      	sub	sp, #120	; 0x78
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800446e:	2300      	movs	r3, #0
 8004470:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d101      	bne.n	800447c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e162      	b.n	8004742 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800447c:	4b90      	ldr	r3, [pc, #576]	; (80046c0 <HAL_RCC_ClockConfig+0x25c>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0307 	and.w	r3, r3, #7
 8004484:	683a      	ldr	r2, [r7, #0]
 8004486:	429a      	cmp	r2, r3
 8004488:	d910      	bls.n	80044ac <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800448a:	4b8d      	ldr	r3, [pc, #564]	; (80046c0 <HAL_RCC_ClockConfig+0x25c>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f023 0207 	bic.w	r2, r3, #7
 8004492:	498b      	ldr	r1, [pc, #556]	; (80046c0 <HAL_RCC_ClockConfig+0x25c>)
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	4313      	orrs	r3, r2
 8004498:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800449a:	4b89      	ldr	r3, [pc, #548]	; (80046c0 <HAL_RCC_ClockConfig+0x25c>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0307 	and.w	r3, r3, #7
 80044a2:	683a      	ldr	r2, [r7, #0]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d001      	beq.n	80044ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e14a      	b.n	8004742 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d008      	beq.n	80044ca <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044b8:	4b82      	ldr	r3, [pc, #520]	; (80046c4 <HAL_RCC_ClockConfig+0x260>)
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	497f      	ldr	r1, [pc, #508]	; (80046c4 <HAL_RCC_ClockConfig+0x260>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f000 80dc 	beq.w	8004690 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d13c      	bne.n	800455a <HAL_RCC_ClockConfig+0xf6>
 80044e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044e4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044e8:	fa93 f3a3 	rbit	r3, r3
 80044ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80044ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044f0:	fab3 f383 	clz	r3, r3
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	095b      	lsrs	r3, r3, #5
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	f043 0301 	orr.w	r3, r3, #1
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	2b01      	cmp	r3, #1
 8004502:	d102      	bne.n	800450a <HAL_RCC_ClockConfig+0xa6>
 8004504:	4b6f      	ldr	r3, [pc, #444]	; (80046c4 <HAL_RCC_ClockConfig+0x260>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	e00f      	b.n	800452a <HAL_RCC_ClockConfig+0xc6>
 800450a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800450e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004510:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004512:	fa93 f3a3 	rbit	r3, r3
 8004516:	667b      	str	r3, [r7, #100]	; 0x64
 8004518:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800451c:	663b      	str	r3, [r7, #96]	; 0x60
 800451e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004520:	fa93 f3a3 	rbit	r3, r3
 8004524:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004526:	4b67      	ldr	r3, [pc, #412]	; (80046c4 <HAL_RCC_ClockConfig+0x260>)
 8004528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800452e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004530:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004532:	fa92 f2a2 	rbit	r2, r2
 8004536:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004538:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800453a:	fab2 f282 	clz	r2, r2
 800453e:	b2d2      	uxtb	r2, r2
 8004540:	f042 0220 	orr.w	r2, r2, #32
 8004544:	b2d2      	uxtb	r2, r2
 8004546:	f002 021f 	and.w	r2, r2, #31
 800454a:	2101      	movs	r1, #1
 800454c:	fa01 f202 	lsl.w	r2, r1, r2
 8004550:	4013      	ands	r3, r2
 8004552:	2b00      	cmp	r3, #0
 8004554:	d17b      	bne.n	800464e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e0f3      	b.n	8004742 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	2b02      	cmp	r3, #2
 8004560:	d13c      	bne.n	80045dc <HAL_RCC_ClockConfig+0x178>
 8004562:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004566:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004568:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800456a:	fa93 f3a3 	rbit	r3, r3
 800456e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004570:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004572:	fab3 f383 	clz	r3, r3
 8004576:	b2db      	uxtb	r3, r3
 8004578:	095b      	lsrs	r3, r3, #5
 800457a:	b2db      	uxtb	r3, r3
 800457c:	f043 0301 	orr.w	r3, r3, #1
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b01      	cmp	r3, #1
 8004584:	d102      	bne.n	800458c <HAL_RCC_ClockConfig+0x128>
 8004586:	4b4f      	ldr	r3, [pc, #316]	; (80046c4 <HAL_RCC_ClockConfig+0x260>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	e00f      	b.n	80045ac <HAL_RCC_ClockConfig+0x148>
 800458c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004590:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004592:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004594:	fa93 f3a3 	rbit	r3, r3
 8004598:	647b      	str	r3, [r7, #68]	; 0x44
 800459a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800459e:	643b      	str	r3, [r7, #64]	; 0x40
 80045a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045a2:	fa93 f3a3 	rbit	r3, r3
 80045a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045a8:	4b46      	ldr	r3, [pc, #280]	; (80046c4 <HAL_RCC_ClockConfig+0x260>)
 80045aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045b0:	63ba      	str	r2, [r7, #56]	; 0x38
 80045b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045b4:	fa92 f2a2 	rbit	r2, r2
 80045b8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80045ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045bc:	fab2 f282 	clz	r2, r2
 80045c0:	b2d2      	uxtb	r2, r2
 80045c2:	f042 0220 	orr.w	r2, r2, #32
 80045c6:	b2d2      	uxtb	r2, r2
 80045c8:	f002 021f 	and.w	r2, r2, #31
 80045cc:	2101      	movs	r1, #1
 80045ce:	fa01 f202 	lsl.w	r2, r1, r2
 80045d2:	4013      	ands	r3, r2
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d13a      	bne.n	800464e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e0b2      	b.n	8004742 <HAL_RCC_ClockConfig+0x2de>
 80045dc:	2302      	movs	r3, #2
 80045de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e2:	fa93 f3a3 	rbit	r3, r3
 80045e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80045e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ea:	fab3 f383 	clz	r3, r3
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	095b      	lsrs	r3, r3, #5
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	f043 0301 	orr.w	r3, r3, #1
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d102      	bne.n	8004604 <HAL_RCC_ClockConfig+0x1a0>
 80045fe:	4b31      	ldr	r3, [pc, #196]	; (80046c4 <HAL_RCC_ClockConfig+0x260>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	e00d      	b.n	8004620 <HAL_RCC_ClockConfig+0x1bc>
 8004604:	2302      	movs	r3, #2
 8004606:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800460a:	fa93 f3a3 	rbit	r3, r3
 800460e:	627b      	str	r3, [r7, #36]	; 0x24
 8004610:	2302      	movs	r3, #2
 8004612:	623b      	str	r3, [r7, #32]
 8004614:	6a3b      	ldr	r3, [r7, #32]
 8004616:	fa93 f3a3 	rbit	r3, r3
 800461a:	61fb      	str	r3, [r7, #28]
 800461c:	4b29      	ldr	r3, [pc, #164]	; (80046c4 <HAL_RCC_ClockConfig+0x260>)
 800461e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004620:	2202      	movs	r2, #2
 8004622:	61ba      	str	r2, [r7, #24]
 8004624:	69ba      	ldr	r2, [r7, #24]
 8004626:	fa92 f2a2 	rbit	r2, r2
 800462a:	617a      	str	r2, [r7, #20]
  return result;
 800462c:	697a      	ldr	r2, [r7, #20]
 800462e:	fab2 f282 	clz	r2, r2
 8004632:	b2d2      	uxtb	r2, r2
 8004634:	f042 0220 	orr.w	r2, r2, #32
 8004638:	b2d2      	uxtb	r2, r2
 800463a:	f002 021f 	and.w	r2, r2, #31
 800463e:	2101      	movs	r1, #1
 8004640:	fa01 f202 	lsl.w	r2, r1, r2
 8004644:	4013      	ands	r3, r2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d101      	bne.n	800464e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e079      	b.n	8004742 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800464e:	4b1d      	ldr	r3, [pc, #116]	; (80046c4 <HAL_RCC_ClockConfig+0x260>)
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f023 0203 	bic.w	r2, r3, #3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	491a      	ldr	r1, [pc, #104]	; (80046c4 <HAL_RCC_ClockConfig+0x260>)
 800465c:	4313      	orrs	r3, r2
 800465e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004660:	f7fd f80e 	bl	8001680 <HAL_GetTick>
 8004664:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004666:	e00a      	b.n	800467e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004668:	f7fd f80a 	bl	8001680 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	f241 3288 	movw	r2, #5000	; 0x1388
 8004676:	4293      	cmp	r3, r2
 8004678:	d901      	bls.n	800467e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e061      	b.n	8004742 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800467e:	4b11      	ldr	r3, [pc, #68]	; (80046c4 <HAL_RCC_ClockConfig+0x260>)
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f003 020c 	and.w	r2, r3, #12
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	429a      	cmp	r2, r3
 800468e:	d1eb      	bne.n	8004668 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004690:	4b0b      	ldr	r3, [pc, #44]	; (80046c0 <HAL_RCC_ClockConfig+0x25c>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0307 	and.w	r3, r3, #7
 8004698:	683a      	ldr	r2, [r7, #0]
 800469a:	429a      	cmp	r2, r3
 800469c:	d214      	bcs.n	80046c8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800469e:	4b08      	ldr	r3, [pc, #32]	; (80046c0 <HAL_RCC_ClockConfig+0x25c>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f023 0207 	bic.w	r2, r3, #7
 80046a6:	4906      	ldr	r1, [pc, #24]	; (80046c0 <HAL_RCC_ClockConfig+0x25c>)
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ae:	4b04      	ldr	r3, [pc, #16]	; (80046c0 <HAL_RCC_ClockConfig+0x25c>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0307 	and.w	r3, r3, #7
 80046b6:	683a      	ldr	r2, [r7, #0]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d005      	beq.n	80046c8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e040      	b.n	8004742 <HAL_RCC_ClockConfig+0x2de>
 80046c0:	40022000 	.word	0x40022000
 80046c4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0304 	and.w	r3, r3, #4
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d008      	beq.n	80046e6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046d4:	4b1d      	ldr	r3, [pc, #116]	; (800474c <HAL_RCC_ClockConfig+0x2e8>)
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	491a      	ldr	r1, [pc, #104]	; (800474c <HAL_RCC_ClockConfig+0x2e8>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0308 	and.w	r3, r3, #8
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d009      	beq.n	8004706 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046f2:	4b16      	ldr	r3, [pc, #88]	; (800474c <HAL_RCC_ClockConfig+0x2e8>)
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	00db      	lsls	r3, r3, #3
 8004700:	4912      	ldr	r1, [pc, #72]	; (800474c <HAL_RCC_ClockConfig+0x2e8>)
 8004702:	4313      	orrs	r3, r2
 8004704:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004706:	f000 f829 	bl	800475c <HAL_RCC_GetSysClockFreq>
 800470a:	4601      	mov	r1, r0
 800470c:	4b0f      	ldr	r3, [pc, #60]	; (800474c <HAL_RCC_ClockConfig+0x2e8>)
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004714:	22f0      	movs	r2, #240	; 0xf0
 8004716:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	fa92 f2a2 	rbit	r2, r2
 800471e:	60fa      	str	r2, [r7, #12]
  return result;
 8004720:	68fa      	ldr	r2, [r7, #12]
 8004722:	fab2 f282 	clz	r2, r2
 8004726:	b2d2      	uxtb	r2, r2
 8004728:	40d3      	lsrs	r3, r2
 800472a:	4a09      	ldr	r2, [pc, #36]	; (8004750 <HAL_RCC_ClockConfig+0x2ec>)
 800472c:	5cd3      	ldrb	r3, [r2, r3]
 800472e:	fa21 f303 	lsr.w	r3, r1, r3
 8004732:	4a08      	ldr	r2, [pc, #32]	; (8004754 <HAL_RCC_ClockConfig+0x2f0>)
 8004734:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004736:	4b08      	ldr	r3, [pc, #32]	; (8004758 <HAL_RCC_ClockConfig+0x2f4>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4618      	mov	r0, r3
 800473c:	f7fc ff5c 	bl	80015f8 <HAL_InitTick>
  
  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3778      	adds	r7, #120	; 0x78
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	40021000 	.word	0x40021000
 8004750:	08005f30 	.word	0x08005f30
 8004754:	20000008 	.word	0x20000008
 8004758:	2000000c 	.word	0x2000000c

0800475c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800475c:	b480      	push	{r7}
 800475e:	b08b      	sub	sp, #44	; 0x2c
 8004760:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004762:	2300      	movs	r3, #0
 8004764:	61fb      	str	r3, [r7, #28]
 8004766:	2300      	movs	r3, #0
 8004768:	61bb      	str	r3, [r7, #24]
 800476a:	2300      	movs	r3, #0
 800476c:	627b      	str	r3, [r7, #36]	; 0x24
 800476e:	2300      	movs	r3, #0
 8004770:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004772:	2300      	movs	r3, #0
 8004774:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004776:	4b29      	ldr	r3, [pc, #164]	; (800481c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	f003 030c 	and.w	r3, r3, #12
 8004782:	2b04      	cmp	r3, #4
 8004784:	d002      	beq.n	800478c <HAL_RCC_GetSysClockFreq+0x30>
 8004786:	2b08      	cmp	r3, #8
 8004788:	d003      	beq.n	8004792 <HAL_RCC_GetSysClockFreq+0x36>
 800478a:	e03c      	b.n	8004806 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800478c:	4b24      	ldr	r3, [pc, #144]	; (8004820 <HAL_RCC_GetSysClockFreq+0xc4>)
 800478e:	623b      	str	r3, [r7, #32]
      break;
 8004790:	e03c      	b.n	800480c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004798:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800479c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800479e:	68ba      	ldr	r2, [r7, #8]
 80047a0:	fa92 f2a2 	rbit	r2, r2
 80047a4:	607a      	str	r2, [r7, #4]
  return result;
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	fab2 f282 	clz	r2, r2
 80047ac:	b2d2      	uxtb	r2, r2
 80047ae:	40d3      	lsrs	r3, r2
 80047b0:	4a1c      	ldr	r2, [pc, #112]	; (8004824 <HAL_RCC_GetSysClockFreq+0xc8>)
 80047b2:	5cd3      	ldrb	r3, [r2, r3]
 80047b4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80047b6:	4b19      	ldr	r3, [pc, #100]	; (800481c <HAL_RCC_GetSysClockFreq+0xc0>)
 80047b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ba:	f003 030f 	and.w	r3, r3, #15
 80047be:	220f      	movs	r2, #15
 80047c0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047c2:	693a      	ldr	r2, [r7, #16]
 80047c4:	fa92 f2a2 	rbit	r2, r2
 80047c8:	60fa      	str	r2, [r7, #12]
  return result;
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	fab2 f282 	clz	r2, r2
 80047d0:	b2d2      	uxtb	r2, r2
 80047d2:	40d3      	lsrs	r3, r2
 80047d4:	4a14      	ldr	r2, [pc, #80]	; (8004828 <HAL_RCC_GetSysClockFreq+0xcc>)
 80047d6:	5cd3      	ldrb	r3, [r2, r3]
 80047d8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d008      	beq.n	80047f6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80047e4:	4a0e      	ldr	r2, [pc, #56]	; (8004820 <HAL_RCC_GetSysClockFreq+0xc4>)
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	fb02 f303 	mul.w	r3, r2, r3
 80047f2:	627b      	str	r3, [r7, #36]	; 0x24
 80047f4:	e004      	b.n	8004800 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	4a0c      	ldr	r2, [pc, #48]	; (800482c <HAL_RCC_GetSysClockFreq+0xd0>)
 80047fa:	fb02 f303 	mul.w	r3, r2, r3
 80047fe:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004802:	623b      	str	r3, [r7, #32]
      break;
 8004804:	e002      	b.n	800480c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004806:	4b06      	ldr	r3, [pc, #24]	; (8004820 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004808:	623b      	str	r3, [r7, #32]
      break;
 800480a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800480c:	6a3b      	ldr	r3, [r7, #32]
}
 800480e:	4618      	mov	r0, r3
 8004810:	372c      	adds	r7, #44	; 0x2c
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	40021000 	.word	0x40021000
 8004820:	007a1200 	.word	0x007a1200
 8004824:	08005f40 	.word	0x08005f40
 8004828:	08005f50 	.word	0x08005f50
 800482c:	003d0900 	.word	0x003d0900

08004830 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b092      	sub	sp, #72	; 0x48
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004838:	2300      	movs	r3, #0
 800483a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800483c:	2300      	movs	r3, #0
 800483e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004840:	2300      	movs	r3, #0
 8004842:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800484e:	2b00      	cmp	r3, #0
 8004850:	f000 80cd 	beq.w	80049ee <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004854:	4b8e      	ldr	r3, [pc, #568]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004856:	69db      	ldr	r3, [r3, #28]
 8004858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d10e      	bne.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004860:	4b8b      	ldr	r3, [pc, #556]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004862:	69db      	ldr	r3, [r3, #28]
 8004864:	4a8a      	ldr	r2, [pc, #552]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004866:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800486a:	61d3      	str	r3, [r2, #28]
 800486c:	4b88      	ldr	r3, [pc, #544]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800486e:	69db      	ldr	r3, [r3, #28]
 8004870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004874:	60bb      	str	r3, [r7, #8]
 8004876:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004878:	2301      	movs	r3, #1
 800487a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800487e:	4b85      	ldr	r3, [pc, #532]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004886:	2b00      	cmp	r3, #0
 8004888:	d118      	bne.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800488a:	4b82      	ldr	r3, [pc, #520]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a81      	ldr	r2, [pc, #516]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004894:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004896:	f7fc fef3 	bl	8001680 <HAL_GetTick>
 800489a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800489c:	e008      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800489e:	f7fc feef 	bl	8001680 <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	2b64      	cmp	r3, #100	; 0x64
 80048aa:	d901      	bls.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e0ea      	b.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048b0:	4b78      	ldr	r3, [pc, #480]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d0f0      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80048bc:	4b74      	ldr	r3, [pc, #464]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048be:	6a1b      	ldr	r3, [r3, #32]
 80048c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80048c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d07d      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d076      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048da:	4b6d      	ldr	r3, [pc, #436]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80048e8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ec:	fa93 f3a3 	rbit	r3, r3
 80048f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80048f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80048f4:	fab3 f383 	clz	r3, r3
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	461a      	mov	r2, r3
 80048fc:	4b66      	ldr	r3, [pc, #408]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048fe:	4413      	add	r3, r2
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	461a      	mov	r2, r3
 8004904:	2301      	movs	r3, #1
 8004906:	6013      	str	r3, [r2, #0]
 8004908:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800490c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800490e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004910:	fa93 f3a3 	rbit	r3, r3
 8004914:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004918:	fab3 f383 	clz	r3, r3
 800491c:	b2db      	uxtb	r3, r3
 800491e:	461a      	mov	r2, r3
 8004920:	4b5d      	ldr	r3, [pc, #372]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004922:	4413      	add	r3, r2
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	461a      	mov	r2, r3
 8004928:	2300      	movs	r3, #0
 800492a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800492c:	4a58      	ldr	r2, [pc, #352]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800492e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004930:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004934:	f003 0301 	and.w	r3, r3, #1
 8004938:	2b00      	cmp	r3, #0
 800493a:	d045      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800493c:	f7fc fea0 	bl	8001680 <HAL_GetTick>
 8004940:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004942:	e00a      	b.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004944:	f7fc fe9c 	bl	8001680 <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004952:	4293      	cmp	r3, r2
 8004954:	d901      	bls.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e095      	b.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x256>
 800495a:	2302      	movs	r3, #2
 800495c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800495e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004960:	fa93 f3a3 	rbit	r3, r3
 8004964:	627b      	str	r3, [r7, #36]	; 0x24
 8004966:	2302      	movs	r3, #2
 8004968:	623b      	str	r3, [r7, #32]
 800496a:	6a3b      	ldr	r3, [r7, #32]
 800496c:	fa93 f3a3 	rbit	r3, r3
 8004970:	61fb      	str	r3, [r7, #28]
  return result;
 8004972:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004974:	fab3 f383 	clz	r3, r3
 8004978:	b2db      	uxtb	r3, r3
 800497a:	095b      	lsrs	r3, r3, #5
 800497c:	b2db      	uxtb	r3, r3
 800497e:	f043 0302 	orr.w	r3, r3, #2
 8004982:	b2db      	uxtb	r3, r3
 8004984:	2b02      	cmp	r3, #2
 8004986:	d102      	bne.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004988:	4b41      	ldr	r3, [pc, #260]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800498a:	6a1b      	ldr	r3, [r3, #32]
 800498c:	e007      	b.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800498e:	2302      	movs	r3, #2
 8004990:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	fa93 f3a3 	rbit	r3, r3
 8004998:	617b      	str	r3, [r7, #20]
 800499a:	4b3d      	ldr	r3, [pc, #244]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800499c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499e:	2202      	movs	r2, #2
 80049a0:	613a      	str	r2, [r7, #16]
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	fa92 f2a2 	rbit	r2, r2
 80049a8:	60fa      	str	r2, [r7, #12]
  return result;
 80049aa:	68fa      	ldr	r2, [r7, #12]
 80049ac:	fab2 f282 	clz	r2, r2
 80049b0:	b2d2      	uxtb	r2, r2
 80049b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049b6:	b2d2      	uxtb	r2, r2
 80049b8:	f002 021f 	and.w	r2, r2, #31
 80049bc:	2101      	movs	r1, #1
 80049be:	fa01 f202 	lsl.w	r2, r1, r2
 80049c2:	4013      	ands	r3, r2
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d0bd      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80049c8:	4b31      	ldr	r3, [pc, #196]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049ca:	6a1b      	ldr	r3, [r3, #32]
 80049cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	492e      	ldr	r1, [pc, #184]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80049da:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d105      	bne.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049e2:	4b2b      	ldr	r3, [pc, #172]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049e4:	69db      	ldr	r3, [r3, #28]
 80049e6:	4a2a      	ldr	r2, [pc, #168]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049ec:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0301 	and.w	r3, r3, #1
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d008      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049fa:	4b25      	ldr	r3, [pc, #148]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049fe:	f023 0203 	bic.w	r2, r3, #3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	4922      	ldr	r1, [pc, #136]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0320 	and.w	r3, r3, #32
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d008      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a18:	4b1d      	ldr	r3, [pc, #116]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1c:	f023 0210 	bic.w	r2, r3, #16
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	491a      	ldr	r1, [pc, #104]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d008      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004a36:	4b16      	ldr	r3, [pc, #88]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	4913      	ldr	r1, [pc, #76]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d008      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004a54:	4b0e      	ldr	r3, [pc, #56]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	695b      	ldr	r3, [r3, #20]
 8004a60:	490b      	ldr	r1, [pc, #44]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d008      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004a72:	4b07      	ldr	r3, [pc, #28]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	4904      	ldr	r1, [pc, #16]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3748      	adds	r7, #72	; 0x48
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	40021000 	.word	0x40021000
 8004a94:	40007000 	.word	0x40007000
 8004a98:	10908100 	.word	0x10908100

08004a9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d101      	bne.n	8004aae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e049      	b.n	8004b42 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d106      	bne.n	8004ac8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f7fc fc48 	bl	8001358 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2202      	movs	r2, #2
 8004acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	3304      	adds	r3, #4
 8004ad8:	4619      	mov	r1, r3
 8004ada:	4610      	mov	r0, r2
 8004adc:	f000 fcb4 	bl	8005448 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3708      	adds	r7, #8
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}

08004b4a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b4a:	b580      	push	{r7, lr}
 8004b4c:	b082      	sub	sp, #8
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d101      	bne.n	8004b5c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e049      	b.n	8004bf0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d106      	bne.n	8004b76 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f7fc fb67 	bl	8001244 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2202      	movs	r2, #2
 8004b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	3304      	adds	r3, #4
 8004b86:	4619      	mov	r1, r3
 8004b88:	4610      	mov	r0, r2
 8004b8a:	f000 fc5d 	bl	8005448 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2201      	movs	r2, #1
 8004b92:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2201      	movs	r2, #1
 8004bca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2201      	movs	r2, #1
 8004bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3708      	adds	r7, #8
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d109      	bne.n	8004c1c <HAL_TIM_PWM_Start+0x24>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	bf14      	ite	ne
 8004c14:	2301      	movne	r3, #1
 8004c16:	2300      	moveq	r3, #0
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	e03c      	b.n	8004c96 <HAL_TIM_PWM_Start+0x9e>
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	2b04      	cmp	r3, #4
 8004c20:	d109      	bne.n	8004c36 <HAL_TIM_PWM_Start+0x3e>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	bf14      	ite	ne
 8004c2e:	2301      	movne	r3, #1
 8004c30:	2300      	moveq	r3, #0
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	e02f      	b.n	8004c96 <HAL_TIM_PWM_Start+0x9e>
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	2b08      	cmp	r3, #8
 8004c3a:	d109      	bne.n	8004c50 <HAL_TIM_PWM_Start+0x58>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	bf14      	ite	ne
 8004c48:	2301      	movne	r3, #1
 8004c4a:	2300      	moveq	r3, #0
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	e022      	b.n	8004c96 <HAL_TIM_PWM_Start+0x9e>
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	2b0c      	cmp	r3, #12
 8004c54:	d109      	bne.n	8004c6a <HAL_TIM_PWM_Start+0x72>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	bf14      	ite	ne
 8004c62:	2301      	movne	r3, #1
 8004c64:	2300      	moveq	r3, #0
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	e015      	b.n	8004c96 <HAL_TIM_PWM_Start+0x9e>
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	2b10      	cmp	r3, #16
 8004c6e:	d109      	bne.n	8004c84 <HAL_TIM_PWM_Start+0x8c>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	bf14      	ite	ne
 8004c7c:	2301      	movne	r3, #1
 8004c7e:	2300      	moveq	r3, #0
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	e008      	b.n	8004c96 <HAL_TIM_PWM_Start+0x9e>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	bf14      	ite	ne
 8004c90:	2301      	movne	r3, #1
 8004c92:	2300      	moveq	r3, #0
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d001      	beq.n	8004c9e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e088      	b.n	8004db0 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d104      	bne.n	8004cae <HAL_TIM_PWM_Start+0xb6>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cac:	e023      	b.n	8004cf6 <HAL_TIM_PWM_Start+0xfe>
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	2b04      	cmp	r3, #4
 8004cb2:	d104      	bne.n	8004cbe <HAL_TIM_PWM_Start+0xc6>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cbc:	e01b      	b.n	8004cf6 <HAL_TIM_PWM_Start+0xfe>
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	2b08      	cmp	r3, #8
 8004cc2:	d104      	bne.n	8004cce <HAL_TIM_PWM_Start+0xd6>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2202      	movs	r2, #2
 8004cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ccc:	e013      	b.n	8004cf6 <HAL_TIM_PWM_Start+0xfe>
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	2b0c      	cmp	r3, #12
 8004cd2:	d104      	bne.n	8004cde <HAL_TIM_PWM_Start+0xe6>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004cdc:	e00b      	b.n	8004cf6 <HAL_TIM_PWM_Start+0xfe>
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	2b10      	cmp	r3, #16
 8004ce2:	d104      	bne.n	8004cee <HAL_TIM_PWM_Start+0xf6>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cec:	e003      	b.n	8004cf6 <HAL_TIM_PWM_Start+0xfe>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2202      	movs	r2, #2
 8004cf2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	6839      	ldr	r1, [r7, #0]
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f000 ffd2 	bl	8005ca8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a2b      	ldr	r2, [pc, #172]	; (8004db8 <HAL_TIM_PWM_Start+0x1c0>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d00e      	beq.n	8004d2c <HAL_TIM_PWM_Start+0x134>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a2a      	ldr	r2, [pc, #168]	; (8004dbc <HAL_TIM_PWM_Start+0x1c4>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d009      	beq.n	8004d2c <HAL_TIM_PWM_Start+0x134>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a28      	ldr	r2, [pc, #160]	; (8004dc0 <HAL_TIM_PWM_Start+0x1c8>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d004      	beq.n	8004d2c <HAL_TIM_PWM_Start+0x134>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a27      	ldr	r2, [pc, #156]	; (8004dc4 <HAL_TIM_PWM_Start+0x1cc>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d101      	bne.n	8004d30 <HAL_TIM_PWM_Start+0x138>
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e000      	b.n	8004d32 <HAL_TIM_PWM_Start+0x13a>
 8004d30:	2300      	movs	r3, #0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d007      	beq.n	8004d46 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d44:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a1b      	ldr	r2, [pc, #108]	; (8004db8 <HAL_TIM_PWM_Start+0x1c0>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d00e      	beq.n	8004d6e <HAL_TIM_PWM_Start+0x176>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d58:	d009      	beq.n	8004d6e <HAL_TIM_PWM_Start+0x176>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a1a      	ldr	r2, [pc, #104]	; (8004dc8 <HAL_TIM_PWM_Start+0x1d0>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d004      	beq.n	8004d6e <HAL_TIM_PWM_Start+0x176>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a14      	ldr	r2, [pc, #80]	; (8004dbc <HAL_TIM_PWM_Start+0x1c4>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d115      	bne.n	8004d9a <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	689a      	ldr	r2, [r3, #8]
 8004d74:	4b15      	ldr	r3, [pc, #84]	; (8004dcc <HAL_TIM_PWM_Start+0x1d4>)
 8004d76:	4013      	ands	r3, r2
 8004d78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2b06      	cmp	r3, #6
 8004d7e:	d015      	beq.n	8004dac <HAL_TIM_PWM_Start+0x1b4>
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d86:	d011      	beq.n	8004dac <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f042 0201 	orr.w	r2, r2, #1
 8004d96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d98:	e008      	b.n	8004dac <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f042 0201 	orr.w	r2, r2, #1
 8004da8:	601a      	str	r2, [r3, #0]
 8004daa:	e000      	b.n	8004dae <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3710      	adds	r7, #16
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	40012c00 	.word	0x40012c00
 8004dbc:	40014000 	.word	0x40014000
 8004dc0:	40014400 	.word	0x40014400
 8004dc4:	40014800 	.word	0x40014800
 8004dc8:	40000400 	.word	0x40000400
 8004dcc:	00010007 	.word	0x00010007

08004dd0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d101      	bne.n	8004de2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e049      	b.n	8004e76 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d106      	bne.n	8004dfc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f7fc fa6a 	bl	80012d0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2202      	movs	r2, #2
 8004e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	3304      	adds	r3, #4
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	4610      	mov	r0, r2
 8004e10:	f000 fb1a 	bl	8005448 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3708      	adds	r7, #8
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
	...

08004e80 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d104      	bne.n	8004e9e <HAL_TIM_IC_Start_IT+0x1e>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	e023      	b.n	8004ee6 <HAL_TIM_IC_Start_IT+0x66>
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	2b04      	cmp	r3, #4
 8004ea2:	d104      	bne.n	8004eae <HAL_TIM_IC_Start_IT+0x2e>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	e01b      	b.n	8004ee6 <HAL_TIM_IC_Start_IT+0x66>
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	2b08      	cmp	r3, #8
 8004eb2:	d104      	bne.n	8004ebe <HAL_TIM_IC_Start_IT+0x3e>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	e013      	b.n	8004ee6 <HAL_TIM_IC_Start_IT+0x66>
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	2b0c      	cmp	r3, #12
 8004ec2:	d104      	bne.n	8004ece <HAL_TIM_IC_Start_IT+0x4e>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	e00b      	b.n	8004ee6 <HAL_TIM_IC_Start_IT+0x66>
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	2b10      	cmp	r3, #16
 8004ed2:	d104      	bne.n	8004ede <HAL_TIM_IC_Start_IT+0x5e>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	e003      	b.n	8004ee6 <HAL_TIM_IC_Start_IT+0x66>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d104      	bne.n	8004ef8 <HAL_TIM_IC_Start_IT+0x78>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	e013      	b.n	8004f20 <HAL_TIM_IC_Start_IT+0xa0>
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	2b04      	cmp	r3, #4
 8004efc:	d104      	bne.n	8004f08 <HAL_TIM_IC_Start_IT+0x88>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	e00b      	b.n	8004f20 <HAL_TIM_IC_Start_IT+0xa0>
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	2b08      	cmp	r3, #8
 8004f0c:	d104      	bne.n	8004f18 <HAL_TIM_IC_Start_IT+0x98>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	e003      	b.n	8004f20 <HAL_TIM_IC_Start_IT+0xa0>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f22:	7bbb      	ldrb	r3, [r7, #14]
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d102      	bne.n	8004f2e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f28:	7b7b      	ldrb	r3, [r7, #13]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d001      	beq.n	8004f32 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e0ce      	b.n	80050d0 <HAL_TIM_IC_Start_IT+0x250>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d104      	bne.n	8004f42 <HAL_TIM_IC_Start_IT+0xc2>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2202      	movs	r2, #2
 8004f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f40:	e023      	b.n	8004f8a <HAL_TIM_IC_Start_IT+0x10a>
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	2b04      	cmp	r3, #4
 8004f46:	d104      	bne.n	8004f52 <HAL_TIM_IC_Start_IT+0xd2>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2202      	movs	r2, #2
 8004f4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f50:	e01b      	b.n	8004f8a <HAL_TIM_IC_Start_IT+0x10a>
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	2b08      	cmp	r3, #8
 8004f56:	d104      	bne.n	8004f62 <HAL_TIM_IC_Start_IT+0xe2>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2202      	movs	r2, #2
 8004f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f60:	e013      	b.n	8004f8a <HAL_TIM_IC_Start_IT+0x10a>
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	2b0c      	cmp	r3, #12
 8004f66:	d104      	bne.n	8004f72 <HAL_TIM_IC_Start_IT+0xf2>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2202      	movs	r2, #2
 8004f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f70:	e00b      	b.n	8004f8a <HAL_TIM_IC_Start_IT+0x10a>
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	2b10      	cmp	r3, #16
 8004f76:	d104      	bne.n	8004f82 <HAL_TIM_IC_Start_IT+0x102>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f80:	e003      	b.n	8004f8a <HAL_TIM_IC_Start_IT+0x10a>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2202      	movs	r2, #2
 8004f86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d104      	bne.n	8004f9a <HAL_TIM_IC_Start_IT+0x11a>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2202      	movs	r2, #2
 8004f94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f98:	e013      	b.n	8004fc2 <HAL_TIM_IC_Start_IT+0x142>
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	2b04      	cmp	r3, #4
 8004f9e:	d104      	bne.n	8004faa <HAL_TIM_IC_Start_IT+0x12a>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2202      	movs	r2, #2
 8004fa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fa8:	e00b      	b.n	8004fc2 <HAL_TIM_IC_Start_IT+0x142>
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	2b08      	cmp	r3, #8
 8004fae:	d104      	bne.n	8004fba <HAL_TIM_IC_Start_IT+0x13a>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2202      	movs	r2, #2
 8004fb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004fb8:	e003      	b.n	8004fc2 <HAL_TIM_IC_Start_IT+0x142>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2202      	movs	r2, #2
 8004fbe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	2b0c      	cmp	r3, #12
 8004fc6:	d841      	bhi.n	800504c <HAL_TIM_IC_Start_IT+0x1cc>
 8004fc8:	a201      	add	r2, pc, #4	; (adr r2, 8004fd0 <HAL_TIM_IC_Start_IT+0x150>)
 8004fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fce:	bf00      	nop
 8004fd0:	08005005 	.word	0x08005005
 8004fd4:	0800504d 	.word	0x0800504d
 8004fd8:	0800504d 	.word	0x0800504d
 8004fdc:	0800504d 	.word	0x0800504d
 8004fe0:	08005017 	.word	0x08005017
 8004fe4:	0800504d 	.word	0x0800504d
 8004fe8:	0800504d 	.word	0x0800504d
 8004fec:	0800504d 	.word	0x0800504d
 8004ff0:	08005029 	.word	0x08005029
 8004ff4:	0800504d 	.word	0x0800504d
 8004ff8:	0800504d 	.word	0x0800504d
 8004ffc:	0800504d 	.word	0x0800504d
 8005000:	0800503b 	.word	0x0800503b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68da      	ldr	r2, [r3, #12]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f042 0202 	orr.w	r2, r2, #2
 8005012:	60da      	str	r2, [r3, #12]
      break;
 8005014:	e01d      	b.n	8005052 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68da      	ldr	r2, [r3, #12]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f042 0204 	orr.w	r2, r2, #4
 8005024:	60da      	str	r2, [r3, #12]
      break;
 8005026:	e014      	b.n	8005052 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68da      	ldr	r2, [r3, #12]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f042 0208 	orr.w	r2, r2, #8
 8005036:	60da      	str	r2, [r3, #12]
      break;
 8005038:	e00b      	b.n	8005052 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68da      	ldr	r2, [r3, #12]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f042 0210 	orr.w	r2, r2, #16
 8005048:	60da      	str	r2, [r3, #12]
      break;
 800504a:	e002      	b.n	8005052 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	73fb      	strb	r3, [r7, #15]
      break;
 8005050:	bf00      	nop
  }

  if (status == HAL_OK)
 8005052:	7bfb      	ldrb	r3, [r7, #15]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d13a      	bne.n	80050ce <HAL_TIM_IC_Start_IT+0x24e>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2201      	movs	r2, #1
 800505e:	6839      	ldr	r1, [r7, #0]
 8005060:	4618      	mov	r0, r3
 8005062:	f000 fe21 	bl	8005ca8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a1b      	ldr	r2, [pc, #108]	; (80050d8 <HAL_TIM_IC_Start_IT+0x258>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d00e      	beq.n	800508e <HAL_TIM_IC_Start_IT+0x20e>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005078:	d009      	beq.n	800508e <HAL_TIM_IC_Start_IT+0x20e>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a17      	ldr	r2, [pc, #92]	; (80050dc <HAL_TIM_IC_Start_IT+0x25c>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d004      	beq.n	800508e <HAL_TIM_IC_Start_IT+0x20e>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a15      	ldr	r2, [pc, #84]	; (80050e0 <HAL_TIM_IC_Start_IT+0x260>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d115      	bne.n	80050ba <HAL_TIM_IC_Start_IT+0x23a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	689a      	ldr	r2, [r3, #8]
 8005094:	4b13      	ldr	r3, [pc, #76]	; (80050e4 <HAL_TIM_IC_Start_IT+0x264>)
 8005096:	4013      	ands	r3, r2
 8005098:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	2b06      	cmp	r3, #6
 800509e:	d015      	beq.n	80050cc <HAL_TIM_IC_Start_IT+0x24c>
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050a6:	d011      	beq.n	80050cc <HAL_TIM_IC_Start_IT+0x24c>
      {
        __HAL_TIM_ENABLE(htim);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f042 0201 	orr.w	r2, r2, #1
 80050b6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050b8:	e008      	b.n	80050cc <HAL_TIM_IC_Start_IT+0x24c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f042 0201 	orr.w	r2, r2, #1
 80050c8:	601a      	str	r2, [r3, #0]
 80050ca:	e000      	b.n	80050ce <HAL_TIM_IC_Start_IT+0x24e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050cc:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80050ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3710      	adds	r7, #16
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	40012c00 	.word	0x40012c00
 80050dc:	40000400 	.word	0x40000400
 80050e0:	40014000 	.word	0x40014000
 80050e4:	00010007 	.word	0x00010007

080050e8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b086      	sub	sp, #24
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050f4:	2300      	movs	r3, #0
 80050f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d101      	bne.n	8005106 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005102:	2302      	movs	r3, #2
 8005104:	e088      	b.n	8005218 <HAL_TIM_IC_ConfigChannel+0x130>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2201      	movs	r2, #1
 800510a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d11b      	bne.n	800514c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6818      	ldr	r0, [r3, #0]
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	6819      	ldr	r1, [r3, #0]
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	f000 fcae 	bl	8005a84 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	699a      	ldr	r2, [r3, #24]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f022 020c 	bic.w	r2, r2, #12
 8005136:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	6999      	ldr	r1, [r3, #24]
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	689a      	ldr	r2, [r3, #8]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	430a      	orrs	r2, r1
 8005148:	619a      	str	r2, [r3, #24]
 800514a:	e060      	b.n	800520e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2b04      	cmp	r3, #4
 8005150:	d11c      	bne.n	800518c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6818      	ldr	r0, [r3, #0]
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	6819      	ldr	r1, [r3, #0]
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	685a      	ldr	r2, [r3, #4]
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	f000 fceb 	bl	8005b3c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	699a      	ldr	r2, [r3, #24]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005174:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	6999      	ldr	r1, [r3, #24]
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	021a      	lsls	r2, r3, #8
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	430a      	orrs	r2, r1
 8005188:	619a      	str	r2, [r3, #24]
 800518a:	e040      	b.n	800520e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b08      	cmp	r3, #8
 8005190:	d11b      	bne.n	80051ca <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6818      	ldr	r0, [r3, #0]
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	6819      	ldr	r1, [r3, #0]
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	685a      	ldr	r2, [r3, #4]
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	f000 fd08 	bl	8005bb6 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	69da      	ldr	r2, [r3, #28]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f022 020c 	bic.w	r2, r2, #12
 80051b4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	69d9      	ldr	r1, [r3, #28]
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	689a      	ldr	r2, [r3, #8]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	430a      	orrs	r2, r1
 80051c6:	61da      	str	r2, [r3, #28]
 80051c8:	e021      	b.n	800520e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2b0c      	cmp	r3, #12
 80051ce:	d11c      	bne.n	800520a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6818      	ldr	r0, [r3, #0]
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	6819      	ldr	r1, [r3, #0]
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	685a      	ldr	r2, [r3, #4]
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	f000 fd25 	bl	8005c2e <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	69da      	ldr	r2, [r3, #28]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80051f2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	69d9      	ldr	r1, [r3, #28]
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	021a      	lsls	r2, r3, #8
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	430a      	orrs	r2, r1
 8005206:	61da      	str	r2, [r3, #28]
 8005208:	e001      	b.n	800520e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005216:	7dfb      	ldrb	r3, [r7, #23]
}
 8005218:	4618      	mov	r0, r3
 800521a:	3718      	adds	r7, #24
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b086      	sub	sp, #24
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800522c:	2300      	movs	r3, #0
 800522e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005236:	2b01      	cmp	r3, #1
 8005238:	d101      	bne.n	800523e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800523a:	2302      	movs	r3, #2
 800523c:	e0ff      	b.n	800543e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2201      	movs	r2, #1
 8005242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2b14      	cmp	r3, #20
 800524a:	f200 80f0 	bhi.w	800542e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800524e:	a201      	add	r2, pc, #4	; (adr r2, 8005254 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005254:	080052a9 	.word	0x080052a9
 8005258:	0800542f 	.word	0x0800542f
 800525c:	0800542f 	.word	0x0800542f
 8005260:	0800542f 	.word	0x0800542f
 8005264:	080052e9 	.word	0x080052e9
 8005268:	0800542f 	.word	0x0800542f
 800526c:	0800542f 	.word	0x0800542f
 8005270:	0800542f 	.word	0x0800542f
 8005274:	0800532b 	.word	0x0800532b
 8005278:	0800542f 	.word	0x0800542f
 800527c:	0800542f 	.word	0x0800542f
 8005280:	0800542f 	.word	0x0800542f
 8005284:	0800536b 	.word	0x0800536b
 8005288:	0800542f 	.word	0x0800542f
 800528c:	0800542f 	.word	0x0800542f
 8005290:	0800542f 	.word	0x0800542f
 8005294:	080053ad 	.word	0x080053ad
 8005298:	0800542f 	.word	0x0800542f
 800529c:	0800542f 	.word	0x0800542f
 80052a0:	0800542f 	.word	0x0800542f
 80052a4:	080053ed 	.word	0x080053ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68b9      	ldr	r1, [r7, #8]
 80052ae:	4618      	mov	r0, r3
 80052b0:	f000 f942 	bl	8005538 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	699a      	ldr	r2, [r3, #24]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f042 0208 	orr.w	r2, r2, #8
 80052c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	699a      	ldr	r2, [r3, #24]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f022 0204 	bic.w	r2, r2, #4
 80052d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	6999      	ldr	r1, [r3, #24]
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	691a      	ldr	r2, [r3, #16]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	430a      	orrs	r2, r1
 80052e4:	619a      	str	r2, [r3, #24]
      break;
 80052e6:	e0a5      	b.n	8005434 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68b9      	ldr	r1, [r7, #8]
 80052ee:	4618      	mov	r0, r3
 80052f0:	f000 f9a8 	bl	8005644 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	699a      	ldr	r2, [r3, #24]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005302:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	699a      	ldr	r2, [r3, #24]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005312:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	6999      	ldr	r1, [r3, #24]
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	021a      	lsls	r2, r3, #8
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	430a      	orrs	r2, r1
 8005326:	619a      	str	r2, [r3, #24]
      break;
 8005328:	e084      	b.n	8005434 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68b9      	ldr	r1, [r7, #8]
 8005330:	4618      	mov	r0, r3
 8005332:	f000 fa07 	bl	8005744 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	69da      	ldr	r2, [r3, #28]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f042 0208 	orr.w	r2, r2, #8
 8005344:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	69da      	ldr	r2, [r3, #28]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f022 0204 	bic.w	r2, r2, #4
 8005354:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	69d9      	ldr	r1, [r3, #28]
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	691a      	ldr	r2, [r3, #16]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	430a      	orrs	r2, r1
 8005366:	61da      	str	r2, [r3, #28]
      break;
 8005368:	e064      	b.n	8005434 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68b9      	ldr	r1, [r7, #8]
 8005370:	4618      	mov	r0, r3
 8005372:	f000 fa65 	bl	8005840 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	69da      	ldr	r2, [r3, #28]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005384:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	69da      	ldr	r2, [r3, #28]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005394:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	69d9      	ldr	r1, [r3, #28]
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	021a      	lsls	r2, r3, #8
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	430a      	orrs	r2, r1
 80053a8:	61da      	str	r2, [r3, #28]
      break;
 80053aa:	e043      	b.n	8005434 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68b9      	ldr	r1, [r7, #8]
 80053b2:	4618      	mov	r0, r3
 80053b4:	f000 faa8 	bl	8005908 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f042 0208 	orr.w	r2, r2, #8
 80053c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f022 0204 	bic.w	r2, r2, #4
 80053d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	691a      	ldr	r2, [r3, #16]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	430a      	orrs	r2, r1
 80053e8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80053ea:	e023      	b.n	8005434 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68b9      	ldr	r1, [r7, #8]
 80053f2:	4618      	mov	r0, r3
 80053f4:	f000 fae6 	bl	80059c4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005406:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005416:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	021a      	lsls	r2, r3, #8
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	430a      	orrs	r2, r1
 800542a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800542c:	e002      	b.n	8005434 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	75fb      	strb	r3, [r7, #23]
      break;
 8005432:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800543c:	7dfb      	ldrb	r3, [r7, #23]
}
 800543e:	4618      	mov	r0, r3
 8005440:	3718      	adds	r7, #24
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop

08005448 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a32      	ldr	r2, [pc, #200]	; (8005524 <TIM_Base_SetConfig+0xdc>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d007      	beq.n	8005470 <TIM_Base_SetConfig+0x28>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005466:	d003      	beq.n	8005470 <TIM_Base_SetConfig+0x28>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a2f      	ldr	r2, [pc, #188]	; (8005528 <TIM_Base_SetConfig+0xe0>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d108      	bne.n	8005482 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005476:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	4313      	orrs	r3, r2
 8005480:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a27      	ldr	r2, [pc, #156]	; (8005524 <TIM_Base_SetConfig+0xdc>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d013      	beq.n	80054b2 <TIM_Base_SetConfig+0x6a>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005490:	d00f      	beq.n	80054b2 <TIM_Base_SetConfig+0x6a>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a24      	ldr	r2, [pc, #144]	; (8005528 <TIM_Base_SetConfig+0xe0>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d00b      	beq.n	80054b2 <TIM_Base_SetConfig+0x6a>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a23      	ldr	r2, [pc, #140]	; (800552c <TIM_Base_SetConfig+0xe4>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d007      	beq.n	80054b2 <TIM_Base_SetConfig+0x6a>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a22      	ldr	r2, [pc, #136]	; (8005530 <TIM_Base_SetConfig+0xe8>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d003      	beq.n	80054b2 <TIM_Base_SetConfig+0x6a>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a21      	ldr	r2, [pc, #132]	; (8005534 <TIM_Base_SetConfig+0xec>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d108      	bne.n	80054c4 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	695b      	ldr	r3, [r3, #20]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	689a      	ldr	r2, [r3, #8]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a0e      	ldr	r2, [pc, #56]	; (8005524 <TIM_Base_SetConfig+0xdc>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d00b      	beq.n	8005508 <TIM_Base_SetConfig+0xc0>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a0e      	ldr	r2, [pc, #56]	; (800552c <TIM_Base_SetConfig+0xe4>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d007      	beq.n	8005508 <TIM_Base_SetConfig+0xc0>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a0d      	ldr	r2, [pc, #52]	; (8005530 <TIM_Base_SetConfig+0xe8>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d003      	beq.n	8005508 <TIM_Base_SetConfig+0xc0>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a0c      	ldr	r2, [pc, #48]	; (8005534 <TIM_Base_SetConfig+0xec>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d103      	bne.n	8005510 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	691a      	ldr	r2, [r3, #16]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	615a      	str	r2, [r3, #20]
}
 8005516:	bf00      	nop
 8005518:	3714      	adds	r7, #20
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	40012c00 	.word	0x40012c00
 8005528:	40000400 	.word	0x40000400
 800552c:	40014000 	.word	0x40014000
 8005530:	40014400 	.word	0x40014400
 8005534:	40014800 	.word	0x40014800

08005538 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005538:	b480      	push	{r7}
 800553a:	b087      	sub	sp, #28
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a1b      	ldr	r3, [r3, #32]
 8005546:	f023 0201 	bic.w	r2, r3, #1
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a1b      	ldr	r3, [r3, #32]
 8005552:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800556a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f023 0303 	bic.w	r3, r3, #3
 8005572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	4313      	orrs	r3, r2
 800557c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	f023 0302 	bic.w	r3, r3, #2
 8005584:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	697a      	ldr	r2, [r7, #20]
 800558c:	4313      	orrs	r3, r2
 800558e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a28      	ldr	r2, [pc, #160]	; (8005634 <TIM_OC1_SetConfig+0xfc>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d00b      	beq.n	80055b0 <TIM_OC1_SetConfig+0x78>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a27      	ldr	r2, [pc, #156]	; (8005638 <TIM_OC1_SetConfig+0x100>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d007      	beq.n	80055b0 <TIM_OC1_SetConfig+0x78>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a26      	ldr	r2, [pc, #152]	; (800563c <TIM_OC1_SetConfig+0x104>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d003      	beq.n	80055b0 <TIM_OC1_SetConfig+0x78>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a25      	ldr	r2, [pc, #148]	; (8005640 <TIM_OC1_SetConfig+0x108>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d10c      	bne.n	80055ca <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	f023 0308 	bic.w	r3, r3, #8
 80055b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	697a      	ldr	r2, [r7, #20]
 80055be:	4313      	orrs	r3, r2
 80055c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	f023 0304 	bic.w	r3, r3, #4
 80055c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a19      	ldr	r2, [pc, #100]	; (8005634 <TIM_OC1_SetConfig+0xfc>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d00b      	beq.n	80055ea <TIM_OC1_SetConfig+0xb2>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a18      	ldr	r2, [pc, #96]	; (8005638 <TIM_OC1_SetConfig+0x100>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d007      	beq.n	80055ea <TIM_OC1_SetConfig+0xb2>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a17      	ldr	r2, [pc, #92]	; (800563c <TIM_OC1_SetConfig+0x104>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d003      	beq.n	80055ea <TIM_OC1_SetConfig+0xb2>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a16      	ldr	r2, [pc, #88]	; (8005640 <TIM_OC1_SetConfig+0x108>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d111      	bne.n	800560e <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	693a      	ldr	r2, [r7, #16]
 8005600:	4313      	orrs	r3, r2
 8005602:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	4313      	orrs	r3, r2
 800560c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	685a      	ldr	r2, [r3, #4]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	621a      	str	r2, [r3, #32]
}
 8005628:	bf00      	nop
 800562a:	371c      	adds	r7, #28
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr
 8005634:	40012c00 	.word	0x40012c00
 8005638:	40014000 	.word	0x40014000
 800563c:	40014400 	.word	0x40014400
 8005640:	40014800 	.word	0x40014800

08005644 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005644:	b480      	push	{r7}
 8005646:	b087      	sub	sp, #28
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a1b      	ldr	r3, [r3, #32]
 8005652:	f023 0210 	bic.w	r2, r3, #16
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a1b      	ldr	r3, [r3, #32]
 800565e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005672:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800567e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	021b      	lsls	r3, r3, #8
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	4313      	orrs	r3, r2
 800568a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	f023 0320 	bic.w	r3, r3, #32
 8005692:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	011b      	lsls	r3, r3, #4
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	4313      	orrs	r3, r2
 800569e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a24      	ldr	r2, [pc, #144]	; (8005734 <TIM_OC2_SetConfig+0xf0>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d10d      	bne.n	80056c4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	011b      	lsls	r3, r3, #4
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a1b      	ldr	r2, [pc, #108]	; (8005734 <TIM_OC2_SetConfig+0xf0>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d00b      	beq.n	80056e4 <TIM_OC2_SetConfig+0xa0>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4a1a      	ldr	r2, [pc, #104]	; (8005738 <TIM_OC2_SetConfig+0xf4>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d007      	beq.n	80056e4 <TIM_OC2_SetConfig+0xa0>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a19      	ldr	r2, [pc, #100]	; (800573c <TIM_OC2_SetConfig+0xf8>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d003      	beq.n	80056e4 <TIM_OC2_SetConfig+0xa0>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4a18      	ldr	r2, [pc, #96]	; (8005740 <TIM_OC2_SetConfig+0xfc>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d113      	bne.n	800570c <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056ea:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056f2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	695b      	ldr	r3, [r3, #20]
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	693a      	ldr	r2, [r7, #16]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	699b      	ldr	r3, [r3, #24]
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	693a      	ldr	r2, [r7, #16]
 8005708:	4313      	orrs	r3, r2
 800570a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	693a      	ldr	r2, [r7, #16]
 8005710:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	685a      	ldr	r2, [r3, #4]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	621a      	str	r2, [r3, #32]
}
 8005726:	bf00      	nop
 8005728:	371c      	adds	r7, #28
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr
 8005732:	bf00      	nop
 8005734:	40012c00 	.word	0x40012c00
 8005738:	40014000 	.word	0x40014000
 800573c:	40014400 	.word	0x40014400
 8005740:	40014800 	.word	0x40014800

08005744 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005744:	b480      	push	{r7}
 8005746:	b087      	sub	sp, #28
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a1b      	ldr	r3, [r3, #32]
 800575e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	69db      	ldr	r3, [r3, #28]
 800576a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f023 0303 	bic.w	r3, r3, #3
 800577e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	4313      	orrs	r3, r2
 8005788:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005790:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	021b      	lsls	r3, r3, #8
 8005798:	697a      	ldr	r2, [r7, #20]
 800579a:	4313      	orrs	r3, r2
 800579c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a23      	ldr	r2, [pc, #140]	; (8005830 <TIM_OC3_SetConfig+0xec>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d10d      	bne.n	80057c2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	021b      	lsls	r3, r3, #8
 80057b4:	697a      	ldr	r2, [r7, #20]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057c0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a1a      	ldr	r2, [pc, #104]	; (8005830 <TIM_OC3_SetConfig+0xec>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d00b      	beq.n	80057e2 <TIM_OC3_SetConfig+0x9e>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a19      	ldr	r2, [pc, #100]	; (8005834 <TIM_OC3_SetConfig+0xf0>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d007      	beq.n	80057e2 <TIM_OC3_SetConfig+0x9e>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a18      	ldr	r2, [pc, #96]	; (8005838 <TIM_OC3_SetConfig+0xf4>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d003      	beq.n	80057e2 <TIM_OC3_SetConfig+0x9e>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a17      	ldr	r2, [pc, #92]	; (800583c <TIM_OC3_SetConfig+0xf8>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d113      	bne.n	800580a <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	011b      	lsls	r3, r3, #4
 80057f8:	693a      	ldr	r2, [r7, #16]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	011b      	lsls	r3, r3, #4
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	4313      	orrs	r3, r2
 8005808:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	685a      	ldr	r2, [r3, #4]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	697a      	ldr	r2, [r7, #20]
 8005822:	621a      	str	r2, [r3, #32]
}
 8005824:	bf00      	nop
 8005826:	371c      	adds	r7, #28
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr
 8005830:	40012c00 	.word	0x40012c00
 8005834:	40014000 	.word	0x40014000
 8005838:	40014400 	.word	0x40014400
 800583c:	40014800 	.word	0x40014800

08005840 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005840:	b480      	push	{r7}
 8005842:	b087      	sub	sp, #28
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a1b      	ldr	r3, [r3, #32]
 800584e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a1b      	ldr	r3, [r3, #32]
 800585a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	69db      	ldr	r3, [r3, #28]
 8005866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800586e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800587a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	021b      	lsls	r3, r3, #8
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	4313      	orrs	r3, r2
 8005886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800588e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	031b      	lsls	r3, r3, #12
 8005896:	693a      	ldr	r2, [r7, #16]
 8005898:	4313      	orrs	r3, r2
 800589a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a16      	ldr	r2, [pc, #88]	; (80058f8 <TIM_OC4_SetConfig+0xb8>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d00b      	beq.n	80058bc <TIM_OC4_SetConfig+0x7c>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a15      	ldr	r2, [pc, #84]	; (80058fc <TIM_OC4_SetConfig+0xbc>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d007      	beq.n	80058bc <TIM_OC4_SetConfig+0x7c>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a14      	ldr	r2, [pc, #80]	; (8005900 <TIM_OC4_SetConfig+0xc0>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d003      	beq.n	80058bc <TIM_OC4_SetConfig+0x7c>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4a13      	ldr	r2, [pc, #76]	; (8005904 <TIM_OC4_SetConfig+0xc4>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d109      	bne.n	80058d0 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	695b      	ldr	r3, [r3, #20]
 80058c8:	019b      	lsls	r3, r3, #6
 80058ca:	697a      	ldr	r2, [r7, #20]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	697a      	ldr	r2, [r7, #20]
 80058d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	685a      	ldr	r2, [r3, #4]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	693a      	ldr	r2, [r7, #16]
 80058e8:	621a      	str	r2, [r3, #32]
}
 80058ea:	bf00      	nop
 80058ec:	371c      	adds	r7, #28
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	40012c00 	.word	0x40012c00
 80058fc:	40014000 	.word	0x40014000
 8005900:	40014400 	.word	0x40014400
 8005904:	40014800 	.word	0x40014800

08005908 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005908:	b480      	push	{r7}
 800590a:	b087      	sub	sp, #28
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a1b      	ldr	r3, [r3, #32]
 8005916:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a1b      	ldr	r3, [r3, #32]
 8005922:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800592e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800593a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	4313      	orrs	r3, r2
 8005944:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800594c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	041b      	lsls	r3, r3, #16
 8005954:	693a      	ldr	r2, [r7, #16]
 8005956:	4313      	orrs	r3, r2
 8005958:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a15      	ldr	r2, [pc, #84]	; (80059b4 <TIM_OC5_SetConfig+0xac>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d00b      	beq.n	800597a <TIM_OC5_SetConfig+0x72>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a14      	ldr	r2, [pc, #80]	; (80059b8 <TIM_OC5_SetConfig+0xb0>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d007      	beq.n	800597a <TIM_OC5_SetConfig+0x72>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a13      	ldr	r2, [pc, #76]	; (80059bc <TIM_OC5_SetConfig+0xb4>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d003      	beq.n	800597a <TIM_OC5_SetConfig+0x72>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a12      	ldr	r2, [pc, #72]	; (80059c0 <TIM_OC5_SetConfig+0xb8>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d109      	bne.n	800598e <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005980:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	021b      	lsls	r3, r3, #8
 8005988:	697a      	ldr	r2, [r7, #20]
 800598a:	4313      	orrs	r3, r2
 800598c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	697a      	ldr	r2, [r7, #20]
 8005992:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	685a      	ldr	r2, [r3, #4]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	693a      	ldr	r2, [r7, #16]
 80059a6:	621a      	str	r2, [r3, #32]
}
 80059a8:	bf00      	nop
 80059aa:	371c      	adds	r7, #28
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr
 80059b4:	40012c00 	.word	0x40012c00
 80059b8:	40014000 	.word	0x40014000
 80059bc:	40014400 	.word	0x40014400
 80059c0:	40014800 	.word	0x40014800

080059c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b087      	sub	sp, #28
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a1b      	ldr	r3, [r3, #32]
 80059d2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a1b      	ldr	r3, [r3, #32]
 80059de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	021b      	lsls	r3, r3, #8
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	051b      	lsls	r3, r3, #20
 8005a12:	693a      	ldr	r2, [r7, #16]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a16      	ldr	r2, [pc, #88]	; (8005a74 <TIM_OC6_SetConfig+0xb0>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d00b      	beq.n	8005a38 <TIM_OC6_SetConfig+0x74>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a15      	ldr	r2, [pc, #84]	; (8005a78 <TIM_OC6_SetConfig+0xb4>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d007      	beq.n	8005a38 <TIM_OC6_SetConfig+0x74>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a14      	ldr	r2, [pc, #80]	; (8005a7c <TIM_OC6_SetConfig+0xb8>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d003      	beq.n	8005a38 <TIM_OC6_SetConfig+0x74>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a13      	ldr	r2, [pc, #76]	; (8005a80 <TIM_OC6_SetConfig+0xbc>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d109      	bne.n	8005a4c <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a3e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	695b      	ldr	r3, [r3, #20]
 8005a44:	029b      	lsls	r3, r3, #10
 8005a46:	697a      	ldr	r2, [r7, #20]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	697a      	ldr	r2, [r7, #20]
 8005a50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	685a      	ldr	r2, [r3, #4]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	693a      	ldr	r2, [r7, #16]
 8005a64:	621a      	str	r2, [r3, #32]
}
 8005a66:	bf00      	nop
 8005a68:	371c      	adds	r7, #28
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop
 8005a74:	40012c00 	.word	0x40012c00
 8005a78:	40014000 	.word	0x40014000
 8005a7c:	40014400 	.word	0x40014400
 8005a80:	40014800 	.word	0x40014800

08005a84 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b087      	sub	sp, #28
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	607a      	str	r2, [r7, #4]
 8005a90:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6a1b      	ldr	r3, [r3, #32]
 8005a96:	f023 0201 	bic.w	r2, r3, #1
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6a1b      	ldr	r3, [r3, #32]
 8005aa8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	4a20      	ldr	r2, [pc, #128]	; (8005b30 <TIM_TI1_SetConfig+0xac>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d00b      	beq.n	8005aca <TIM_TI1_SetConfig+0x46>
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ab8:	d007      	beq.n	8005aca <TIM_TI1_SetConfig+0x46>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	4a1d      	ldr	r2, [pc, #116]	; (8005b34 <TIM_TI1_SetConfig+0xb0>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d003      	beq.n	8005aca <TIM_TI1_SetConfig+0x46>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	4a1c      	ldr	r2, [pc, #112]	; (8005b38 <TIM_TI1_SetConfig+0xb4>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d101      	bne.n	8005ace <TIM_TI1_SetConfig+0x4a>
 8005aca:	2301      	movs	r3, #1
 8005acc:	e000      	b.n	8005ad0 <TIM_TI1_SetConfig+0x4c>
 8005ace:	2300      	movs	r3, #0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d008      	beq.n	8005ae6 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	f023 0303 	bic.w	r3, r3, #3
 8005ada:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005adc:	697a      	ldr	r2, [r7, #20]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	617b      	str	r3, [r7, #20]
 8005ae4:	e003      	b.n	8005aee <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	f043 0301 	orr.w	r3, r3, #1
 8005aec:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005af4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	011b      	lsls	r3, r3, #4
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	697a      	ldr	r2, [r7, #20]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	f023 030a 	bic.w	r3, r3, #10
 8005b08:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	f003 030a 	and.w	r3, r3, #10
 8005b10:	693a      	ldr	r2, [r7, #16]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	697a      	ldr	r2, [r7, #20]
 8005b1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	693a      	ldr	r2, [r7, #16]
 8005b20:	621a      	str	r2, [r3, #32]
}
 8005b22:	bf00      	nop
 8005b24:	371c      	adds	r7, #28
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	40012c00 	.word	0x40012c00
 8005b34:	40000400 	.word	0x40000400
 8005b38:	40014000 	.word	0x40014000

08005b3c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b087      	sub	sp, #28
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	607a      	str	r2, [r7, #4]
 8005b48:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6a1b      	ldr	r3, [r3, #32]
 8005b4e:	f023 0210 	bic.w	r2, r3, #16
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	699b      	ldr	r3, [r3, #24]
 8005b5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6a1b      	ldr	r3, [r3, #32]
 8005b60:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	021b      	lsls	r3, r3, #8
 8005b6e:	697a      	ldr	r2, [r7, #20]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b7a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	031b      	lsls	r3, r3, #12
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	697a      	ldr	r2, [r7, #20]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b8e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	011b      	lsls	r3, r3, #4
 8005b94:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	697a      	ldr	r2, [r7, #20]
 8005ba2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	693a      	ldr	r2, [r7, #16]
 8005ba8:	621a      	str	r2, [r3, #32]
}
 8005baa:	bf00      	nop
 8005bac:	371c      	adds	r7, #28
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr

08005bb6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005bb6:	b480      	push	{r7}
 8005bb8:	b087      	sub	sp, #28
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	60f8      	str	r0, [r7, #12]
 8005bbe:	60b9      	str	r1, [r7, #8]
 8005bc0:	607a      	str	r2, [r7, #4]
 8005bc2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6a1b      	ldr	r3, [r3, #32]
 8005bc8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	69db      	ldr	r3, [r3, #28]
 8005bd4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6a1b      	ldr	r3, [r3, #32]
 8005bda:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	f023 0303 	bic.w	r3, r3, #3
 8005be2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005be4:	697a      	ldr	r2, [r7, #20]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bf2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	011b      	lsls	r3, r3, #4
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	697a      	ldr	r2, [r7, #20]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005c06:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	021b      	lsls	r3, r3, #8
 8005c0c:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005c10:	693a      	ldr	r2, [r7, #16]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	697a      	ldr	r2, [r7, #20]
 8005c1a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	621a      	str	r2, [r3, #32]
}
 8005c22:	bf00      	nop
 8005c24:	371c      	adds	r7, #28
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr

08005c2e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005c2e:	b480      	push	{r7}
 8005c30:	b087      	sub	sp, #28
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	60f8      	str	r0, [r7, #12]
 8005c36:	60b9      	str	r1, [r7, #8]
 8005c38:	607a      	str	r2, [r7, #4]
 8005c3a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6a1b      	ldr	r3, [r3, #32]
 8005c40:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	69db      	ldr	r3, [r3, #28]
 8005c4c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c5a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	021b      	lsls	r3, r3, #8
 8005c60:	697a      	ldr	r2, [r7, #20]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c6c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	031b      	lsls	r3, r3, #12
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	697a      	ldr	r2, [r7, #20]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005c80:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	031b      	lsls	r3, r3, #12
 8005c86:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005c8a:	693a      	ldr	r2, [r7, #16]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	697a      	ldr	r2, [r7, #20]
 8005c94:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	693a      	ldr	r2, [r7, #16]
 8005c9a:	621a      	str	r2, [r3, #32]
}
 8005c9c:	bf00      	nop
 8005c9e:	371c      	adds	r7, #28
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b087      	sub	sp, #28
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	f003 031f 	and.w	r3, r3, #31
 8005cba:	2201      	movs	r2, #1
 8005cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6a1a      	ldr	r2, [r3, #32]
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	43db      	mvns	r3, r3
 8005cca:	401a      	ands	r2, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6a1a      	ldr	r2, [r3, #32]
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	f003 031f 	and.w	r3, r3, #31
 8005cda:	6879      	ldr	r1, [r7, #4]
 8005cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8005ce0:	431a      	orrs	r2, r3
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	621a      	str	r2, [r3, #32]
}
 8005ce6:	bf00      	nop
 8005ce8:	371c      	adds	r7, #28
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr
	...

08005cf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b085      	sub	sp, #20
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d101      	bne.n	8005d0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d08:	2302      	movs	r3, #2
 8005d0a:	e054      	b.n	8005db6 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2202      	movs	r2, #2
 8005d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a24      	ldr	r2, [pc, #144]	; (8005dc4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d108      	bne.n	8005d48 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005d3c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a17      	ldr	r2, [pc, #92]	; (8005dc4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d00e      	beq.n	8005d8a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d74:	d009      	beq.n	8005d8a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a13      	ldr	r2, [pc, #76]	; (8005dc8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d004      	beq.n	8005d8a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a11      	ldr	r2, [pc, #68]	; (8005dcc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d10c      	bne.n	8005da4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	68ba      	ldr	r2, [r7, #8]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68ba      	ldr	r2, [r7, #8]
 8005da2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3714      	adds	r7, #20
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop
 8005dc4:	40012c00 	.word	0x40012c00
 8005dc8:	40000400 	.word	0x40000400
 8005dcc:	40014000 	.word	0x40014000

08005dd0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b085      	sub	sp, #20
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d101      	bne.n	8005dec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005de8:	2302      	movs	r3, #2
 8005dea:	e060      	b.n	8005eae <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	695b      	ldr	r3, [r3, #20]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e52:	4313      	orrs	r3, r2
 8005e54:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	699b      	ldr	r3, [r3, #24]
 8005e60:	041b      	lsls	r3, r3, #16
 8005e62:	4313      	orrs	r3, r2
 8005e64:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a14      	ldr	r2, [pc, #80]	; (8005ebc <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d115      	bne.n	8005e9c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7a:	051b      	lsls	r3, r3, #20
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	69db      	ldr	r3, [r3, #28]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	6a1b      	ldr	r3, [r3, #32]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3714      	adds	r7, #20
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop
 8005ebc:	40012c00 	.word	0x40012c00

08005ec0 <__libc_init_array>:
 8005ec0:	b570      	push	{r4, r5, r6, lr}
 8005ec2:	4d0d      	ldr	r5, [pc, #52]	; (8005ef8 <__libc_init_array+0x38>)
 8005ec4:	4c0d      	ldr	r4, [pc, #52]	; (8005efc <__libc_init_array+0x3c>)
 8005ec6:	1b64      	subs	r4, r4, r5
 8005ec8:	10a4      	asrs	r4, r4, #2
 8005eca:	2600      	movs	r6, #0
 8005ecc:	42a6      	cmp	r6, r4
 8005ece:	d109      	bne.n	8005ee4 <__libc_init_array+0x24>
 8005ed0:	4d0b      	ldr	r5, [pc, #44]	; (8005f00 <__libc_init_array+0x40>)
 8005ed2:	4c0c      	ldr	r4, [pc, #48]	; (8005f04 <__libc_init_array+0x44>)
 8005ed4:	f000 f820 	bl	8005f18 <_init>
 8005ed8:	1b64      	subs	r4, r4, r5
 8005eda:	10a4      	asrs	r4, r4, #2
 8005edc:	2600      	movs	r6, #0
 8005ede:	42a6      	cmp	r6, r4
 8005ee0:	d105      	bne.n	8005eee <__libc_init_array+0x2e>
 8005ee2:	bd70      	pop	{r4, r5, r6, pc}
 8005ee4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ee8:	4798      	blx	r3
 8005eea:	3601      	adds	r6, #1
 8005eec:	e7ee      	b.n	8005ecc <__libc_init_array+0xc>
 8005eee:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ef2:	4798      	blx	r3
 8005ef4:	3601      	adds	r6, #1
 8005ef6:	e7f2      	b.n	8005ede <__libc_init_array+0x1e>
 8005ef8:	08005f60 	.word	0x08005f60
 8005efc:	08005f60 	.word	0x08005f60
 8005f00:	08005f60 	.word	0x08005f60
 8005f04:	08005f64 	.word	0x08005f64

08005f08 <memset>:
 8005f08:	4402      	add	r2, r0
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d100      	bne.n	8005f12 <memset+0xa>
 8005f10:	4770      	bx	lr
 8005f12:	f803 1b01 	strb.w	r1, [r3], #1
 8005f16:	e7f9      	b.n	8005f0c <memset+0x4>

08005f18 <_init>:
 8005f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f1a:	bf00      	nop
 8005f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f1e:	bc08      	pop	{r3}
 8005f20:	469e      	mov	lr, r3
 8005f22:	4770      	bx	lr

08005f24 <_fini>:
 8005f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f26:	bf00      	nop
 8005f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f2a:	bc08      	pop	{r3}
 8005f2c:	469e      	mov	lr, r3
 8005f2e:	4770      	bx	lr
